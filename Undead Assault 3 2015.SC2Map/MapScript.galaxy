//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Undead Assault 3
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/SwarmCampaignLib"
include "ai71EEC1FA"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libSwaC_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_modetotal = 8;
const int gv_heroarraysize = 13;
const fixed gv_c0GOURMANDDURATION = 360.0;
const fixed gv_c0GOURMANDINTERVAL = 10.0;
const fixed gv_bRADLEY_LIFE_PERCENT = 45.0;
const color gv_cOLOURCOMBATEFFECT = Color(100.00, 0.00, 0.00);
const int gv_lNDataEntriesSize = 5;
const int gv_decals = 10;
const int gv_camos = 18;
const int gv_sIcount = 23;
const int gv_medalscount = 13;
const int gv_ailmentCount = 10;
const int gv_miniarraysize = 7;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_PMCSquad {
    unitgroup lv_group;
    unit lv_squadLeader;
    bool lv_extracting;
};

struct gs_PolicePatrol {
    unitgroup lv_group;
    point[9] lv_route;
    int lv_routenext;
    int lv_routemax;
    bool lv_returning;
};

struct gs_LNData {
    int lv_maximumnumber;
    string lv_lntype;
    int lv_leadershiprequirementlevel;
    unitgroup lv_existing;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unitgroup gv_missionItemPingItems;
int[13] gv_visorTextDialog;
int[13] gv_visorText;
timer[13] gv_visorTextTimer;
unit[13] gv_heroselector;
unitgroup gv_heroselectors;
unit gv_phantombeginning;
int gv_gamemode;
text[9] gv_gamemodename;
int[9] gv_modevote;
int gv_votestotal;
int gv_modedialog;
int[9] gv_modeitem;
int[9] gv_modespawnmodifier;
fixed gv_xpmodifier;
int[6] gv_dialogmodifier;
int[4] gv_dialogrankset;
int[6] gv_modifiervote;
bool gv_mod_outbreak;
bool gv_mod_rifle;
bool gv_mod_1life;
bool gv_mod_tier1;
int gv_modetimeoutwindow;
timer gv_modetimer;
int[13] gv_playermodevote;
int gv_competivemodeimage;
int gv_pMCsquadcnt;
gs_PMCSquad[17] gv_pMCSquads;
bool gv_pMCAlert;
timer gv_pMCAlertTimer;
unit gv_policeCommissioner;
region[12] gv_policeTCPs;
bool[8] gv_tCPRelieved;
unitgroup[12] gv_policeTCPGroups;
int gv_phantomDownLZ;
unitgroup gv_phantomCrew;
actor gv_rAPhantom;
int gv_phantomCrewExtraction;
bool gv_pConvoyReverse;
unit[4] gv_missionUnit;
unitgroup gv_ghostSquad;
int gv_biosamplehanded;
unitgroup gv_biosamples;
string[gv_heroarraysize + 1] gv_herotypes;
int[gv_heroarraysize + 1] gv_heroweights;
fixed gv_respawnTime;
region[13] gv_teamspawnregions;
playergroup[13] gv_teams;
int gv_teamCount;
bool gv_respawn;
int[13] gv_playersTeam;
int[13] gv_teamScores;
int[5] gv_teamColors;
trigger[6] gv_cOMPRoundModes;
int gv_rounds;
int[13] gv_playerRoundWins;
bool gv_killingPoints;
int[13] gv_cOMPPlayerKills;
int[13] gv_playerDeaths;
region[5] gv_sRSiloRegions;
unit[5] gv_sRSilos;
bool gv_survivalCompleted;
region gv_umbraRegion;
int gv_mainObj;
int gv_secondObj;
int gv_thirdObj;
int gv_optionalObj;
int gv_infestationLevel;
sound gv_heartbeat;
bool gv_heartbeatplaying;
int gv_averageXP;
int gv_xPGained;
bool[13] gv_playerxphalved;
bool[4] gv_missioncomplete;
int gv_missionping;
int gv_pingsecondary;
timer gv_missiontimer;
int gv_missiontimerwindow;
unit gv_abdul;
unit gv_darreus;
point[5] gv_darreuspoints;
int gv_darreusnext;
unit[4] gv_generators;
unit gv_mayor;
bool[9] gv_sentryset;
region[9] gv_tCPregion;
unit[9] gv_sentryguns;
unitgroup gv_simpleMissionItems;
region gv_sensorLZ;
bool[8] gv_sensorset;
int[12] gv_sensorpings;
actor gv_sensorbeacon;
int gv_sensorcount;
region[8] gv_sensorregion;
string[11] gv_pingnumeral;
unit gv_farmerakma;
region[9] gv_silos;
region[9] gv_silonext;
int gv_silonextint;
int gv_silocount;
unitgroup gv_tCPhostiles;
bool[5] gv_tCPfailed;
region[5] gv_tCPSpawns;
unitgroup gv_survivors;
text[6] gv_findsurvivorchat1;
text[6] gv_findsurvivorchat2;
int gv_survivorsrescued;
point[4][13] gv_convoyroutes;
region[4][3] gv_convoystartend;
int gv_convoynext;
int gv_convoyset;
int gv_convoymax;
unitgroup gv_convoy;
int gv_convoyvehiclessafe;
bool gv_convoymessage;
bool gv_convoyfinal;
unitgroup gv_rAmayorPSD;
int gv_guslaniping;
int[9] gv_highlanderpings;
unit gv_rAmayorphantom;
unitgroup gv_guslanicivilians;
bool[4] gv_escortcivmissioncomplete;
region[9] gv_highlanders;
bool[9] gv_highlanderssearched;
unitgroup gv_highlandercivilians;
int gv_highlanderrescued;
int gv_highlandertorescue;
int gv_guslanirescued;
int gv_guslanitorescue;
point[23] gv_patrolroute;
int gv_patrolnext;
int gv_patrolset;
int gv_patrolmax;
unitgroup gv_patrol;
unit gv_sabercommander;
unitgroup gv_commanders;
unit gv_ravenswordcommander;
int gv_commandertexttag;
unitgroup gv_casualties;
region gv_medevacregion;
unit gv_mEDEVAC;
unit[4] gv_bDS;
region[4] gv_bDSRegion;
int[4] gv_bDSPings;
int[4] gv_optionalObjPings;
bool gv_darkness;
unitgroup gv_plaguevectors;
unitgroup gv_transitionalgroup;
int gv_civsevacuated;
region[13] gv_graveSites;
actor[13] gv_graveSiteActors;
unitgroup gv_graveDiggers;
bool gv_refugeekilled;
unitgroup gv_snipers;
unit gv_disabledtank;
unitgroup gv_combatengineers;
int gv_scientistsextracted;
text[6] gv_detainScientistChat;
text[6] gv_detainScientistResponse;
unit[6] gv_infestedsilos;
bool[9] gv_silodisabled;
bool[6] gv_siloboomed;
bool gv_anysiloboomed;
int[6] gv_silotimeremaining;
int[6] gv_silotimemax;
region[6] gv_silosite;
int[6] gv_silotexttag;
bool gv_skiesclear;
int[3] gv_dsvotes;
int gv_dsdialog;
int[3] gv_dsdialogbuttons;
unitgroup gv_drJashanGuards;
unit gv_drJashan;
unitgroup gv_civilians;
unitgroup[4] gv_wanderers;
region[4] gv_cityRegions;
gs_PolicePatrol[4] gv_policePatrols;
region[6] gv_weaponcacheregion;
bool[6] gv_weaponcachefound;
int gv_weaponcachesfound;
bool gv_allowRifles;
bool gv_allowMachineGuns;
bool gv_allowShotguns;
bool gv_allowDMR;
bool gv_allowPlasmaRifles;
bool gv_allowFlamethrowers;
unitgroup gv_laserDesignatorDesignated;
int gv_battleFocusCasts;
int[13] gv_iDFShells;
fixed[13] gv_iDFRadius;
fixed[13] gv_iDFDistro;
fixed[13] gv_iDFInterval;
int gv_iDFShellsGlobal;
bool gv_fireMission;
bool gv_iDFAvailable;
gs_LNData[gv_lNDataEntriesSize + 1] gv_lNDataEntries;
int gv_lNMaximumNumber;
unitgroup gv_lNAll;
unitgroup gv_lNAvailable;
region gv_lNRallyPoint;
int gv_lNRallyPing;
actor gv_lNRallyActor;
fixed gv_lNProtectionDuration;
region gv_lNSpawn;
int gv_totalLeadershipLevel;
int[17] gv_sFAATRecruitMaximum;
unitgroup[17] gv_sFAATRecruits;
playergroup gv_leadershipOwners;
fixed[7] gv_fogvars;
bool gv_fogevent;
string gv_currentlighting;
bool[13] gv_playerNODson;
bool gv_gameOver;
int gv_spawnCount;
region[5] gv_mapEdges;
unit[13] gv_playerHeroes;
unitgroup gv_heroesGroup;
unitgroup gv_undeadGroup;
playergroup gv_players;
region[6] gv_lZs;
int gv_startingplayers;
int gv_escapeHokey;
bool gv_victory;
string gv_uA3BANKNAME;
int[17] gv_playerImportedFromUA3;
bank[13] gv_banks;
bank[13] gv_banksold;
bool gv_savedisabled;
bool[17] gv_saveprevent;
bool[gv_camos + 1][13] gv_playercamounlocked;
string[gv_camos + 1] gv_playercamoactormsg;
string[gv_camos + 1] gv_playercamostring;
bool[gv_decals + 1][13] gv_playerdecalunlocked;
string[gv_decals + 1] gv_playerdecalactormsg;
string[gv_decals + 1] gv_playerdecalstring;
bool gv_octoLoop;
unitgroup gv_octoCamos;
string[9] gv_octoCamoactormsg;
string[9] gv_octoCamoTextures;
int[4] gv_rankMax;
int[13] gv_playerRankSet;
text[4][15] gv_rankPrefix;
int[4][15] gv_rankXPMin;
string[4][15] gv_rankActorMsg;
string[4][15] gv_rankDecal;
int[4][13] gv_playerExperience;
int[13] gv_playerStartingXP;
int[13] gv_playerRevives;
int[13] gv_playerRevivesGame;
int[13] gv_playerGamesPlayed;
int[13] gv_playerAvgGameTime;
int gv_unlockDialog;
int[gv_decals + 1] gv_decalDialogButtons;
int[gv_camos + 1] gv_camoDialogButtons;
int[13] gv_unlockDialogItems;
int[13] gv_playerCurrentCamo;
int[13] gv_playerCurrentDecal;
int gv_sIDialog;
int[gv_sIcount + 1] gv_sIDialogButtons;
int[3] gv_sIDialogLabels;
text[gv_sIcount + 1] gv_sIname;
string[gv_sIcount + 1] gv_sIabbreviation;
text[gv_sIcount + 1] gv_sIdescription;
bool[gv_sIcount + 1][13] gv_sIunlocked;
int[4][gv_sIcount + 1] gv_sIXPminimum;
int[13] gv_playerSIcount;
int[3][13] gv_playerSIsused;
int[13] gv_functionaldialog;
int[17][13] gv_functionaldialogbuttons;
int[3][13] gv_funcdialogoffsets;
bool[13] gv_unitmodelsetup;
int gv_hUDDialog;
int[10][15] gv_hUDDialogItems;
bool[13][13] gv_playervoted;
unitgroup[13] gv_heroskilledbyplayer;
unitgroup[13] gv_playerdroppedammo;
string[13] gv_playerHeroImage;
int gv_statusDialog;
int[11][13] gv_statusDialogItems;
int gv_fireteamDialog;
int[11] gv_fireteamdialogbuttons;
playergroup[5] gv_fireteamGroups;
text[5] gv_fireteamnames;
int[5][5] gv_fireteamlabels;
int[13] gv_playersfireteam;
int[5] gv_fireteamTLs;
int[5] gv_fireteamORP;
unit[13] gv_fireteamORPpoints;
int gv_sprintbar;
unitgroup gv_sprinters;
int gv_ammoDialogue;
int[7] gv_ammoDialogueItems;
int gv_medalsDialog;
int[gv_medalscount + 1] gv_medalsDialogItems;
bool[gv_medalscount + 1][13] gv_medalsunlocked;
string[gv_medalscount + 1] gv_medalsnames;
string[gv_medalscount + 1] gv_medalimages;
text[gv_medalscount + 1] gv_medalstooltip;
int[13] gv_playerkills;
int[13] gv_playermassivekills;
int[13] gv_playerheals;
int[9][13] gv_gamesWon;
int[13] gv_playerhits;
string[gv_ailmentCount + 1] gv_ailments;
int[gv_ailmentCount + 1] gv_ailmentIndividualChance;
int gv_ailmentChance;
string[gv_ailmentCount + 1] gv_ailmentImages;
string[gv_miniarraysize + 1] gv_minitypes;
int[gv_miniarraysize + 1] gv_miniweights;
unitgroup gv_reloading;
int[13] gv_magsize;
int[13] gv_magsused;
unitgroup gv_jammed;
unitgroup gv_immediateAction;
fixed[13] gv_reloadbasetime;
unit gv_lastlandedphantom;
unit[13] gv_deadHeroIndicator;
int[13] gv_playerkickvotes;
bool[13] gv_playerkickable;
string[3][13] gv_playerSIbehaviors;
bool[13] gv_playerheroisdead;
int[13] gv_playerEncumbrance;
unitgroup gv_undeadTargetGroup;
bool gv_pauseSpawning;
region gv_spawnRegion;
region gv_bossSpawnRegion;
bool gv_tCPspawning;
bool gv_undeadMutations;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_missionItemPingItems = UnitGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_visorTextDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_visorText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_visorTextTimer[init_i] = TimerCreate();
    }
    gv_heroselectors = UnitGroupEmpty();
    gv_modedialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_modeitem[init_i] = c_invalidDialogControlId;
    }
    gv_xpmodifier = 1.0;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_dialogmodifier[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_dialogrankset[init_i] = c_invalidDialogControlId;
    }
    gv_modetimeoutwindow = c_timerWindowNone;
    gv_modetimer = TimerCreate();
    gv_competivemodeimage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_pMCSquads[init_i].lv_group = UnitGroupEmpty();
    }
    gv_pMCAlertTimer = TimerCreate();
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_policeTCPGroups[init_i] = UnitGroupEmpty();
    }
    gv_phantomCrew = UnitGroupEmpty();
    gv_ghostSquad = UnitGroupEmpty();
    gv_biosamples = UnitGroupEmpty();
    gv_respawnTime = 15.0;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_teamspawnregions[init_i] = RegionEmpty();
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_teams[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_teamColors[init_i] = 1;
    }
    gv_mainObj = c_invalidObjectiveId;
    gv_secondObj = c_invalidObjectiveId;
    gv_thirdObj = c_invalidObjectiveId;
    gv_optionalObj = c_invalidObjectiveId;
    gv_infestationLevel = 15;
    gv_missionping = c_invalidPingId;
    gv_pingsecondary = c_invalidPingId;
    gv_missiontimer = TimerCreate();
    gv_missiontimerwindow = c_timerWindowNone;
    gv_simpleMissionItems = UnitGroupEmpty();
    for (init_i = 0; init_i <= 11; init_i += 1) {
        gv_sensorpings[init_i] = c_invalidPingId;
    }
    gv_farmerakma = UnitFromId(1328);
    gv_silonextint = 1;
    gv_tCPhostiles = UnitGroupEmpty();
    gv_survivors = UnitGroupEmpty();
    gv_convoynext = 1;
    gv_convoy = UnitGroupEmpty();
    gv_rAmayorPSD = UnitGroupEmpty();
    gv_guslaniping = c_invalidPingId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_highlanderpings[init_i] = c_invalidPingId;
    }
    gv_guslanicivilians = UnitGroupEmpty();
    gv_highlandercivilians = UnitGroupEmpty();
    gv_patrolnext = 1;
    gv_patrol = UnitGroupEmpty();
    gv_commanders = UnitGroupEmpty();
    gv_commandertexttag = c_textTagNone;
    gv_casualties = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_bDSPings[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_optionalObjPings[init_i] = c_invalidPingId;
    }
    gv_plaguevectors = UnitGroupEmpty();
    gv_transitionalgroup = UnitGroupEmpty();
    gv_graveDiggers = UnitGroupEmpty();
    gv_snipers = UnitGroupEmpty();
    gv_combatengineers = UnitGroupEmpty();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_silotimeremaining[init_i] = 300;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_silotimemax[init_i] = 300;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_silotexttag[init_i] = c_textTagNone;
    }
    gv_dsdialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_dsdialogbuttons[init_i] = c_invalidDialogControlId;
    }
    gv_drJashanGuards = UnitGroupEmpty();
    gv_civilians = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_wanderers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_policePatrols[init_i].lv_group = UnitGroupEmpty();
        gv_policePatrols[init_i].lv_routenext = 1;
    }
    gv_laserDesignatorDesignated = UnitGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_iDFShells[init_i] = 5;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_iDFRadius[init_i] = 4.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_iDFDistro[init_i] = -1.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_iDFInterval[init_i] = 1.0;
    }
    gv_iDFShellsGlobal = 175;
    gv_iDFAvailable = true;
    for (init_i = 0; init_i <= gv_lNDataEntriesSize; init_i += 1) {
        gv_lNDataEntries[init_i].lv_existing = UnitGroupEmpty();
    }
    gv_lNAll = UnitGroupEmpty();
    gv_lNAvailable = UnitGroupEmpty();
    gv_lNRallyPing = c_invalidPingId;
    gv_lNProtectionDuration = 30.0;
    gv_lNSpawn = RegionEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_sFAATRecruits[init_i] = UnitGroupEmpty();
    }
    gv_leadershipOwners = PlayerGroupEmpty();
    gv_currentlighting = "UA3Dusk";
    gv_spawnCount = 6;
    gv_heroesGroup = UnitGroupEmpty();
    gv_undeadGroup = UnitGroupEmpty();
    gv_players = PlayerGroupEmpty();
    gv_escapeHokey = c_invalidDialogControlId;
    gv_uA3BANKNAME = "IBUA";
    for (init_i = 0; init_i <= gv_camos; init_i += 1) {
        gv_playercamoactormsg[init_i] = "SetShowing 1";
    }
    for (init_i = 0; init_i <= gv_camos; init_i += 1) {
        gv_playercamostring[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_decals; init_i += 1) {
        gv_playerdecalactormsg[init_i] = "SetShowing 1";
    }
    for (init_i = 0; init_i <= gv_decals; init_i += 1) {
        gv_playerdecalstring[init_i] = "";
    }
    gv_octoCamos = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_octoCamoactormsg[init_i] = "SetShowing 1";
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerRankSet[init_i] = 1;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 14; init_j += 1) {
            gv_rankActorMsg[init_i][init_j] = "SetShowing 1";
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerGamesPlayed[init_i] = 1;
    }
    gv_unlockDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_decals; init_i += 1) {
        gv_decalDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_camos; init_i += 1) {
        gv_camoDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_unlockDialogItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerCurrentCamo[init_i] = 1;
    }
    gv_sIDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_sIcount; init_i += 1) {
        gv_sIDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_sIDialogLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_sIcount; init_i += 1) {
        gv_sIabbreviation[init_i] = "";
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_functionaldialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            gv_functionaldialogbuttons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_hUDDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 14; init_j += 1) {
            gv_hUDDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_heroskilledbyplayer[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerdroppedammo[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerHeroImage[init_i] = "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    }
    gv_statusDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            gv_statusDialogItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_fireteamDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_fireteamdialogbuttons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_fireteamGroups[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_fireteamlabels[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_fireteamORP[init_i] = c_invalidPingId;
    }
    gv_sprintbar = c_invalidDialogId;
    gv_sprinters = UnitGroupEmpty();
    gv_ammoDialogue = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ammoDialogueItems[init_i] = c_invalidDialogControlId;
    }
    gv_medalsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= gv_medalscount; init_i += 1) {
        gv_medalsDialogItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_medalscount; init_i += 1) {
        gv_medalsnames[init_i] = "";
    }
    for (init_i = 0; init_i <= gv_medalscount; init_i += 1) {
        gv_medalimages[init_i] = "Assets\\Textures\\btn-ability-terran-liftoff.dds";
    }
    for (init_i = 0; init_i <= gv_ailmentCount; init_i += 1) {
        gv_ailmentIndividualChance[init_i] = 10;
    }
    gv_ailmentChance = 10;
    for (init_i = 0; init_i <= gv_ailmentCount; init_i += 1) {
        gv_ailmentImages[init_i] = "";
    }
    gv_reloading = UnitGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_magsused[init_i] = 1;
    }
    gv_jammed = UnitGroupEmpty();
    gv_immediateAction = UnitGroupEmpty();
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_reloadbasetime[init_i] = 4.0;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_playerEncumbrance[init_i] = 15;
    }
    gv_undeadTargetGroup = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_CreateDialogItemInPanelImage (int lp_panel, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_image, int lp_imageType, bool lp_tiled, color lp_tintColor, int lp_blendMode);
int gf_CreateDialogItemInPanelLabel (int lp_panel, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_text, color lp_color, bool lp_textWriteout, fixed lp_textWriteoutDuration);
fixed gf_RandomGaussianReal (fixed lp_expectedValue, fixed lp_variance);
void gf_PlaySoundOnUnitForRelevant (unit lp_unit, soundlink lp_sound);
text gf_TextWithStyle (text lp_text, string lp_style);
void gf_AddTimeToTimer (timer lp_timer, fixed lp_additionalTime);
void gf_ReduceTimeOfTimer (timer lp_timer, fixed lp_reductionTime);
bool gf_CallbackIsRunning (string lp_name);
int gf_CallbackTriggeringPlayer (string lp_name);
unit gf_CallbackParameterUnit (string lp_name, int lp_index);
int gf_CallbackParameterInteger (string lp_name, int lp_index);
void gf_RegisterCallback (trigger lp_trigger, string lp_name);
void gf_RegisterCallbackPlayer (trigger lp_trigger, string lp_name, int lp_player);
void gf_RunCallback (string lp_name);
void gf_RunCallbackPlayer (string lp_name, int lp_player);
void gf_SetCallbackParameterInteger (string lp_name, int lp_index, int lp_value);
void gf_SetCallbackParameterUnit (string lp_name, int lp_index, unit lp_value);
void gf_RegisterDialogItemIsUsedEvent (trigger lp_trigger, int lp_item, int lp_player, int lp_eventType);
void gf_RegisterMouseClickedEvent (trigger lp_trigger, int lp_player, int lp_mouseButton, bool lp_down);
void gf_RegisterUnitBecomesIdleEvent (trigger lp_trigger, unit lp_unit, bool lp_idleState);
void gf_RegisterUnitBehaviorChanges (trigger lp_trigger, unit lp_unit, string lp_behavior, int lp_type);
void gf_RegisterUnitDiesEvent (trigger lp_trigger, unit lp_unit);
void gf_RegisterUnitEntersLeavesRangeOfUnit (trigger lp_trigger, unit lp_unit, bool lp_state, fixed lp_range, unit lp_fromUnit);
void gf_RegisterUnitEntersLeavesRegion (trigger lp_trigger, unit lp_unit, region lp_region, bool lp_state);
void gf_RegisterUnitEntersLeavesPoint (trigger lp_trigger, unit lp_unit, point lp_point, fixed lp_distance, bool lp_state);
void gf_RegisterUnitIsSelectedEvent (trigger lp_trigger, unit lp_unit, bool lp_selectState, int lp_player);
void gf_RegisterUnitResearchProgress (trigger lp_trigger, unit lp_unit, int lp_stage);
void gf_RegisterUnitTakesDamageEvent (trigger lp_trigger, unit lp_unit, int lp_damageFatalOption, int lp_damageType, string lp_damageEffect);
void gf_RegisterUnitUsesAbilityEvent (trigger lp_trigger, unit lp_unit, abilcmd lp_ability, int lp_stage, bool lp_includeSharedAbilities);
void gf_EnableDisableAllCommandTypes (bool lp_enableDisable, playergroup lp_players);
void gf_DropAllItemsImmediate (unit lp_dropper, fixed lp_spread);
int gf_CurrentLevelForHeroAbility (string lp_ability, unit lp_unit);
void gf_ForceAbilityCooldowns (unit lp_unit, abilcmd lp_abilityCommand, int lp_spendLocation);
void gf_ChangeUnitHeightAtRate (unit lp_unit, fixed lp_height, fixed lp_rate);
text gf_DebugUnitInfo (unit lp_u);
void gf_MissionItemPingAddItem (unit lp_item);
void gf_MissionItemPingRemoveItem (unit lp_item);
void gf_FailMission (int lp_xplost, text lp_mission, int lp_iLdelta);
void gf_FailMissionNew (text lp_mission, text lp_penalty);
void gf_SucceedMission (int lp_xp, text lp_mission, int lp_iLdelta);
void gf_AwardPlayerXP (int lp_xp, text lp_mission, int lp_player);
void gf_InitVisorText ();
void gf_VisorTextDialog (text lp_text, int lp_player);
void gf_MissionText (text lp_text);
void gf_TextChat (unit lp_unit, text lp_text);
void gf_SpawnItemLoc (string lp_item, int lp_chance, point lp_loc);
void gf_SkipifOver ();
void gf_CreateDifficultyButtonLeft (int lp_difficulty, string lp_image);
void gf_CreateDifficultyButtonRight (int lp_difficulty, string lp_image);
void gf_SetupRankSet (int lp_player, int lp_rankset);
bool gf_CheckVotes (int lp_mode);
void gf_AIScatterFromPoint (point lp_point, fixed lp_radius);
void gf_SpawnPMCSoldier (string lp_type, point lp_point, int lp_squad);
void gf_SpawnPMCSquad (int lp_squadtype, int lp_chance);
void gf_RefreshSquads ();
void gf_SquadAttackPosition (int lp_squad, point lp_position);
void gf_PSampleHandover (unit lp_sample);
string gf_RandomHeroType (int lp_player);
void gf_SpawnPlayerHero (point lp_point, int lp_player);
void gf_SpawnPMC (int lp_count, string lp_type, int lp_chance);
playergroup gf_AllOtherTeams (int lp_team);
void gf_SetTeamScore (int lp_team, int lp_score);
void gf_SetArena (int lp_arena);
void gf_SetTeams (int lp_teamcount);
void gf_ChapterIntermissionOn ();
void gf_ChapterIntermissionOff ();
string gf_RandomPoliceType ();
void gf_ResetMissionComplete ();
void gf_SpawnMayorAssault (string lp_type, int lp_count);
void gf_FarmerAkmaEvac ();
void gf_FarmerAkmaWifeTurn ();
void gf_SpawnTCPzombie (int lp_tCP, string lp_type, int lp_count);
void gf_HighlanderEvaluateEnd ();
void gf_SetupPatrolUnit (unit lp_unit);
void gf_CollectGraveSample (unit lp_unit, region lp_region, int lp_grave);
void gf_SpawnRefugees ();
void gf_MoveToGuardPos (unit lp_unit, region lp_region);
void gf_SetTTFadeandDuration (int lp_tag, fixed lp_duration);
void gf_InitCivilians ();
void gf_SpawnItem (string lp_item, int lp_chance);
void gf_AirDropItemLoc (string lp_item, point lp_loc, int lp_chance);
void gf_RemoveItemIfZero (unit lp_unit, string lp_chargestring, fixed lp_maxcharges);
fixed gf_negativereal (fixed lp_real);
fixed gf_chargesremaining (unit lp_item, string lp_chargestring, fixed lp_maxcharges);
int gf_CountItemTypeUsed (string lp_itemtype, unit lp_unit, string lp_chargestring);
int gf_CountItemType (string lp_itemtype, unit lp_unit);
unit gf_FirstItemType (string lp_itemtype, unit lp_unit);
unit gf_FirstAmmoUsed (unit lp_unit);
unit gf_FirstAmmoCaseUsed (unit lp_unit);
unit gf_First40mmGrenadeUsed (unit lp_unit);
unit gf_SameItemTypeUsed (unit lp_host, unit lp_firstitem, string lp_chargestring);
unit gf_SameItemType (unit lp_host, unit lp_firstitem);
void gf_CombineItems (unit lp_reciever, unit lp_donator, string lp_chargestring, fixed lp_maxcharges);
void gf_DonateItems (unit lp_reciever, unit lp_donator, string lp_chargestring, fixed lp_maxchargesdonator);
void gf_ReloadSentry (unit lp_sentry, unit lp_magazine, fixed lp_value);
void gf_WeaponCacheSpawnItem (string lp_itemUnitType, int lp_number, region lp_cacheSite);
void gf_ChainJAG (unit lp_source, unit lp_target);
int gf_CyborgMode (unit lp_cyborg);
void gf_DropShellatTarget (point lp_target, string lp_effect, int lp_player);
void gf_DropShellatTargetPMC (point lp_target, string lp_effect, int lp_player);
int gf_LNDataFindFreeSlot (int lp_slotnumber);
bool gf_Parity (int lp_integer);
void gf_BlendFog (fixed lp_colorR, fixed lp_colorG, fixed lp_colorB, fixed lp_density, fixed lp_falloff, fixed lp_start, int lp_blendtime);
void gf_BlendFogNew (fixed lp_colorR, fixed lp_colorG, fixed lp_colorB, fixed lp_density, fixed lp_falloff, fixed lp_start, fixed lp_blendtime);
void gf_SetNewLighting (string lp_light, fixed lp_blendtime);
void gf_ResetLighting (fixed lp_blendtime);
text gf_TextImage (string lp_imgpath, int lp_scale);
void gf_InitGameSetup ();
void gf_Preload ();
void gf_SavePlayerProgress (int lp_player);
void gf_LoadPlayerProgress (int lp_player);
void gf_InitUnlocks ();
int gf_GetPlayerRank (int lp_player);
void gf_InitRanks ();
void gf_OctoCamo ();
void gf_UpdateSIDialogforPlayer (int lp_player);
void gf_SetupSI (int lp_array, int lp_enXP, int lp_wOXP, int lp_cOXP, text lp_name, string lp_abbreviation, text lp_description);
void gf_InitSIs ();
void gf_FloatingTextforPlayer (unit lp_unit, text lp_text, int lp_player);
void gf_RefreshFireteamDialog ();
void gf_FireteamVision ();
void gf_InitSprintBar ();
void gf_SprintCheck (unit lp_unit);
void gf_InitAmmoBar ();
void gf_UpdateMedalsDialogforP (int lp_player);
void gf_InitMedal (int lp_index, string lp_name, text lp_tooltip, string lp_image);
void gf_AwardMedal (int lp_medal, int lp_player, int lp_xP, text lp_message);
void gf_InitMedals ();
int gf_UnitHighestAilment (unit lp_unit);
void gf_SetAilment (int lp_array, string lp_ailmentbehavior, int lp_ailmentchance, string lp_ailmentimagepath);
void gf_InitAilments ();
void gf_InitMinis ();
string gf_randomminitype ();
void gf_ReloadPlayer (int lp_player, int lp_controler);
void gf_Reinforcements ();
void gf_LandPhantom (point lp_lZ);
void gf_TakeoffPhantom (unit lp_phantom);
void gf_SpawnUndead (int lp_count, string lp_type, int lp_chance);
void gf_SpawnUndeadImmediate (int lp_count, string lp_type, int lp_chance);
void gf_MutateUndead ();
void gf_ResetAllAbilityCooldownsForUnit (unit lp_unit);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_VisorTextTimerExpire;
trigger gt_InitModeDialog;
trigger gt_SetMode;
trigger gt_ModeSelect;
trigger gt_GameStart;
trigger gt_HeroSelection;
trigger gt_AutoselectHero;
trigger gt_SelectHeroSelector;
trigger gt_MissChance;
trigger gt_Miss;
trigger gt_PMCUseAbil;
trigger gt_SquadLoop;
trigger gt_SquadContact;
trigger gt_PMCAlertExpire;
trigger gt_PMCPeriodicSpawn;
trigger gt_PMCMode;
trigger gt_PCommissioner;
trigger gt_PApproachCommissioner;
trigger gt_PCommissionerTimeout;
trigger gt_PMCFirstContact;
trigger gt_PPoliceCheckpoint;
trigger gt_PEnterPoliceTCP;
trigger gt_PPoliceTCPTimeout;
trigger gt_PRAPhantomDown;
trigger gt_PEnterPhantomLZ;
trigger gt_PKillCrew;
trigger gt_PExtractCrew;
trigger gt_PChapter1ElFantasmadelaSelva;
trigger gt_PConvoyRaid;
trigger gt_PConvoyRaidLoop;
trigger gt_PConvoyRaidLeave;
trigger gt_PConvoyRaidDies;
trigger gt_PConvoyRaidEnd;
trigger gt_PIgnis;
trigger gt_PGuardPosts;
trigger gt_PDestroyGuardPost;
trigger gt_PGuardPostsTimeout;
trigger gt_PUmbra;
trigger gt_PChapter2Miserere;
trigger gt_PTheBurrowed;
trigger gt_UseSeismicResonator;
trigger gt_PGhostConvoy;
trigger gt_PGhostConvoyLoop;
trigger gt_PGhostConvoyLeave;
trigger gt_PGhostConvoyContact;
trigger gt_PGhostConvoyDies;
trigger gt_PGhostConvoyEnd;
trigger gt_PCombatWalker;
trigger gt_PTametheBeast;
trigger gt_PChapter3nihilmoderabile;
trigger gt_PBioSamples;
trigger gt_PTurnInSample;
trigger gt_PCollectSample;
trigger gt_PAspectus;
trigger gt_PAntiAir;
trigger gt_PTimeStops;
trigger gt_PTSPlaceSatchel;
trigger gt_PTSAbortCodes;
trigger gt_PTSTimeStops;
trigger gt_PTSTimeStopRevert;
trigger gt_PDestroytheRA;
trigger gt_RandomHeroInit;
trigger gt_KillHero;
trigger gt_PingHeroes;
trigger gt_CompetitiveMode;
trigger gt_NextRound;
trigger gt_COMPDeathmatch;
trigger gt_COMPBossBattle;
trigger gt_COMPClass1Death;
trigger gt_BBPingClass1s;
trigger gt_COMPSiloRush;
trigger gt_COMPSRPingSilos;
trigger gt_COMPSRCaptureSilo;
trigger gt_COMPInvasion;
trigger gt_COMPInvasionPlayerDies;
trigger gt_COMPConvoy;
trigger gt_SurvivalMode;
trigger gt_SurvivalPeriodicXP;
trigger gt_Survival10Min;
trigger gt_Survival20Min;
trigger gt_Survival30Min;
trigger gt_Survival40Min;
trigger gt_SurvivalModeTimeout;
trigger gt_SurvivalEvacPlayerEnter;
trigger gt_SurvivalEnd;
trigger gt_AbdulsTruck;
trigger gt_ApproachAbdul;
trigger gt_AbdulDies;
trigger gt_AbdulEnterThalim;
trigger gt_MarchoftheDead;
trigger gt_DarreusLoop;
trigger gt_OPGenerators;
trigger gt_ApproachGenerator;
trigger gt_GeneratorPowered;
trigger gt_Apiaries;
trigger gt_ApiaryLoop;
trigger gt_Prologue;
trigger gt_InitialContact;
trigger gt_TheMayor;
trigger gt_MayorGate;
trigger gt_MayorHouse;
trigger gt_MayorTimeout;
trigger gt_TCPs;
trigger gt_AcquireSentryGun;
trigger gt_PlaceSentryGun;
trigger gt_TCPTimeout;
trigger gt_PrologueMission2;
trigger gt_MayorDefense;
trigger gt_MayorDeath;
trigger gt_Sensors;
trigger gt_AcquireSensor;
trigger gt_PlaceSensor;
trigger gt_SensorTimeout;
trigger gt_Gourmand;
trigger gt_Chapter1Fear;
trigger gt_FarmerAkmaWork;
trigger gt_FarmerAkma;
trigger gt_FarmerAkmaTimeout;
trigger gt_FarmerAkmaApproach;
trigger gt_FarmerAkmaLoop;
trigger gt_FarmerAkmaDeath;
trigger gt_FarmerAkmaWife;
trigger gt_TCPOps;
trigger gt_TCPcontainment;
trigger gt_TCPFinalOut;
trigger gt_Ch1Mission2;
trigger gt_DestroyedCity;
trigger gt_EnterDestroyedCity;
trigger gt_EnterFiringLine;
trigger gt_FindSurvivor;
trigger gt_RescueSurvivor;
trigger gt_SurvivorDies;
trigger gt_DestroyedCityEnd;
trigger gt_Ch1Mission3;
trigger gt_BattleConvoy;
trigger gt_ConvoyLoop;
trigger gt_ConvoyLeave;
trigger gt_ConvoyUnitDies;
trigger gt_ConvoyEnd;
trigger gt_Ch1Mission4;
trigger gt_EscortCivilians;
trigger gt_ApproachMayor;
trigger gt_GuslaniVillageEnter;
trigger gt_GuslaniOrderLoop;
trigger gt_GuslaniCivDies;
trigger gt_RescueGuslani;
trigger gt_HighlanderApproachBuilding;
trigger gt_RescueHighlander;
trigger gt_HighlanderLoop;
trigger gt_EscortCiviliansEnd;
trigger gt_EscortMayor;
trigger gt_EscortMayorTimeout;
trigger gt_EnterMayorEscort;
trigger gt_Chapter2;
trigger gt_Chapter2Killing;
trigger gt_Ch2Mission1;
trigger gt_CommanderKLE;
trigger gt_PatrolLoop;
trigger gt_PatrolUnitDies;
trigger gt_Saber6Dies;
trigger gt_CommanderDies;
trigger gt_CommanderMeetingForce;
trigger gt_PatrolEnd;
trigger gt_Ch2Mission2;
trigger gt_DasdanCasualties;
trigger gt_PickUpCasualty;
trigger gt_MEDEVACTimeExpired;
trigger gt_EnterMEDEVACSite;
trigger gt_Darkness;
trigger gt_AcquireBDS;
trigger gt_ApproachBDS;
trigger gt_PlagueVectors;
trigger gt_PlagueVectorLoop;
trigger gt_PlagueVectorEnd;
trigger gt_ThresherMaw;
trigger gt_Ch2Mission4;
trigger gt_Evacuation;
trigger gt_EvacuationTimeout;
trigger gt_EvacuationLoop;
trigger gt_EvacuationPlayers;
trigger gt_EvacuationPlayerEnter;
trigger gt_EvacuationEnd;
trigger gt_Chapter2Valor;
trigger gt_Ch2bMission1;
trigger gt_Thanatos;
trigger gt_Ch2bMission2;
trigger gt_GraveDigger;
trigger gt_GraveDiggerCollectSampleLoop;
trigger gt_Ch2bMission3;
trigger gt_RefugeeKilled;
trigger gt_DefendThalim;
trigger gt_RefugeeConvoyLoop;
trigger gt_RefugeeConvoyLeave;
trigger gt_RefugeeConvoyDies;
trigger gt_RefugeeConvoyEnd;
trigger gt_PlayerLeaveAO;
trigger gt_Chapter3Love;
trigger gt_Ch3Mission1;
trigger gt_RAOutpost;
trigger gt_EnterRAOutpost;
trigger gt_UseRAOutpostComputer;
trigger gt_Ch3Mission2;
trigger gt_RASnipers;
trigger gt_RASniperTimeout;
trigger gt_SniperKilled;
trigger gt_Ch3Mission3;
trigger gt_CombatCompany;
trigger gt_DisabledTankloop;
trigger gt_Ch3Mission4;
trigger gt_RAFacility;
trigger gt_EnterRAFacility;
trigger gt_DetainScientist;
trigger gt_ExtractScientist;
trigger gt_RAFacilityEnd;
trigger gt_Ch3Mission5;
trigger gt_InfestedSilos;
trigger gt_InfestedSiloLoop;
trigger gt_DisableSilo;
trigger gt_Chapter3CitiusAltiusFortius;
trigger gt_Ch3bMission1;
trigger gt_Ch3bHeliport;
trigger gt_Ch3bMission2;
trigger gt_Ch3bDarkSky;
trigger gt_DSDialogButton;
trigger gt_DSVoteEnd;
trigger gt_HelpDS;
trigger gt_ThalimApproachBuilding;
trigger gt_DSKeyCard;
trigger gt_DSKECs;
trigger gt_DSOperators;
trigger gt_DSLastStand;
trigger gt_DoNotHelpDS;
trigger gt_DNHPlaceSatchel;
trigger gt_DNHMission2;
trigger gt_DNHEnterLZ;
trigger gt_DNHMission3;
trigger gt_DNHMission4;
trigger gt_DNHAllIn;
trigger gt_GameEndCinematica;
trigger gt_GameEndCinematicafail;
trigger gt_GameEndCinematicb;
trigger gt_ProjectZulu;
trigger gt_ZuluHit;
trigger gt_PZMission1;
trigger gt_DrJashanLoop;
trigger gt_GameEndCinematicZulu;
trigger gt_RegularGameCompleted;
trigger gt_CiviliansInit;
trigger gt_WanderingLoop;
trigger gt_PolicePatrols;
trigger gt_PolicePatrolLoop;
trigger gt_ItemCombining;
trigger gt_PickupItem;
trigger gt_DropItem;
trigger gt_ReloadSentryGun;
trigger gt_SentryGunItemDrops;
trigger gt_PlaceSAMSite;
trigger gt_ItemSpawn1;
trigger gt_ItemSpawn2;
trigger gt_ItemSpawnCompetitive;
trigger gt_InitWeaponCaches;
trigger gt_FindWeaponsCache;
trigger gt_HelicopterAI;
trigger gt_ArmyModifier;
trigger gt_RocketWarning;
trigger gt_LearnChargeRefund;
trigger gt_Disarm;
trigger gt_CycloneMissileWarning;
trigger gt_SpawnedUnitVision;
trigger gt_CriticalShot;
trigger gt_FragOutWarning;
trigger gt_FragOutWarningItem;
trigger gt_CameraShakeSmall;
trigger gt_CameraShakeLarge;
trigger gt_JumpInjury;
trigger gt_LearnMarksmanSkills;
trigger gt_Prone;
trigger gt_LaserDesignatorReveal;
trigger gt_DropMagazine;
trigger gt_FlamethrowerMagazines;
trigger gt_Broken;
trigger gt_JAG108LD;
trigger gt__30mmChainGun;
trigger gt_OverhaulResult;
trigger gt_FragLevelUp;
trigger gt_ARSkills;
trigger gt_BeltLinkingReload;
trigger gt_BeltLinking;
trigger gt_FirstAidKitMedic;
trigger gt_BattleFocus;
trigger gt_LearnReconSkills;
trigger gt_Heartbeat;
trigger gt_MonoWire;
trigger gt_HEATRocketScatter;
trigger gt_JavelinSkills;
trigger gt_EngineerSkills;
trigger gt_StonewallTexture;
trigger gt_LearnGhostSkillsandISR;
trigger gt_GhostAttack;
trigger gt_IonCannonSelection;
trigger gt_IonCannonWarning;
trigger gt_LLDRCAS;
trigger gt_CallForFire;
trigger gt_ImmediateEffects;
trigger gt_CallForFireAspectus;
trigger gt_AttackWeaponsTeam;
trigger gt_OrbitalStrike;
trigger gt_OSR;
trigger gt_FSSSkills;
trigger gt_SFAATLearnTraining;
trigger gt_SFAATLearnLeadership;
trigger gt_SFAATSkillTraining;
trigger gt_SFAATSkillDismiss;
trigger gt_SFAATSkillLeadership;
trigger gt_LNInitialization;
trigger gt_LNPeriodicPing;
trigger gt_LNPeriodicSpawn;
trigger gt_LNPeriodicRally;
trigger gt_LNSelfPreservation;
trigger gt_LNCEBarricade;
trigger gt_LNCEInsufficientSupport;
trigger gt_MapInitialization;
trigger gt_GameOver;
trigger gt_WeatherEffects;
trigger gt_RandomFog;
trigger gt_BanksVarsNew;
trigger gt_SaveBankNew;
trigger gt_UA3Import;
trigger gt_HelpImport;
trigger gt_Tips;
trigger gt_PlayerLeavesGame;
trigger gt_Cheats;
trigger gt_PlayerQuits;
trigger gt_InitUnlockDialog;
trigger gt_Commandcamo;
trigger gt_Commanddecal;
trigger gt_InitSIDialog;
trigger gt_Commandsi;
trigger gt_SIDisciplineXPBonus;
trigger gt_ReactiveFire;
trigger gt_SelfAid;
trigger gt_PowerUserEcell;
trigger gt_FunctionalButtons;
trigger gt_Buttonin;
trigger gt_ButtonTL;
trigger gt_ButtonDead;
trigger gt_ButtonSQ;
trigger gt_Button;
trigger gt_Buttoncl;
trigger gt_ButtonWeaponsHold;
trigger gt_ButtonNODs;
trigger gt_Buttonnudgel;
trigger gt_Buttonnudger;
trigger gt_Buttonnudgeu;
trigger gt_Buttonnudged;
trigger gt_ButtonSI;
trigger gt_ButtonUN;
trigger gt_ButtonME;
trigger gt_EscButton;
trigger gt_Commandreset;
trigger gt_Commands;
trigger gt_Commandr;
trigger gt_Commandd;
trigger gt_Commandi;
trigger gt_Command;
trigger gt_SITREPAbil;
trigger gt_InitHUDDialog;
trigger gt_ShowHUDDialog;
trigger gt_HUDUpdate;
trigger gt_COMPInitHudDialog;
trigger gt_COMPRefreshHUDDialog;
trigger gt_VoteKickButton;
trigger gt_InitStatusDialog;
trigger gt_ShowHideStatusDialogue;
trigger gt_COMPRefreshStatusDialog;
trigger gt_FireteamDialogInit;
trigger gt_FireteamShowHide;
trigger gt_FireteamCreate;
trigger gt_FireteamJoinLeave;
trigger gt_FireteamLeaderORP;
trigger gt_Sprint;
trigger gt_SprintLoop;
trigger gt_AmmoBarUpdate;
trigger gt_InitMedalsDialog;
trigger gt_GamesPlayed;
trigger gt_PlayerKills;
trigger gt_PlayerHeal;
trigger gt_PlayerHit;
trigger gt_Ailments;
trigger gt_CursedHit;
trigger gt_CureAilments;
trigger gt_AilmentSpawnZombie;
trigger gt_LowAmmoWarning;
trigger gt_Reload;
trigger gt_Jam;
trigger gt_Unjam;
trigger gt_HeroGainLevel;
trigger gt_HeroDeath;
trigger gt_Revive;
trigger gt_PickUpPlayerDroppedMag;
trigger gt_UndeadSpawningPrologue;
trigger gt_UndeadSpawning1;
trigger gt_UndeadSpawning2;
trigger gt_UndeadSpawning3;
trigger gt_UndeadSpawningZulu;
trigger gt_UndeadSpawningOutbreak;
trigger gt_UndeadSpawningBurrowed;
trigger gt_UndeadSpawningTier1;
trigger gt_UndeadOrders;
trigger gt_UndeadIdles;
trigger gt_UmbraAspectusLoop;
trigger gt_ThanatosMovementLoop;
trigger gt_ThanatosIsAttacked;
trigger gt_ThanatosPull;
trigger gt_LickerAI;
trigger gt_ChargerAI;
trigger gt_UndeadMassiveDeath;
trigger gt_CFFAspectus;
trigger gt_PlagueVectorDeath;
trigger gt_ArachnathidDeath;
trigger gt_MotherDeath;
trigger gt_RisenGetBackUp;
trigger gt_InfestationLevelLoop;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "ai71EEC1FA") { ai71EEC1FA_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { ai71EEC1FA_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "ai71EEC1FA") { return ai71EEC1FA_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    AICampaignStart(13);
    AICampaignStart(14);
    AICampaignStart(15);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ASCII Util
//--------------------------------------------------------------------------------------------------
// ASCII Utillities
// Dr Super Good
// v1.0
// Provides access to a number of useful ASCII based functions conversion functions.
//
// NOTE : The masking logic is strange due to Galaxy giving the operators strange behaviours.
// The right hand side is converted to the modulus of 32 automaticly and if negative goes up from the last multiple of 32.
// This is important since a shift of 32 will act as a shift of 0 instead of compeltly destroying data.
//
// CONSTANTS
// The Hexadecimal character map.
string[16] ASCII_UTIL_HEXMAP;
// The ASCII character map. No null (00) as that is reserved for end of string.
const string ASCII_UTIL_ASCIIMAP = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF";
// The Base64 charater map. Uses safe characters.
const string ASCII_UTIL_BASE64MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
// PUBLIC FUNCTIONS
// Converts an integer into 8 hexadecimal characters.
string ASCIIUtilIntToHex(int in);
// Converts a string character at offset off into an int.
int ASCIIUtilStringToInt(string s, int off);
// Converts a 6 bit int into 1 Base64 character.
string ASCIIUtilIntToBase64(int in);
// Converts 1 Base64 characters at offset off into a 6 bit int.
int ASCIIUtilBase64ToInt(string s, int off);
// PRIVATE FUNCTIONS
void ASCIIUtilInit();
//
// IMPLEMENTATION
string ASCIIUtilIntToHex(int in){
    return ASCII_UTIL_HEXMAP[(in >> 28) & 0xF] + ASCII_UTIL_HEXMAP[(in >> 24) & 0xF] + 
        ASCII_UTIL_HEXMAP[(in >> 20) & 0xF] + ASCII_UTIL_HEXMAP[(in >> 16) & 0xF] + 
        ASCII_UTIL_HEXMAP[(in >> 12) & 0xF] + ASCII_UTIL_HEXMAP[(in >> 8) & 0xF] + 
        ASCII_UTIL_HEXMAP[(in >> 4) & 0xF] + ASCII_UTIL_HEXMAP[in & 0xF];
}
int ASCIIUtilStringToInt(string s, int off){
    return StringFind(ASCII_UTIL_ASCIIMAP, StringSub(s, off, off), true);
}
string ASCIIUtilIntToBase64(int in){
    in+= 1;
    return StringSub(ASCII_UTIL_BASE64MAP, in, in);
}
int ASCIIUtilBase64ToInt(string s, int off){
    return StringFind(ASCII_UTIL_BASE64MAP, StringSub(s, off, off), true) - 1;
}
void ASCIIUtilInit(){
    int i;
    int j;
    // Build hexadecimal map.
    i = 0;
    j = 1;
    while( i < 16 ){
        ASCII_UTIL_HEXMAP[i] = StringSub("0123456789ABCDEF", j, j);
        i = j;
        j+= 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bit Field
//--------------------------------------------------------------------------------------------------
// Bit Field
// Dr Super Good
// v1.0
// Provides access to a work space for bit field creation and manipulation.
// As this is a work space, it should not be used for persistence and be writen or read as required.
//
// NOTE : The masking logic is strange due to Galaxy giving the operators strange behaviours.
// The right hand side is converted to the modulus of 32 automaticly and if negative goes up from the last multiple of 32.
// This is important since a shift of 32 will act as a shift of 0 instead of compeltly destroying data.
//
// CONSTANTS
// The size of the work space field in ints. This determines the maximum size of fields.
const int BIT_FIELD_SIZE = 32;
// There is no minimum int size constant and no way to declare one non-mathematicly.
const int BIT_FIELD_INTMIN = 1 << 31;
// TYPES
// The backing array for the field.
typedef int[BIT_FIELD_SIZE] bit_field_array_t;
// A bit field transformation function that takes the current int value and returns it transformed.
// As triggers are single threads it is safe to use a global state object when declaring transformer functions.
int bit_field_transformer_t(int in);
// The actual work space object type.
struct bit_field_t{
    // PRIVATE
    // Backing array for field.
    bit_field_array_t field;
    // Current position in field.
    int pos;
    // Length of the field.
    int len;
    // The logic to initialize with.
    bool def;
};
// PUBLIC FUNCTIONS
// Initializes the work space to hold len bits with logical values determined by logic.
// The work space cannot be bigger than the backing array allows.
void BitFieldInitialize(structref<bit_field_t> obj, int len, bool logic);
// Resizes the work space to hold len bits by adding or removing from the end.
// The work space cannot be bigger than the backing array allows.
void BitFieldResize(structref<bit_field_t> obj, int len);
// Sets the size of the workspace to len bits. The contents of gained/reclaimed bits is undefined.
// Usefull for resizing when word-aligned filling.
void BitFieldSetSize(structref<bit_field_t> obj, int len);
// Get the current size of the work space.
int BitFieldGetSize(structref<bit_field_t> obj);
// Moves the current position of the work space.
void BitFieldSeek(structref<bit_field_t> obj, int pos);
// The current position of the work space.
int BitFieldGetPosition(structref<bit_field_t> obj);
// The number of bits before the end of field.
int BitFieldRemaining(structref<bit_field_t> obj);
// Write len lest significant bits of val to the work space.
// Behaviour undefined when out of bounds.
void BitFieldWrite(structref<bit_field_t> obj, int val, int len);
// Write len lest significant bits of val to the work space.
// Out of bound writes are discarded.
void BitFieldWriteSafe(structref<bit_field_t> obj, int val, int len);
// Sets a specific word of the bitfield. Bounds are not checked.
// Usefull for filling word aligned bitfields with data.
void BitFieldSet(structref<bit_field_t> obj, int val, int pos);
// Read len bits from the work space and return them.
// Behaviour undefined when out of bounds.
int BitFieldRead(structref<bit_field_t> obj, int len);
// Read len bits from the work space and return them.
// Out of bounds reads assume initialization value.
int BitFieldReadSafe(structref<bit_field_t> obj, int len);
// Gets a speciifc word of the bitfield. Bounds are not checked.
// Useful for extracting word aligned data from bitfields.
int BitFieldGet(structref<bit_field_t> obj, int pos);
// Transform the underlying field using the specified transformer function.
void BitFieldTransform(structref<bit_field_t> obj, funcref<bit_field_transformer_t> transformer);
//
// IMPLEMENTATION
void BitFieldInitialize(structref<bit_field_t> obj, int len, bool logic){
    // Initialize simple members.
    obj.pos = 0;
    obj.len = 0;
    obj.def = logic;
    BitFieldResize(obj, len);
}
void BitFieldResize(structref<bit_field_t> obj, int len){
    int i;
    int end;
    int val;
    // Apply logical restrictions.
    if( len > (BIT_FIELD_SIZE * 32) ){ len = BIT_FIELD_SIZE * 32; }
    else if( len < 0 ){ len = 0; }
    // Truncate.
    if( obj.len > len ){
        // Do not care about lost indicies, they are cleaned when regained.
        obj.len = len;
        // Only need to do something if len is not int aligned.
        i = len % 32;
        if( i == 0 ){ return; }
        // Capture the saved part of the last used index.
        end = len / 32;
        val = obj.field[end] & ((1 << i) - 1);
        // Check if pading with 1 is nescescary as currently padded with 0.
        if( obj.def ){
            // Galaxy uses signed right shift which makes padding easy.
            val|= (BIT_FIELD_INTMIN >> (31 - i));
        }
        obj.field[end] = val;
    }
    // Expand.
    else{
        // Determine value mask.
        if( obj.def ){ val = -1; }
        else{ val = 0; }
        // Setup loop.
        i = (obj.len + 31) / 32;
        end = (len + 31) / 32;
        // Initialize field.
        while( i < end ){
            obj.field[i] = val;
            i+= 1;
        }
        // Padding complete.
        obj.len = len;
    }
}
void BitFieldSetSize(structref<bit_field_t> obj, int len){
    obj.len = len;
}
int BitFieldGetSize(structref<bit_field_t> obj){
    return obj.len;
}
void BitFieldSeek(structref<bit_field_t> obj, int pos){
    // This function purely exists to decouple inner working of obj from the interface.
    obj.pos = pos;
}
int BitFieldGetPosition(structref<bit_field_t> obj){
    return obj.pos;
}
int BitFieldRemaining(structref<bit_field_t> obj){
    return obj.len - obj.pos;
}
void BitFieldWrite(structref<bit_field_t> obj, int val, int len){
    // This method is aimed at performance.
    int i;
    int reg;
    int mask;
    // Compute position.
    i = obj.pos % 32;
    reg = obj.pos / 32;
    obj.pos+= len;
    // Merge in data using a cut and snip approach.
    mask = ((2 << (len - 1)) - 1) << i; // Avoid 32 wrap.
    obj.field[reg] = (obj.field[reg] & (~mask)) | ((val << i) & mask);
    // Check if all data was written.
    i = 32 - i;
    if( i >= len ){ return; }
    // Advance position for rest.
    reg+= 1;
    // Write rest using same approach.
    mask = (1 << (len - i)) - 1;
    obj.field[reg] = (obj.field[reg] & (~mask)) | ((val >> i) & mask);
}
void BitFieldWriteSafe(structref<bit_field_t> obj, int val, int len){
    // This method is aimed at safety.
    int i;
    // Early end.
    if( obj.pos <= -len || obj.pos >= obj.len ){
        obj.pos+= len;
        return;
    }
    // Apply low bound.
    if( obj.pos < 0 ){
        val>>= -obj.pos;
        len+= obj.pos;
        obj.pos = 0;
    }
    // Apply high bound.
    i = len + obj.pos - obj.len;
    if( i < 0 ){ i = 0; }
    // Write.
    BitFieldWrite(obj, val, len - i);
    obj.pos+= i;
}
void BitFieldSet(structref<bit_field_t> obj, int val, int pos){
    obj.field[pos] = val;
}
int BitFieldRead(structref<bit_field_t> obj, int len){
    // This method is aimed at performance.
    int i;
    int reg;
    int val;
    // Compute position.
    i = obj.pos % 32;
    reg = obj.pos / 32;
    // Read first word.
    val = obj.field[reg] >> i;
    // Check if another word is needed.
    i = 32 - i;
    if( i < len ){ 
        // Apply mask for first word.
        val&= (1 << i) - 1;
        // Read next word.
        reg+= 1;
        val|= obj.field[reg] << i;
    }
    // Mask and done.
    val&= ((2 << (len - 1)) - 1); // Avoid 32 wrap.
    obj.pos+= len;
    return val;
}
int BitFieldReadSafe(structref<bit_field_t> obj, int len){
    // This method is aimed at safety.
    int i = 0;
    int j;
    int val = 0;
    // Early end.
    if( obj.pos <= -len || obj.pos >= obj.len ){
        obj.pos+= len;
        if( obj.pos ){ return (1 << len) - 1; }
        return 0;
    }
    // Apply low bound.
    if( obj.pos < 0 ){
        if( obj.def ){ val = (1 << (-obj.pos)) - 1; }
        len+= obj.pos;
        i = -obj.pos;
        obj.pos = 0;
    }
    // Apply high bound.
    j = len + obj.pos - obj.len;
    if( j <= 0 ){ j = 0; }
    else if( obj.def ){ val|= ((1 << j) - 1) << (len + i - j); }
    // Read.
    val|= BitFieldRead(obj, len - j) << i;
    obj.pos+= j;
    return val;
}
int BitFieldGet(structref<bit_field_t> obj, int pos){
    return obj.field[pos];
}
void BitFieldTransform(structref<bit_field_t> obj, funcref<bit_field_transformer_t> transformer){
    int i = 0;
    int end = obj.len / 32;
    while( i <= end ){
        obj.field[i] = transformer(obj.field[i]);
        i+= 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SHA-1 Hasher
//--------------------------------------------------------------------------------------------------
// SHA-1 Hasher
// Dr Super Good
// v1.0
// Provides a work space for producing SHA-1 hashes.
// The algorthim was lifted from wikipedia and tested against the standard JAVA implementation.
// These hashes are used as means of data integerty testing.
// The SC2 bank signature system uses SHA-1.
// As this is a workspace, it is not responsible for the 512bit block generation.
//
// NOTE : The masking logic is strange due to Galaxy giving the operators strange behaviours.
// The right hand side is converted to the modulus of 32 automaticly and if negative goes up from the last multiple of 32.
// This is important since a shift of 32 will act as a shift of 0 instead of compeltly destroying data.
// NOTE : There is no bitwise rotate (only shifts).
// Rotation is done using a cut and snip approach on a temporary integer.
//
// TYPES
// The resulting hash.
typedef int[5] sha1_hasher_hash_t;
// The 512 bit long source block.
typedef int[16] sha1_hasher_block_t;
// Functions passed to feed block data in up to 4 bytes at a time.
int sha1_hasher_data_reader_t();
// The actual work space object type.
struct sha1_hasher_t{
    // PRIVATE
    // The actual hash.
    sha1_hasher_hash_t h;
};
// PUBLIC FUNCTIONS
// Performs initial seeding of the hasher workspace.
void SHA1HasherInitalize(structref<sha1_hasher_t> obj);
// Processes a hash block.
void SHA1HasherProcess(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_block_t> block);
// Finishes off a block from position pos. If space is not sufficient an extra block of pading will be used.
// The length is for the sum of all blocks processed.
void SHA1HasherProcessFinal(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_block_t> block, int len);
// Copies the hash from the workspace.
void SHA1HasherHash(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_hash_t> hash);
// Does a complete SHA-1 hash of some data source. Length is in bytes.
// Produces padding and length at end.
void SHA1HasherHashData(structref<sha1_hasher_t> obj, funcref<sha1_hasher_data_reader_t> reader, int len);
//
// IMPLEMENTATION
void SHA1HasherInitalize(structref<sha1_hasher_t> obj){
    // Set the initial hash state. These constants are defined by SHA-1 standard.
    obj.h[0] = 0x67452301;
    obj.h[1] = 0x6FCDAB89 | (1 << 31);
    obj.h[2] = 0x18BADCFE | (1 << 31);
    obj.h[3] = 0x10325476;
    obj.h[4] = 0x43D2E1F0 | (1 << 31);
}
void SHA1HasherProcess(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_block_t> block){
    int[80] w;
    int i;
    int temp;
    sha1_hasher_hash_t h;
    // Copy the block into the local workspace.
    for( i = 0 ; i < 16 ; i+= 1 ){
        // Must convert endian or addition will mess up later.
        w[i] = (block[i] << 24) | ((block[i] << 8) & 0xFF0000) | ((block[i] >> 8) & 0xFF00) | ((block[i] >> 24) & 0xFF);
    }
    // Now extend.
    for( ; i < 80 ; i+= 1 ){
        temp = w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16];
        //:Left Rotate 1
        w[i] = (temp << 1) | ((temp >> 31) & 0x01);
    }
    // Now initialize block hash.
    for( i = 0 ; i < 5 ; i+= 1 ){
        h[i] = obj.h[i];
    }
    // Process first 20 units.
    for( i = 0 ; i < 20 ; i+= 1 ){
        //:Left Rotate 5
        temp = ((h[0] << 5) | ((h[0] >> 27) & 0x1F)) + ((h[1] & h[2]) | ((~h[1]) & h[3])) + h[4] + 0x5A827999 + w[i];
        // Hash generation logic. Maybe a separate function?
        h[4] = h[3];
        h[3] = h[2];
        //:Left Rotate 30
        h[2] = (h[1] << 30) | ((h[1] >> 2) & 0x3FFFFFFF);
        h[1] = h[0];
        h[0] = temp;
    }
    // Process units 20 to 39.
    for( ; i < 40 ; i+= 1 ){
        //:Left Rotate 5
        temp = ((h[0] << 5) | ((h[0] >> 27) & 0x1F)) + (h[1] ^ h[2] ^ h[3]) + h[4] + 0x6ED9EBA1 + w[i];
        // Hash generation logic. Maybe a separate function?
        h[4] = h[3];
        h[3] = h[2];
        //:Left Rotate 30
        h[2] = (h[1] << 30) | ((h[1] >> 2) & 0x3FFFFFFF);
        h[1] = h[0];
        h[0] = temp;
    }
    // Process units 40 to 59.
    for( ; i < 60 ; i+= 1 ){
        //:Left Rotate 5
        temp = ((h[0] << 5) | ((h[0] >> 27) & 0x1F)) + ((h[1] & h[2]) | (h[1] & h[3]) | (h[2] & h[3])) + h[4] + (0x0F1BBCDC | (1 << 31)) + w[i];
        // Hash generation logic. Maybe a separate function?
        h[4] = h[3];
        h[3] = h[2];
        //:Left Rotate 30
        h[2] = (h[1] << 30) | ((h[1] >> 2) & 0x3FFFFFFF);
        h[1] = h[0];
        h[0] = temp;
    }
    // Process last 20 units.
    for( ; i < 80 ; i+= 1 ){
        //:Left Rotate 5
        temp = ((h[0] << 5) | ((h[0] >> 27) & 0x1F)) + (h[1] ^ h[2] ^ h[3]) + h[4] + (0x4A62C1D6 | (1 << 31)) + w[i];
        // Hash generation logic. Maybe a separate function?
        h[4] = h[3];
        h[3] = h[2];
        //:Left Rotate 30
        h[2] = (h[1] << 30) | ((h[1] >> 2) & 0x3FFFFFFF);
        h[1] = h[0];
        h[0] = temp;
    }
    // Finally append block hashes.
    for( i = 0 ; i < 5 ; i+= 1 ){
        obj.h[i]+= h[i];
    }
}
void SHA1HasherProcessFinal(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_block_t> block, int len){
    int pos;
    int sub;
    // Determine sub-block position.
    pos = (len % 64) / 4;
    sub = (len % 4) * 8;
    // Append terminator.
    block[pos] = (0x80 << sub) | (block[pos] & ((2 << (sub - 1)) - 1));
    pos+= 1;
    // Determine if another block of padding is needed.
    if( pos > 14 ){
        // Pad block with 0.
        for( ; pos < 16 ; pos+= 1 ){
            block[pos] = 0;
        }
        // Hash block.
        SHA1HasherProcess(obj, block);
        // Start at begining of new block.
        pos = 0;
    }
    // Pad remainder of block with 0.
    for( ; pos < 14 ; pos+= 1 ){
        block[pos] = 0;
    }
    // Append big endian message length (in bits). Cannot support length >268435455 bytes.
    len*= 8;
    block[14] = 0;
    block[15] = (len << 24) | ((len << 8) & 0xFF0000) | ((len >> 8) & 0xFF00) | ((len >> 24) & 0xFF);
    // Hash the last block.
    SHA1HasherProcess(obj, block);
}
void SHA1HasherHash(structref<sha1_hasher_t> obj, arrayref<sha1_hasher_hash_t> hash){
    int i;
    // Bulk copy the hash.
    for( i = 0 ; i < 5 ; i+= 1 ){
        hash[i] = obj.h[i];
    }
}
void SHA1HasherHashData(structref<sha1_hasher_t> obj, funcref<sha1_hasher_data_reader_t> reader, int len){
    sha1_hasher_block_t block;
    int pos;
    int i;
    // Initalize hasher.
    SHA1HasherInitalize(obj);
    // Whole block read loop.
    pos = 0;
    while( len >= 64 ){
        // Read block.
        for( i = 0 ; i < 16 ; i+= 1 ){
            block[i] = reader();
        }
        // Hash block.
        SHA1HasherProcess(obj, block);
        // Advance.
        pos+= 64;
        len-= 64;
    }
    // Sub-block read.
    for( i = 0 ; i < (len / 4) ; i+= 1 ){
        block[i] = reader();
    }
    pos+= i * 4;
    len-= i * 4;
    // Read sub-int.
    if( len > 0 ){
        block[i] = reader() & ((1 << (8 * len)) - 1);
        pos+= len;
    // Or clear next int.
    }else{
        block[i] = 0;
    }
    // Now work on padding.
    len = pos;
    block[i]|= (0x80 << ((pos % 4) * 8));
    pos = ((pos / 4) + 1) * 4;
    // Determine if another block of padding is needed.
    if( (pos % 64) > 56 ){
        // Pad block with 0.
        for( i = (pos % 64) / 4 ; i < 16 ; i+= 1 ){
            block[i] = 0;
        }
        // Hash block.
        SHA1HasherProcess(obj, block);
        // Advance a block.
        pos = ((pos / 64) + 1) * 64;
    }
    // Pad remainder of block with 0.
    for( i = (pos % 64) / 4 ; i < 14 ; i+= 1 ){
        block[i] = 0;
    }
    // Append big endian message length (in bits). Cannot support length >268435455 bytes.
    i = len * 8;
    block[14] = 0;
    block[15] = (i << 24) | ((i << 8) & 0xFF0000) | ((i >> 8) & 0xFF00) | ((i >> 24) & 0xFF);
    // Hash the last block.
    SHA1HasherProcess(obj, block);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: ASCII Channel
//--------------------------------------------------------------------------------------------------
// ASCII Channel
// Dr Super Good
// v1.0
// Provides functionalaity to channel a string as a sequence of character numbers.
// ASCII decoding is used so behaviour is unspecified for unusual characters.
// For performance four characters are packed in an int going from LSB to MSB.
// Due to the inability to store global pointers, the channel must be staticly wrapped for use.
//
// TYPES
// Represents a channel, providing persistent storage for channel state.
struct ascii_channel_t{
    // PRIVATE
    // The string being decoded.
    string buffer;
    // The current position within the string.
    int pos;
};
// PUBLIC FUNCTIONS
// Setup an ASCII channel using the string s as the buffer.
void ASCIIChannelSetup(structref<ascii_channel_t> obj, string s);
// Gets the length remaining of the channel in bytes (characters).
int ASCIIChannelLength(structref<ascii_channel_t> obj);
// Reads the next 4 characters from the channel. Null (0) is given for EoF characters.
// You should call this function in a wrapper with static obj link for dynamic channels.
int ASCIIChannelRead(structref<ascii_channel_t> obj);
//
// IMPLEMENTATION
void ASCIIChannelSetup(structref<ascii_channel_t> obj, string s){
    obj.buffer = s;
    obj.pos = 0;
}
int ASCIIChannelLength(structref<ascii_channel_t> obj){
    return StringLength(obj.buffer) - obj.pos;
}
int ASCIIChannelRead(structref<ascii_channel_t> obj){
    int end;
    int shift;
    int val;
    // Determine how much to read.
    end = obj.pos + 4;
    if( end > StringLength(obj.buffer) ){ end = StringLength(obj.buffer); }
    // Read loop.
    shift = 0;
    val = 0;
    obj.pos+= 1;
    for( ; obj.pos <= end ; obj.pos+= 1 ){
        val|= ASCIIUtilStringToInt(obj.buffer, obj.pos) << shift;
        shift+= 8;
    }
    obj.pos-= 1;
    // Return;
    return val;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: AES Encryption
//--------------------------------------------------------------------------------------------------
// AES Encryption
// Dr Super Good
// v1.0
// Provides functionalaity to encrypt a block in a way complient with the AES standard.
// Encryption is done in 128 bit blocks (4 int). Other values are not supported.
// Although it could be configured for AES 128, 192 or 256, constants define this for now due to lack of dynamic memory support.
// It is recommended to use only one sort of encryption per map, using more would be kind of silly.
// It need not be fully AES complient in configuration to trade speed for security.
// Remember that the biggest weakness of SC2 banks is the map script itself. Beyond AES 128 is pointless.
//
// CONSTANTS
// The block matrix size in 4 byte columns. AES is always 4.
// Currently only 4 is supported due to loop unwrapping.
const int AES_ENCRYPTION_NB = 4;
// The key size in words. AES is either 4, 6 or 8.
const int AES_ENCRYPTION_NK = 5;
// The round count. AES is either 10, 12 or 14.
const int AES_ENCRYPTION_NR = 11;
// The key schedule size.
const int AES_ENCRYPTION_NKS = AES_ENCRYPTION_NB * (AES_ENCRYPTION_NR + 1);
// The type used by all AES translation tables.
// Since these are byte transforms, bytes should be used.
typedef byte[256] aes_encryption_table_t;
// The substitution and inverse substitution boxes.
// Might get away with something smaller than int?
aes_encryption_table_t AES_ENCRYPTION_SBOX;
aes_encryption_table_t AES_ENCRYPTION_ISBOX;
// Galois Multiplication lookup tables.
// GF(2^8) multiplication is very complicated so pre-computed tables are used.
aes_encryption_table_t AES_ENCRYPTION_GM2;
aes_encryption_table_t AES_ENCRYPTION_GM9;
aes_encryption_table_t AES_ENCRYPTION_GM13;
// The rcon table is used by the key scheduler to expand keys.
// Although defined for all values, only the first 30 are used.
byte[30] AES_ENCRYPTION_RCON;
// TYPES
// The encryption key.
typedef int[AES_ENCRYPTION_NK] aes_encryption_key_t;
// The block to encrypt.
typedef int[AES_ENCRYPTION_NB] aes_encryption_block_t;
// Represents a channel, providing persistent storage for channel state.
struct aes_encryption_t{
    // PRIVATE
    // The key schedule.
    int[AES_ENCRYPTION_NKS] keysched;
    // The current position in the key schedule.
    int keypos;
};
// PUBLIC FUNCTIONS
// Initializes encryptor with the key.
void AESEncryptionSetup(structref<aes_encryption_t> obj, arrayref<aes_encryption_key_t> key);
// Encrypts the block generating cipher.
void AESEncryptionCipher(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block);
// Decrypts the block generating plaintext.
void AESEncryptionInvCipher(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block);
// PRIVATE FUNCTIONS
// RotWord function defined by specification.
int AESEncryptionRotWord(int word);
// SubWord function defined by specification. Expanded to allow table type.
int AESEncryptionSubWord(int word, arrayref<aes_encryption_table_t> box);
// SubBytes function defined by specification.
void AESEncryptionSubBytes(arrayref<aes_encryption_block_t> block);
// ShiftRows function defined by specification.
void AESEncryptionShiftRows(arrayref<aes_encryption_block_t> block);
// MixColumns function defined by specification.
void AESEncryptionMixColumns(arrayref<aes_encryption_block_t> block);
// AddRoundKey function defined by specification.
void AESEncryptionAddRoundKey(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block);
// Function to generate key expansions. Used to setup the object.
void AESEncryptionKeyExpansion(structref<aes_encryption_t> obj, arrayref<aes_encryption_key_t> key);
// InvShiftRows function defined by specification.
void AESEncryptionInvShiftRows(arrayref<aes_encryption_block_t> block);
// InvSubBytes function defined by specification.
void AESEncryptionInvSubBytes(arrayref<aes_encryption_block_t> block);
// InvMixColumns function defined by specification.
void AESEncryptionInvMixColumns(arrayref<aes_encryption_block_t> block);
// Static initializer.
void AESEncryptionInit();
// 
// IMPLEMENTATION
void AESEncryptionSetup(structref<aes_encryption_t> obj, arrayref<aes_encryption_key_t> key){
    AESEncryptionKeyExpansion(obj, key);
}
void AESEncryptionCipher(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block){
    int i;
    // Set initial state.
    obj.keypos = 0;
    // Initial key expansion.
    AESEncryptionAddRoundKey(obj, block);
    // Apply rounds.
    for( i = 1 ; i < AES_ENCRYPTION_NR ; i+= 1 ){
        AESEncryptionSubBytes(block);
        AESEncryptionShiftRows(block);
        AESEncryptionMixColumns(block);
        AESEncryptionAddRoundKey(obj, block);
    }
    // The final round does not mix columns.
    AESEncryptionSubBytes(block);
    AESEncryptionShiftRows(block);
    AESEncryptionAddRoundKey(obj, block);
}
void AESEncryptionInvCipher(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block){
    int i;
    // Set initial state.
    obj.keypos = AES_ENCRYPTION_NKS - AES_ENCRYPTION_NB;
    // Initial key expansion.
    AESEncryptionAddRoundKey(obj, block);
    // Apply inverse rounds.
    for( obj.keypos = (AES_ENCRYPTION_NR - 1) * AES_ENCRYPTION_NB ; obj.keypos > 0 ; obj.keypos-= AES_ENCRYPTION_NB * 2 ){
        AESEncryptionInvShiftRows(block);
        AESEncryptionInvSubBytes(block);
        AESEncryptionAddRoundKey(obj, block);
        AESEncryptionInvMixColumns(block);
    }
    // The final round does not mix columns.
    AESEncryptionInvShiftRows(block);
    AESEncryptionInvSubBytes(block);
    AESEncryptionAddRoundKey(obj, block);
}
int AESEncryptionRotWord(int word){
    return (word << 24) | ((word >> 8) & 0xFFFFFF);
}
int AESEncryptionSubWord(int word, arrayref<aes_encryption_table_t> box){
    int a;
    int tc;
    // Have to fill accumulator using typecast due to bytes.
    a = box[word & 0xFF];
    tc = box[(word >> 8) & 0xFF];
    a|= tc << 8;
    tc = box[(word >> 16) & 0xFF];
    a|= tc << 16;
    tc = box[(word >> 24) & 0xFF];
    a|= tc << 24;
    return a;
}
void AESEncryptionSubBytes(arrayref<aes_encryption_block_t> block){
    // Performs some simple bytewise substitutions a word at a time.
    // Code is an unwound loop to try and improve performance.
    block[0] = AESEncryptionSubWord(block[0], AES_ENCRYPTION_SBOX);
    block[1] = AESEncryptionSubWord(block[1], AES_ENCRYPTION_SBOX);
    block[2] = AESEncryptionSubWord(block[2], AES_ENCRYPTION_SBOX);
    block[3] = AESEncryptionSubWord(block[3], AES_ENCRYPTION_SBOX);
}
void AESEncryptionShiftRows(arrayref<aes_encryption_block_t> block){
    // Performs row shifts. This is tricky because the words are columns.
    // Code is an unwound loop to try and improve performance.
    int a;
    int b;
    int c;
    // Intermediate values are used until all results are generated.
    a = (block[0] & 0xFF) | (block[1] & 0xFF00) | (block[2] & 0xFF0000) | (block[3] & ~0xFFFFFF);
    b = (block[1] & 0xFF) | (block[2] & 0xFF00) | (block[3] & 0xFF0000) | (block[0] & ~0xFFFFFF);
    c = (block[2] & 0xFF) | (block[3] & 0xFF00) | (block[0] & 0xFF0000) | (block[1] & ~0xFFFFFF);
    // Now update the block. Last shift can be done directly.
    block[3] = (block[3] & 0xFF) | (block[0] & 0xFF00) | (block[1] & 0xFF0000) | (block[2] & ~0xFFFFFF);
    block[2] = c;
    block[1] = b;
    block[0] = a;
}
void AESEncryptionMixColumns(arrayref<aes_encryption_block_t> block){
    // Performs column permutation re-arrangement.
    // This is based on bit field theory.
    // Code is an unwound loop to try and improve performance.
    int a;
    int b;
    // Use a for block*1 and b for block*2 using a finite field.
    a = block[0];
    b = AESEncryptionSubWord(a, AES_ENCRYPTION_GM2);
    block[0] = b ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((a << 24) | ((a >> 8) & 0xFFFFFF)) ^ ((a << 16) | ((a >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    a = block[1];
    b = AESEncryptionSubWord(a, AES_ENCRYPTION_GM2);
    block[1] = b ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((a << 24) | ((a >> 8) & 0xFFFFFF)) ^ ((a << 16) | ((a >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    a = block[2];
    b = AESEncryptionSubWord(a, AES_ENCRYPTION_GM2);
    block[2] = b ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((a << 24) | ((a >> 8) & 0xFFFFFF)) ^ ((a << 16) | ((a >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    a = block[3];
    b = AESEncryptionSubWord(a, AES_ENCRYPTION_GM2);
    block[3] = b ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((a << 24) | ((a >> 8) & 0xFFFFFF)) ^ ((a << 16) | ((a >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
}
void AESEncryptionAddRoundKey(structref<aes_encryption_t> obj, arrayref<aes_encryption_block_t> block){
    // XOR the state with each word of the key at the round position.
    // This is an unwound loop for speed.
    block[0]^= obj.keysched[obj.keypos];
    obj.keypos+= 1;
    block[1]^= obj.keysched[obj.keypos];
    obj.keypos+= 1;
    block[2]^= obj.keysched[obj.keypos];
    obj.keypos+= 1;
    block[3]^= obj.keysched[obj.keypos];
    obj.keypos+= 1;
}
void AESEncryptionKeyExpansion(structref<aes_encryption_t> obj, arrayref<aes_encryption_key_t> key){
    int i;
    int temp;
    int conv;
    // Copy key into key schedule.
    for( i = 0 ; i < AES_ENCRYPTION_NK ; i+= 1 ){
        obj.keysched[i] = key[i];
    }
    // Fill rest of schedule with generated keys.
    for( ; i < AES_ENCRYPTION_NKS ; i+= 1 ){
        temp = obj.keysched[i - 1];
        if( (i % AES_ENCRYPTION_NK) == 0 ){
            // Need to typecast byte.
            conv = AES_ENCRYPTION_RCON[i / AES_ENCRYPTION_NK];
            temp = AESEncryptionSubWord(AESEncryptionRotWord(temp), AES_ENCRYPTION_SBOX) ^ conv;
        }
        else if( (AES_ENCRYPTION_NK > 6) && ((i % AES_ENCRYPTION_NK) == 4) ){
            temp = AESEncryptionSubWord(temp, AES_ENCRYPTION_SBOX);
        }
        obj.keysched[i] = obj.keysched[i - AES_ENCRYPTION_NK] ^ temp;
    }
}
void AESEncryptionInvShiftRows(arrayref<aes_encryption_block_t> block){
    // Performs inverse row shifts. This is tricky because the words are columns.
    // Code is an unwound loop to try and improve performance.
    int a;
    int b;
    int c;
    // Intermediate values are used until all results are generated.
    a = (block[0] & 0xFF) | (block[3] & 0xFF00) | (block[2] & 0xFF0000) | (block[1] & ~0xFFFFFF);
    b = (block[1] & 0xFF) | (block[0] & 0xFF00) | (block[3] & 0xFF0000) | (block[2] & ~0xFFFFFF);
    c = (block[2] & 0xFF) | (block[1] & 0xFF00) | (block[0] & 0xFF0000) | (block[3] & ~0xFFFFFF);
    // Now update the block. Last shift can be done directly.
    block[3] = (block[3] & 0xFF) | (block[2] & 0xFF00) | (block[1] & 0xFF0000) | (block[0] & ~0xFFFFFF);
    block[2] = c;
    block[1] = b;
    block[0] = a;
}
void AESEncryptionInvSubBytes(arrayref<aes_encryption_block_t> block){
    // Performs some simple bytewise inverse substitutions a word at a time.
    // Code is an unwound loop to try and improve performance.
    block[0] = AESEncryptionSubWord(block[0], AES_ENCRYPTION_ISBOX);
    block[1] = AESEncryptionSubWord(block[1], AES_ENCRYPTION_ISBOX);
    block[2] = AESEncryptionSubWord(block[2], AES_ENCRYPTION_ISBOX);
    block[3] = AESEncryptionSubWord(block[3], AES_ENCRYPTION_ISBOX);
}
void AESEncryptionInvMixColumns(arrayref<aes_encryption_block_t> block){
    // Performs inverse column permutation re-arrangement.
    // This is based on bit field theory.
    // Code is an unwound loop to try and improve performance.
    int a;
    int b;
    int c;
    int d;
    // Use a for block*9,b for block*11, c for block*13 and d for block*14 using a finite field.
    d = block[0];
    a = AESEncryptionSubWord(d, AES_ENCRYPTION_GM9);
    b = a ^ AESEncryptionSubWord(d, AES_ENCRYPTION_GM2);
    c = AESEncryptionSubWord(d, AES_ENCRYPTION_GM13);
    d^= c ^ b ^ a;
    block[0] = d ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((c << 16) | ((c >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    d = block[1];
    a = AESEncryptionSubWord(d, AES_ENCRYPTION_GM9);
    b = a ^ AESEncryptionSubWord(d, AES_ENCRYPTION_GM2);
    c = AESEncryptionSubWord(d, AES_ENCRYPTION_GM13);
    d^= c ^ b ^ a;
    block[1] = d ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((c << 16) | ((c >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    d = block[2];
    a = AESEncryptionSubWord(d, AES_ENCRYPTION_GM9);
    b = a ^ AESEncryptionSubWord(d, AES_ENCRYPTION_GM2);
    c = AESEncryptionSubWord(d, AES_ENCRYPTION_GM13);
    d^= c ^ b ^ a;
    block[2] = d ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((c << 16) | ((c >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
    d = block[3];
    a = AESEncryptionSubWord(d, AES_ENCRYPTION_GM9);
    b = a ^ AESEncryptionSubWord(d, AES_ENCRYPTION_GM2);
    c = AESEncryptionSubWord(d, AES_ENCRYPTION_GM13);
    d^= c ^ b ^ a;
    block[3] = d ^ ((b << 24) | ((b >> 8) & 0xFFFFFF)) ^ ((c << 16) | ((c >> 16) & 0xFFFF)) ^ ((a << 8) | ((a >> 24) & 0xFF));
}
void AESEncryptionInit(){
    int i;
    int a;
    byte b;
    // Fill S table. In theory the values could be computed dynamicly but constants are probably faster.
    // From wikipedia http://en.wikipedia.org/wiki/Rijndael_S-box formated with a JAVA program. 
    AES_ENCRYPTION_SBOX[  0] = 0x63;
    AES_ENCRYPTION_SBOX[  1] = 0x7C;
    AES_ENCRYPTION_SBOX[  2] = 0x77;
    AES_ENCRYPTION_SBOX[  3] = 0x7B;
    AES_ENCRYPTION_SBOX[  4] = 0xF2;
    AES_ENCRYPTION_SBOX[  5] = 0x6B;
    AES_ENCRYPTION_SBOX[  6] = 0x6F;
    AES_ENCRYPTION_SBOX[  7] = 0xC5;
    AES_ENCRYPTION_SBOX[  8] = 0x30;
    AES_ENCRYPTION_SBOX[  9] = 0x01;
    AES_ENCRYPTION_SBOX[ 10] = 0x67;
    AES_ENCRYPTION_SBOX[ 11] = 0x2B;
    AES_ENCRYPTION_SBOX[ 12] = 0xFE;
    AES_ENCRYPTION_SBOX[ 13] = 0xD7;
    AES_ENCRYPTION_SBOX[ 14] = 0xAB;
    AES_ENCRYPTION_SBOX[ 15] = 0x76;
    AES_ENCRYPTION_SBOX[ 16] = 0xCA;
    AES_ENCRYPTION_SBOX[ 17] = 0x82;
    AES_ENCRYPTION_SBOX[ 18] = 0xC9;
    AES_ENCRYPTION_SBOX[ 19] = 0x7D;
    AES_ENCRYPTION_SBOX[ 20] = 0xFA;
    AES_ENCRYPTION_SBOX[ 21] = 0x59;
    AES_ENCRYPTION_SBOX[ 22] = 0x47;
    AES_ENCRYPTION_SBOX[ 23] = 0xF0;
    AES_ENCRYPTION_SBOX[ 24] = 0xAD;
    AES_ENCRYPTION_SBOX[ 25] = 0xD4;
    AES_ENCRYPTION_SBOX[ 26] = 0xA2;
    AES_ENCRYPTION_SBOX[ 27] = 0xAF;
    AES_ENCRYPTION_SBOX[ 28] = 0x9C;
    AES_ENCRYPTION_SBOX[ 29] = 0xA4;
    AES_ENCRYPTION_SBOX[ 30] = 0x72;
    AES_ENCRYPTION_SBOX[ 31] = 0xC0;
    AES_ENCRYPTION_SBOX[ 32] = 0xB7;
    AES_ENCRYPTION_SBOX[ 33] = 0xFD;
    AES_ENCRYPTION_SBOX[ 34] = 0x93;
    AES_ENCRYPTION_SBOX[ 35] = 0x26;
    AES_ENCRYPTION_SBOX[ 36] = 0x36;
    AES_ENCRYPTION_SBOX[ 37] = 0x3F;
    AES_ENCRYPTION_SBOX[ 38] = 0xF7;
    AES_ENCRYPTION_SBOX[ 39] = 0xCC;
    AES_ENCRYPTION_SBOX[ 40] = 0x34;
    AES_ENCRYPTION_SBOX[ 41] = 0xA5;
    AES_ENCRYPTION_SBOX[ 42] = 0xE5;
    AES_ENCRYPTION_SBOX[ 43] = 0xF1;
    AES_ENCRYPTION_SBOX[ 44] = 0x71;
    AES_ENCRYPTION_SBOX[ 45] = 0xD8;
    AES_ENCRYPTION_SBOX[ 46] = 0x31;
    AES_ENCRYPTION_SBOX[ 47] = 0x15;
    AES_ENCRYPTION_SBOX[ 48] = 0x04;
    AES_ENCRYPTION_SBOX[ 49] = 0xC7;
    AES_ENCRYPTION_SBOX[ 50] = 0x23;
    AES_ENCRYPTION_SBOX[ 51] = 0xC3;
    AES_ENCRYPTION_SBOX[ 52] = 0x18;
    AES_ENCRYPTION_SBOX[ 53] = 0x96;
    AES_ENCRYPTION_SBOX[ 54] = 0x05;
    AES_ENCRYPTION_SBOX[ 55] = 0x9A;
    AES_ENCRYPTION_SBOX[ 56] = 0x07;
    AES_ENCRYPTION_SBOX[ 57] = 0x12;
    AES_ENCRYPTION_SBOX[ 58] = 0x80;
    AES_ENCRYPTION_SBOX[ 59] = 0xE2;
    AES_ENCRYPTION_SBOX[ 60] = 0xEB;
    AES_ENCRYPTION_SBOX[ 61] = 0x27;
    AES_ENCRYPTION_SBOX[ 62] = 0xB2;
    AES_ENCRYPTION_SBOX[ 63] = 0x75;
    AES_ENCRYPTION_SBOX[ 64] = 0x09;
    AES_ENCRYPTION_SBOX[ 65] = 0x83;
    AES_ENCRYPTION_SBOX[ 66] = 0x2C;
    AES_ENCRYPTION_SBOX[ 67] = 0x1A;
    AES_ENCRYPTION_SBOX[ 68] = 0x1B;
    AES_ENCRYPTION_SBOX[ 69] = 0x6E;
    AES_ENCRYPTION_SBOX[ 70] = 0x5A;
    AES_ENCRYPTION_SBOX[ 71] = 0xA0;
    AES_ENCRYPTION_SBOX[ 72] = 0x52;
    AES_ENCRYPTION_SBOX[ 73] = 0x3B;
    AES_ENCRYPTION_SBOX[ 74] = 0xD6;
    AES_ENCRYPTION_SBOX[ 75] = 0xB3;
    AES_ENCRYPTION_SBOX[ 76] = 0x29;
    AES_ENCRYPTION_SBOX[ 77] = 0xE3;
    AES_ENCRYPTION_SBOX[ 78] = 0x2F;
    AES_ENCRYPTION_SBOX[ 79] = 0x84;
    AES_ENCRYPTION_SBOX[ 80] = 0x53;
    AES_ENCRYPTION_SBOX[ 81] = 0xD1;
    AES_ENCRYPTION_SBOX[ 82] = 0x00;
    AES_ENCRYPTION_SBOX[ 83] = 0xED;
    AES_ENCRYPTION_SBOX[ 84] = 0x20;
    AES_ENCRYPTION_SBOX[ 85] = 0xFC;
    AES_ENCRYPTION_SBOX[ 86] = 0xB1;
    AES_ENCRYPTION_SBOX[ 87] = 0x5B;
    AES_ENCRYPTION_SBOX[ 88] = 0x6A;
    AES_ENCRYPTION_SBOX[ 89] = 0xCB;
    AES_ENCRYPTION_SBOX[ 90] = 0xBE;
    AES_ENCRYPTION_SBOX[ 91] = 0x39;
    AES_ENCRYPTION_SBOX[ 92] = 0x4A;
    AES_ENCRYPTION_SBOX[ 93] = 0x4C;
    AES_ENCRYPTION_SBOX[ 94] = 0x58;
    AES_ENCRYPTION_SBOX[ 95] = 0xCF;
    AES_ENCRYPTION_SBOX[ 96] = 0xD0;
    AES_ENCRYPTION_SBOX[ 97] = 0xEF;
    AES_ENCRYPTION_SBOX[ 98] = 0xAA;
    AES_ENCRYPTION_SBOX[ 99] = 0xFB;
    AES_ENCRYPTION_SBOX[100] = 0x43;
    AES_ENCRYPTION_SBOX[101] = 0x4D;
    AES_ENCRYPTION_SBOX[102] = 0x33;
    AES_ENCRYPTION_SBOX[103] = 0x85;
    AES_ENCRYPTION_SBOX[104] = 0x45;
    AES_ENCRYPTION_SBOX[105] = 0xF9;
    AES_ENCRYPTION_SBOX[106] = 0x02;
    AES_ENCRYPTION_SBOX[107] = 0x7F;
    AES_ENCRYPTION_SBOX[108] = 0x50;
    AES_ENCRYPTION_SBOX[109] = 0x3C;
    AES_ENCRYPTION_SBOX[110] = 0x9F;
    AES_ENCRYPTION_SBOX[111] = 0xA8;
    AES_ENCRYPTION_SBOX[112] = 0x51;
    AES_ENCRYPTION_SBOX[113] = 0xA3;
    AES_ENCRYPTION_SBOX[114] = 0x40;
    AES_ENCRYPTION_SBOX[115] = 0x8F;
    AES_ENCRYPTION_SBOX[116] = 0x92;
    AES_ENCRYPTION_SBOX[117] = 0x9D;
    AES_ENCRYPTION_SBOX[118] = 0x38;
    AES_ENCRYPTION_SBOX[119] = 0xF5;
    AES_ENCRYPTION_SBOX[120] = 0xBC;
    AES_ENCRYPTION_SBOX[121] = 0xB6;
    AES_ENCRYPTION_SBOX[122] = 0xDA;
    AES_ENCRYPTION_SBOX[123] = 0x21;
    AES_ENCRYPTION_SBOX[124] = 0x10;
    AES_ENCRYPTION_SBOX[125] = 0xFF;
    AES_ENCRYPTION_SBOX[126] = 0xF3;
    AES_ENCRYPTION_SBOX[127] = 0xD2;
    AES_ENCRYPTION_SBOX[128] = 0xCD;
    AES_ENCRYPTION_SBOX[129] = 0x0C;
    AES_ENCRYPTION_SBOX[130] = 0x13;
    AES_ENCRYPTION_SBOX[131] = 0xEC;
    AES_ENCRYPTION_SBOX[132] = 0x5F;
    AES_ENCRYPTION_SBOX[133] = 0x97;
    AES_ENCRYPTION_SBOX[134] = 0x44;
    AES_ENCRYPTION_SBOX[135] = 0x17;
    AES_ENCRYPTION_SBOX[136] = 0xC4;
    AES_ENCRYPTION_SBOX[137] = 0xA7;
    AES_ENCRYPTION_SBOX[138] = 0x7E;
    AES_ENCRYPTION_SBOX[139] = 0x3D;
    AES_ENCRYPTION_SBOX[140] = 0x64;
    AES_ENCRYPTION_SBOX[141] = 0x5D;
    AES_ENCRYPTION_SBOX[142] = 0x19;
    AES_ENCRYPTION_SBOX[143] = 0x73;
    AES_ENCRYPTION_SBOX[144] = 0x60;
    AES_ENCRYPTION_SBOX[145] = 0x81;
    AES_ENCRYPTION_SBOX[146] = 0x4F;
    AES_ENCRYPTION_SBOX[147] = 0xDC;
    AES_ENCRYPTION_SBOX[148] = 0x22;
    AES_ENCRYPTION_SBOX[149] = 0x2A;
    AES_ENCRYPTION_SBOX[150] = 0x90;
    AES_ENCRYPTION_SBOX[151] = 0x88;
    AES_ENCRYPTION_SBOX[152] = 0x46;
    AES_ENCRYPTION_SBOX[153] = 0xEE;
    AES_ENCRYPTION_SBOX[154] = 0xB8;
    AES_ENCRYPTION_SBOX[155] = 0x14;
    AES_ENCRYPTION_SBOX[156] = 0xDE;
    AES_ENCRYPTION_SBOX[157] = 0x5E;
    AES_ENCRYPTION_SBOX[158] = 0x0B;
    AES_ENCRYPTION_SBOX[159] = 0xDB;
    AES_ENCRYPTION_SBOX[160] = 0xE0;
    AES_ENCRYPTION_SBOX[161] = 0x32;
    AES_ENCRYPTION_SBOX[162] = 0x3A;
    AES_ENCRYPTION_SBOX[163] = 0x0A;
    AES_ENCRYPTION_SBOX[164] = 0x49;
    AES_ENCRYPTION_SBOX[165] = 0x06;
    AES_ENCRYPTION_SBOX[166] = 0x24;
    AES_ENCRYPTION_SBOX[167] = 0x5C;
    AES_ENCRYPTION_SBOX[168] = 0xC2;
    AES_ENCRYPTION_SBOX[169] = 0xD3;
    AES_ENCRYPTION_SBOX[170] = 0xAC;
    AES_ENCRYPTION_SBOX[171] = 0x62;
    AES_ENCRYPTION_SBOX[172] = 0x91;
    AES_ENCRYPTION_SBOX[173] = 0x95;
    AES_ENCRYPTION_SBOX[174] = 0xE4;
    AES_ENCRYPTION_SBOX[175] = 0x79;
    AES_ENCRYPTION_SBOX[176] = 0xE7;
    AES_ENCRYPTION_SBOX[177] = 0xC8;
    AES_ENCRYPTION_SBOX[178] = 0x37;
    AES_ENCRYPTION_SBOX[179] = 0x6D;
    AES_ENCRYPTION_SBOX[180] = 0x8D;
    AES_ENCRYPTION_SBOX[181] = 0xD5;
    AES_ENCRYPTION_SBOX[182] = 0x4E;
    AES_ENCRYPTION_SBOX[183] = 0xA9;
    AES_ENCRYPTION_SBOX[184] = 0x6C;
    AES_ENCRYPTION_SBOX[185] = 0x56;
    AES_ENCRYPTION_SBOX[186] = 0xF4;
    AES_ENCRYPTION_SBOX[187] = 0xEA;
    AES_ENCRYPTION_SBOX[188] = 0x65;
    AES_ENCRYPTION_SBOX[189] = 0x7A;
    AES_ENCRYPTION_SBOX[190] = 0xAE;
    AES_ENCRYPTION_SBOX[191] = 0x08;
    AES_ENCRYPTION_SBOX[192] = 0xBA;
    AES_ENCRYPTION_SBOX[193] = 0x78;
    AES_ENCRYPTION_SBOX[194] = 0x25;
    AES_ENCRYPTION_SBOX[195] = 0x2E;
    AES_ENCRYPTION_SBOX[196] = 0x1C;
    AES_ENCRYPTION_SBOX[197] = 0xA6;
    AES_ENCRYPTION_SBOX[198] = 0xB4;
    AES_ENCRYPTION_SBOX[199] = 0xC6;
    AES_ENCRYPTION_SBOX[200] = 0xE8;
    AES_ENCRYPTION_SBOX[201] = 0xDD;
    AES_ENCRYPTION_SBOX[202] = 0x74;
    AES_ENCRYPTION_SBOX[203] = 0x1F;
    AES_ENCRYPTION_SBOX[204] = 0x4B;
    AES_ENCRYPTION_SBOX[205] = 0xBD;
    AES_ENCRYPTION_SBOX[206] = 0x8B;
    AES_ENCRYPTION_SBOX[207] = 0x8A;
    AES_ENCRYPTION_SBOX[208] = 0x70;
    AES_ENCRYPTION_SBOX[209] = 0x3E;
    AES_ENCRYPTION_SBOX[210] = 0xB5;
    AES_ENCRYPTION_SBOX[211] = 0x66;
    AES_ENCRYPTION_SBOX[212] = 0x48;
    AES_ENCRYPTION_SBOX[213] = 0x03;
    AES_ENCRYPTION_SBOX[214] = 0xF6;
    AES_ENCRYPTION_SBOX[215] = 0x0E;
    AES_ENCRYPTION_SBOX[216] = 0x61;
    AES_ENCRYPTION_SBOX[217] = 0x35;
    AES_ENCRYPTION_SBOX[218] = 0x57;
    AES_ENCRYPTION_SBOX[219] = 0xB9;
    AES_ENCRYPTION_SBOX[220] = 0x86;
    AES_ENCRYPTION_SBOX[221] = 0xC1;
    AES_ENCRYPTION_SBOX[222] = 0x1D;
    AES_ENCRYPTION_SBOX[223] = 0x9E;
    AES_ENCRYPTION_SBOX[224] = 0xE1;
    AES_ENCRYPTION_SBOX[225] = 0xF8;
    AES_ENCRYPTION_SBOX[226] = 0x98;
    AES_ENCRYPTION_SBOX[227] = 0x11;
    AES_ENCRYPTION_SBOX[228] = 0x69;
    AES_ENCRYPTION_SBOX[229] = 0xD9;
    AES_ENCRYPTION_SBOX[230] = 0x8E;
    AES_ENCRYPTION_SBOX[231] = 0x94;
    AES_ENCRYPTION_SBOX[232] = 0x9B;
    AES_ENCRYPTION_SBOX[233] = 0x1E;
    AES_ENCRYPTION_SBOX[234] = 0x87;
    AES_ENCRYPTION_SBOX[235] = 0xE9;
    AES_ENCRYPTION_SBOX[236] = 0xCE;
    AES_ENCRYPTION_SBOX[237] = 0x55;
    AES_ENCRYPTION_SBOX[238] = 0x28;
    AES_ENCRYPTION_SBOX[239] = 0xDF;
    AES_ENCRYPTION_SBOX[240] = 0x8C;
    AES_ENCRYPTION_SBOX[241] = 0xA1;
    AES_ENCRYPTION_SBOX[242] = 0x89;
    AES_ENCRYPTION_SBOX[243] = 0x0D;
    AES_ENCRYPTION_SBOX[244] = 0xBF;
    AES_ENCRYPTION_SBOX[245] = 0xE6;
    AES_ENCRYPTION_SBOX[246] = 0x42;
    AES_ENCRYPTION_SBOX[247] = 0x68;
    AES_ENCRYPTION_SBOX[248] = 0x41;
    AES_ENCRYPTION_SBOX[249] = 0x99;
    AES_ENCRYPTION_SBOX[250] = 0x2D;
    AES_ENCRYPTION_SBOX[251] = 0x0F;
    AES_ENCRYPTION_SBOX[252] = 0xB0;
    AES_ENCRYPTION_SBOX[253] = 0x54;
    AES_ENCRYPTION_SBOX[254] = 0xBB;
    AES_ENCRYPTION_SBOX[255] = 0x16;
    // Generate the inverse table programaticly.
    // In theory this maybe slower than constants but saves on code space.
    for( i = 0 ; i < 256 ; i+= 1 ){
        // Array index must be int.
        a = AES_ENCRYPTION_SBOX[i];
        AES_ENCRYPTION_ISBOX[a] = i;
    }
    // Programaticly generate the Galois Multiplication by 2 lookup tables.
    for( i = 0 ; i < 128 ; i+= 1 ){
        AES_ENCRYPTION_GM2[i] = i << 1;
    }
    for( ; i < 256 ; i+= 1 ){
        AES_ENCRYPTION_GM2[i] = ((i << 1) & 0xFF) ^ 0x1B;
    }
    // Programaticly generate the Galois Multiplication by 9 lookup tables.
    // x*9 = x*8 + x
    for( i = 0 ; i < 256 ; i+= 1 ){
        // array index must be int.
        a = AES_ENCRYPTION_GM2[i];
        a = AES_ENCRYPTION_GM2[a];
        a = AES_ENCRYPTION_GM2[a];
        // Must XOR same types.
        AES_ENCRYPTION_GM9[i] = a ^ i;
    }
    // Programaticly generate the Galois Multiplication by 13 lookup tables.
    // x*13 = x*9 + x*4
    for( i = 0 ; i < 256 ; i+= 1 ){
        // array index must be int.
        a = AES_ENCRYPTION_GM2[i];
        // Must XOR same types.
        AES_ENCRYPTION_GM13[i] = AES_ENCRYPTION_GM2[a] ^ AES_ENCRYPTION_GM9[i];
    }
    // Fill the RCON table programaticly.
    AES_ENCRYPTION_RCON[0] = 0x8D;
    a = 1;
    for( i = 1 ; i < 30 ; i+= 1 ){
        // Generate and advance.
        AES_ENCRYPTION_RCON[i] = a;
        a = AES_ENCRYPTION_GM2[a];
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Imperial Bank
//--------------------------------------------------------------------------------------------------
// Imperial Bank
// Dr Super Good
// v1.0
// Provides functionality to securely and efficiently store data.
// Is technically a wrapper for native banks.
// Automates data integrity and security.
// Data is writen in base64 blocks.
// Uses 160 bit security keys.
//
// REQUIRES
// - ASCII Util
// - Bit Field
// - SHA-1 Hasher
// - ASCII Channel
// - AES Encryption
//
// TYPES
// A section key.
typedef sha1_hasher_hash_t imperial_bank_key_t;
// A substring reference for decerning owners.
struct imperial_bank_ownerref_t{
    int pos; // 10b.
    int len; // 7b.
};
// Represents a bank object.
struct imperial_bank_t{
    // PRIVATE
    // The low level bank file I/O occurs with.
    bank file;
    // The owner identity string.
    string owners;
    // The account key.
    imperial_bank_key_t key;
    // The number of times the bank has been saved.
    // This member is used to give a different header result each time.
    int savenum; // 18b.
    // The number of bit field blocks stored in the bank.
    int blocknum; // 10b.
    // The current owner index.
    int loadowner; // 4b.
    // How many accounts the bank is attached to.
    int accountn; // 4b.
    // The positions of accounts in owner.
    imperial_bank_ownerref_t[16] accounts;
    // If the bank was authenticated.
    bool auth;
};
// PUBLIC FUNCTIONS
// Loads an existing bank, verifying it and returning if it is Imperial Bank formated.
bool ImperialBankLoad(structref<imperial_bank_t> obj, bank source);
// Query if the bank was authenticated.
bool ImperialBankValid(structref<imperial_bank_t> obj);
// Creates a new bank. All existing bank data will be lost.
// You must try to load an existing bank for this to work, even if the bank is not formated.
void ImperialBankClear(structref<imperial_bank_t> obj);
// Saves all changes made. Updating the Imperial Bank header.
// Do not save the bank directly as data may end up inconsistent.
bool ImperialBankSave(structref<imperial_bank_t> obj);
// Reads out from the specified block. The contents of out will be changed if the block exists.
bool ImperialBankRead(structref<imperial_bank_t> obj, string block, structref<bit_field_t> out);
// Writes in into the specified block. The contents of in will be changed if authenticated.
bool ImperialBankWrite(structref<imperial_bank_t> obj, string block, structref<bit_field_t> in);
// PRIVATE FUNCTIONS
// Generates the unique key for the header.
void ImperialBankHeaderKey(structref<imperial_bank_t> obj, arrayref<imperial_bank_key_t> key);
// Reads the bitfield header structure into imperial_bank_t.
// Also check if data is legal returning the results.
bool ImperialBankReadHeader(structref<imperial_bank_t> obj, structref<bit_field_t> block);
// Writes imperial_bank_t into the bitfield header structure.
void ImperialBankWriteHeader(structref<imperial_bank_t> obj, structref<bit_field_t> block);
// Reads a block from the specific section.
bool ImperialBankReadBlock(structref<imperial_bank_t> obj, string section, string block, arrayref<imperial_bank_key_t> key, structref<bit_field_t> out);
// Writes a block to the specific section.
void ImperialBankWriteBlock(structref<imperial_bank_t> obj, string section, string block, arrayref<imperial_bank_key_t> key, structref<bit_field_t> in);
// Generates the key required for encryption and decryption.
void ImperialBankCryptKey(arrayref<imperial_bank_key_t> key, arrayref<imperial_bank_key_t> key1, arrayref<imperial_bank_key_t> key2, arrayref<imperial_bank_key_t> key3);
// Encrypts/decrypts an entire block.
void ImperialBankBlockCrypt(arrayref<imperial_bank_key_t> key, structref<bit_field_t> block);
// Hashes an entire block.
void ImperialBankBlockHash(arrayref<imperial_bank_key_t> outkey, structref<bit_field_t> block);
// Returns if the provided block matches the returned hash.
bool ImperialBankBlockValidate(arrayref<imperial_bank_key_t> key, structref<bit_field_t> block);
// GLOBALS
// ASCII converter.
ascii_channel_t ImperialBankASCIIConverter;
int ImperialBankASCIIConverterRead(){
    return ASCIIChannelRead(ImperialBankASCIIConverter);
}
//
// IMPLEMENTATION
bool ImperialBankLoad(structref<imperial_bank_t> obj, bank source){
    string acc;
    int i;
    imperial_bank_key_t key;
    sha1_hasher_t hasher;
    bit_field_t header;
    // Always assume authentication failed.
    obj.auth = false;
    // Test if the bank actually exists.
    if( source == null ){ return false; }
    obj.file = source;
    BankOptionSet(source, c_bankOptionSignature, true);
    // Apply logical checks on the bank structure.
    // Imperial Bank only uses 2 sections.
    // These sections are "IBH" and "IBD".
    // The archive header section "IBH" has only two keys.
    // These keys are "ID" and "HEAD".
    // All types are strings.
    if( BankSectionCount(source) != 2 ||
      !BankSectionExists(source, "IBH") ||
      !BankSectionExists(source, "IBD") || 
      BankKeyCount(source, "IBH") != 2 ||
      !BankKeyExists(source, "IBH", "ID") ||
      !BankValueIsType(source, "IBH", "ID", c_bankTypeString) ||
      !BankKeyExists(source, "IBH", "HEAD") ||
      !BankValueIsType(source, "IBH", "HEAD", c_bankTypeString) ){ return false; }
    // Get the bank owners and current user.
    obj.owners = BankValueGetAsString(source, "IBH", "ID");
    acc = PlayerHandle(BankPlayer(source));
    // If there is no handle (SC2E test?) then set a dummy.
    if( acc == "" ){ acc = "SC2E-TEST-ACCOUNT"; }
    // Check generate the bank key, required for accessing all blocks.
    ASCIIChannelSetup(ImperialBankASCIIConverter, obj.owners);
    SHA1HasherHashData(hasher, ImperialBankASCIIConverterRead, ASCIIChannelLength(ImperialBankASCIIConverter));
    SHA1HasherHash(hasher, obj.key);
    // Setup the header key.
    ImperialBankHeaderKey(obj, key);
    // Read the header block.
    // If the block header fails to load correctly then the archive is corrupt.
    if( !ImperialBankReadBlock(obj, "IBH", "HEAD", key, header) ||
      !ImperialBankReadHeader(obj, header) ){ return false; }
    // If current user was the last user then run bank signature check.    
    if( StringSub(obj.owners, obj.accounts[obj.loadowner].pos, obj.accounts[obj.loadowner].pos + obj.accounts[obj.loadowner].len - 1) == acc ){
        obj.auth = BankVerify(source);
    }
    // Otherwise check if current user is in the identity list.
    else{
        for( i = 0 ; i < obj.accountn ; i+= 1 ){
            if( StringSub(obj.owners, obj.accounts[i].pos, obj.accounts[i].pos + obj.accounts[i].len - 1) == acc ){
                obj.loadowner = i;
                obj.auth = true;
                break;
            }
        }
    }
    // The bank has loaded sucessfully.
    return true;
}
bool ImperialBankValid(structref<imperial_bank_t> obj){
    return obj.auth;
}
void ImperialBankClear(structref<imperial_bank_t> obj){
    sha1_hasher_t hasher;
    // Remove all existing sections and enable verifification.
    while( BankSectionCount(obj.file) > 0 ){
        BankSectionRemove(obj.file, BankSectionName(obj.file, 0));
    }
    BankOptionSet(obj.file, c_bankOptionSignature, true);
    // Create sections.
    BankSectionCreate(obj.file, "IBD");
    BankSectionCreate(obj.file, "IBH");
    // Process account name.
    obj.owners = PlayerHandle(BankPlayer(obj.file));
    // If there is no handle (SC2E test?) then set a dummy.
    if( obj.owners == "" ){ obj.owners = "SC2E-TEST-ACCOUNT"; }
    BankValueSetFromString(obj.file, "IBH", "ID", obj.owners);
    obj.accountn = 1;
    obj.accounts[0].pos = 1;
    obj.accounts[0].len = StringLength(obj.owners);
    obj.loadowner = 0;
    // Generate account key.
    ASCIIChannelSetup(ImperialBankASCIIConverter, obj.owners);
    SHA1HasherHashData(hasher, ImperialBankASCIIConverterRead, ASCIIChannelLength(ImperialBankASCIIConverter));
    SHA1HasherHash(hasher, obj.key);
    // Initialize rest of imperial bank values.
    obj.savenum = 0;
    obj.blocknum = 0;
    obj.auth = true;
}
bool ImperialBankSave(structref<imperial_bank_t> obj){
    imperial_bank_key_t key;
    bit_field_t header;
    // Fail if user is not authenticated.
    if( !obj.auth ){ return false; }
    // Increment save counter.
    obj.savenum = (obj.savenum + 1) % (1 << 18);
    // Generate header.
    ImperialBankWriteHeader(obj, header);
    // Setup the header key.
    ImperialBankHeaderKey(obj, key);
    // Write out the header.
    ImperialBankWriteBlock(obj, "IBH", "HEAD", key, header);
    // Finally save the bank and return sucess.
    BankSave(obj.file);
    return true;
}
bool ImperialBankRead(structref<imperial_bank_t> obj, string block, structref<bit_field_t> out){
    sha1_hasher_t hasher;
    imperial_bank_key_t key;
    // Fail if user is not authenticated.
    if( !obj.auth ){ return false; }
    // Generate block unique key.
    ASCIIChannelSetup(ImperialBankASCIIConverter, block);
    SHA1HasherHashData(hasher, ImperialBankASCIIConverterRead, ASCIIChannelLength(ImperialBankASCIIConverter));
    SHA1HasherHash(hasher, key);
    // Read block and return result.
    return ImperialBankReadBlock(obj, "IBD", block, key, out);
}
bool ImperialBankWrite(structref<imperial_bank_t> obj, string block, structref<bit_field_t> in){
    sha1_hasher_t hasher;
    imperial_bank_key_t key;
    // Fail if user is not authenticated.
    if( !obj.auth ){ return false; }
    // If key does not exist, then add to counter.
    if( !BankKeyExists(obj.file, "IBD", block) ){
        obj.blocknum+= 1;
    }
    // Generate block unique key.
    ASCIIChannelSetup(ImperialBankASCIIConverter, block);
    SHA1HasherHashData(hasher, ImperialBankASCIIConverterRead, ASCIIChannelLength(ImperialBankASCIIConverter));
    SHA1HasherHash(hasher, key);
    // Write out block and return sucess.
    ImperialBankWriteBlock(obj, "IBD", block, key, in);
    return true;
}
void ImperialBankHeaderKey(structref<imperial_bank_t> obj, arrayref<imperial_bank_key_t> key){
    // A mixture of constants and generated values used to make cracking harder.
    key[0] = 0x12345678 ^ obj.key[3];
    key[1] = obj.key[0] ^ obj.key[4] ^ 0x7A8B9CAD;
    key[2] = 0x31415926;
    key[3] = obj.key[1] ^ obj.key[2] ^ 0x42184218;
    key[4] = 0x27182818;
}
bool ImperialBankReadHeader(structref<imperial_bank_t> obj, structref<bit_field_t> block){
    int i = 0;
    int temp = 0;
    // Start from the beginning of the block.
    BitFieldSeek(block, 0);
    // Check if the header is the required size.
    i = BitFieldGetSize(block);
    if( i < 42 ){ return false; }
    i-= 24;
    // Evaluate version field.
    // If version is newer then fail.
    // If version is older call porter functions in sequence.
    if( BitFieldRead(block, 6) > 0 ){ return false; }
    // Read in header section.
    obj.savenum = BitFieldRead(block, 18);
    obj.blocknum = BitFieldRead(block, 10);
    obj.loadowner = BitFieldRead(block, 4);
    obj.accountn = BitFieldRead(block, 4);
    // Read in account section.
    if( i < (obj.accountn * 17) ){ return false; }
    for( i = 0 ; i < obj.accountn ; i+= 1 ){
        obj.accounts[i].pos = BitFieldRead(block, 10);
        obj.accounts[i].len = BitFieldRead(block, 7);
    }
    // Evaluate header section for sense.
    // Number of blocks must match the number in the file.
    // The last user must be within the account range.
    if( BankKeyCount(obj.file, "IBD") != obj.blocknum ||
      obj.loadowner >= obj.accountn ){ return false; }
    // Evaluate account section for sense.
    // Each entry must start directly after the previous entry.
    // Each entry must have a size greater than 0.
    // The last entry must end the string.
    temp = 1;
    for( i = 0 ; i < obj.accountn ; i+= 1 ){
        if( obj.accounts[i].pos != temp ||
          obj.accounts[i].len == 0 ){ return false; }
        temp+= obj.accounts[i].len;
    }
    if( (temp - 1) != StringLength(obj.owners) ){ return false; }
    // Sucess.
    return true;
}
void ImperialBankWriteHeader(structref<imperial_bank_t> obj, structref<bit_field_t> block){
    int i = 0;
    // Initialize the bitfield.
    BitFieldInitialize(block, 42 + (obj.accountn * 17), false);
    // Write version.
    BitFieldWrite(block, 0, 6);
    // Write header section.
    BitFieldWrite(block, obj.savenum, 18);
    BitFieldWrite(block, obj.blocknum, 10);
    BitFieldWrite(block, obj.loadowner, 4);
    BitFieldWrite(block, obj.accountn, 4);
    // Write account section.
    for( i = 0 ; i < obj.accountn ; i+= 1 ){
        BitFieldWrite(block, obj.accounts[i].pos, 10);
        BitFieldWrite(block, obj.accounts[i].len, 7);
    }
}
bool ImperialBankReadBlock(structref<imperial_bank_t> obj, string section, string block, arrayref<imperial_bank_key_t> key, structref<bit_field_t> out){
    imperial_bank_key_t ekey;
    imperial_bank_key_t hkey;
    string s;
    int i;
    int end;
    // Check if key exists.
    if( !BankKeyExists(obj.file, section, block) ){ return false; }
    // Make sure it is a string, if not then de-register it for consistency.
    else if( !BankValueIsType(obj.file, section, block, c_bankTypeString) ){
        BankKeyRemove(obj.file, section, block);
        obj.blocknum-= 1;
        return false;
    }
    s = BankValueGetAsString(obj.file, section, block);
    end = StringLength(s);
    // Do not try reading in strings longer than supported.
    // Also do not try and read in strings that are not aligned within 1 character.
    if( (end * 6) > (BIT_FIELD_SIZE * 32 + 160) ||
      ((end * 6 - 160) % 128) >= 6 ){ return false; }
    // First read in the block hash (160 bits).
    BitFieldSetSize(out, 162);
    BitFieldSeek(out, 0);
    for( i = 1 ; i <= 27 ; i+= 1 ){
        BitFieldWrite(out, ASCIIUtilBase64ToInt(s, i), 6);
    }
    // Turn into the hash key.
    for( i = 0 ; i < 5 ; i+= 1 ){
        hkey[i] = BitFieldGet(out, i);
    }
    // Reclaim last 2 bits.
    BitFieldSet(out, BitFieldGet(out, 5), 0);
    BitFieldSeek(out, 2);
    // Determine output size.
    BitFieldSetSize(out, (((end * 6) - 160) / 128) * 128);
    // Read in all but the last character (which could overflow).
    for( i = 28 ; i < end ; i+= 1 ){
        BitFieldWrite(out, ASCIIUtilBase64ToInt(s, i), 6);
    }
    // Read in the last character.
    BitFieldWrite(out, ASCIIUtilBase64ToInt(s, end), BitFieldRemaining(out));
    // Compute the key and decrypt the block.
    ImperialBankCryptKey(ekey, obj.key, key, hkey);
    ImperialBankBlockCrypt(ekey, out);
    // Finally return if the data matches the checksum.
    return ImperialBankBlockValidate(hkey, out);
}
void ImperialBankWriteBlock(structref<imperial_bank_t> obj, string section, string block, arrayref<imperial_bank_key_t> key, structref<bit_field_t> in){
    imperial_bank_key_t ekey;
    imperial_bank_key_t hkey;
    string s;
    string h;
    int i;
    int end;
    // Resize in to be a multiple of 128 bits.
    BitFieldResize(in, ((BitFieldGetSize(in) + 127) & ((-1) << 7)));
    // Generate the block hash.
    ImperialBankBlockHash(hkey, in);
    // Generate the encryption key and encrypt the block.
    ImperialBankCryptKey(ekey, obj.key, key, hkey);
    ImperialBankBlockCrypt(ekey, in);
    // Skip writing first 2 bits for now, they get tagged along with the hash.
    s = "";
    BitFieldSeek(in, 2);
    // Write out all but the last character (which may need padding).
    end = BitFieldRemaining(in) / 6;
    for( i = 0 ; i < end ; i+= 1 ){
        s+= ASCIIUtilIntToBase64(BitFieldRead(in, 6));
    }
    // Write out the remaining sub-character if exists.
    // Pad with apparently random garbage obtained from the hash.
    // Random int cannot be used to pad because people will easilly notice those bits are random garbage.
    end = BitFieldRemaining(in);
    if( end > 0 ){ 
        s+= ASCIIUtilIntToBase64(BitFieldRead(in, end) | ((hkey[2] << end) & 0x3F));
    }
    // Prepare for writing out the hash.
    BitFieldSetSize(in, 162);
    BitFieldSeek(in, 0);
    // Append first 2 bits to end of hash.
    BitFieldSet(in, BitFieldGet(in, 0), 5);
    // Write the hash.
    for( i = 0 ; i < 5 ; i+= 1 ){
        BitFieldSet(in, hkey[i], i);
    }
    // Encode the hash string
    h = "";
    for( i = 0 ; i < 27 ; i+= 1 ){
        h+= ASCIIUtilIntToBase64(BitFieldRead(in, 6));
    }
    // Write out the final string result to the bank.
    BankValueSetFromString(obj.file, section, block, h + s);
}
void ImperialBankCryptKey(arrayref<imperial_bank_key_t> key, arrayref<imperial_bank_key_t> key1, arrayref<imperial_bank_key_t> key2, arrayref<imperial_bank_key_t> key3){
    // Compute the encryption key.
    // This is the field sumation of various other keys.
    // Do strange and different things here to make the key unqiue.
    key[0] = key1[1] ^ key2[2] ^ ((key3[3] << 13) | ((key3[3] >> 19) & 0x1FFF));
    key[1] = key1[3] ^ key2[0] ^ key3[0];
    key[2] = key1[0] ^ key2[3] ^ key3[2];
    key[3] = key1[2] ^ key2[1] ^ key3[4];
    key[4] = key1[4] ^ key2[4] ^ key3[1];
}
void ImperialBankBlockCrypt(arrayref<imperial_bank_key_t> key, structref<bit_field_t> block){
    aes_encryption_t crypt;
    aes_encryption_block_t eblock;
    int i;
    int end;
    int ckey;
    // Construct the compact key and setup the encryption.
    ckey = key[0] ^ key[1] ^ key[2] ^ key[3] ^ key[4];
    AESEncryptionSetup(crypt, key);
    // Perform cryption of entire block.
    end = BitFieldGetSize(block) / 32;
    i = 0;
    while( i < end ){
        // Fill the encryption block with unique garbage.
        eblock[0] = i;
        eblock[1] = ~i;
        eblock[2] = i ^ ckey;
        eblock[3] = (-i) ^ ckey;
        // Encrypt this garbage. Inverse could be used but slower.
        AESEncryptionCipher(crypt, eblock);
        // Now use the encrypted garbage to scramble the block.
        // Works because xor operations are their own inverse.
        // Offset the used words to further confuse people.
        BitFieldSet(block, BitFieldGet(block, i) ^ eblock[1], i);
        i+= 1;
        BitFieldSet(block, BitFieldGet(block, i) ^ eblock[2], i);
        i+= 1;
        BitFieldSet(block, BitFieldGet(block, i) ^ eblock[3], i);
        i+= 1;
        BitFieldSet(block, BitFieldGet(block, i) ^ eblock[0], i);
        i+= 1;
    }
}
void ImperialBankBlockHash(arrayref<imperial_bank_key_t> outkey, structref<bit_field_t> block){
    sha1_hasher_t hasher;
    sha1_hasher_block_t hashblock;
    int i;
    int end;
    int j;
    int eob;
    // Initialize hash and determine block size.
    SHA1HasherInitalize(hasher);
    end = BitFieldGetSize(block) / 32;
    // Hash the block.
    while( i < end ){
        // Determine how much to copy.
        eob = end - i;
        if( eob > 16 ){ eob = 16; }
        // Copy block.
        for( j = 0 ; j < eob ; j+= 1 ){
            hashblock[j] = BitFieldGet(block, i);
            i+= 1;
        }
        // Hash the block.
        SHA1HasherProcess(hasher, hashblock);
    }
    // Now finish the hash and copy out.
    SHA1HasherProcessFinal(hasher, hashblock, end * 4);
    SHA1HasherHash(hasher, outkey);
}
bool ImperialBankBlockValidate(arrayref<imperial_bank_key_t> key, structref<bit_field_t> block){
    imperial_bank_key_t hash;
    int i;
    bool result;
    // Get the block hash.
    ImperialBankBlockHash(hash, block);
    // Test it for equality.
    result = true;
    for( i = 0 ; i < 5 ; i+= 1 ){
        result = result && (key[i] == hash[i]);
    }
    // Return the result of the comparisons.
    return result;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Player Bank
//--------------------------------------------------------------------------------------------------
// ASCII converter.
ascii_channel_t PlayerBankImportConverter;
int PlayerBankImportConverterRead(){
    return ASCIIChannelRead(PlayerBankImportConverter);
}
string PlayerBankImportConverterSignature(string s){
    sha1_hasher_t hasher;
    imperial_bank_key_t hash;
    // Generate signature.
    ASCIIChannelSetup(PlayerBankImportConverter, s);
    SHA1HasherHashData(hasher, PlayerBankImportConverterRead, ASCIIChannelLength(PlayerBankImportConverter));
    SHA1HasherHash(hasher, hash);
    return ASCIIUtilIntToHex(hash[0]) + ASCIIUtilIntToHex(hash[1]) + ASCIIUtilIntToHex(hash[2]) + ASCIIUtilIntToHex(hash[3]) + ASCIIUtilIntToHex(hash[4]);;
}
imperial_bank_t[16] PlayerBanks;
// Save structure bit allocation.
// version : 8
// from import : 2
// experiences : 60
// games played total : 16
// revives : 20
// game time : 16
// dialog pos : 24
// camos : 17
// decalls : 10
// sis : 23
// medals : 13
// games won : 128
// TOTAL : 337 bits (3 * 128 blocks)
void PlayerBankNew(int player){
    ImperialBankClear(PlayerBanks[player]);
}
bool PlayerBankLoad(int player){
    bit_field_t block;
    int i;
    int ver;
    int len;
    // Test if the bank is valid.
    if( !ImperialBankLoad(PlayerBanks[player], gv_banks[player]) ){ return false; }
    // Prepare for loading.
    BitFieldInitialize(block, 32, false);
    // Try and load the data.
    if( !ImperialBankRead(PlayerBanks[player], "UA3", block) ){ return false; }
    BitFieldSeek(block, 0);
    //init length
    len = BitFieldGetSize(block);
    //init version
    ver = BitFieldRead(block, 8);
    // Process version.
    if( ver > 1 ){ return false; }
     // Size validation.
    if( len != 384 ){ return false; }
    // Size validation.
    //if( BitFieldGetSize(block) != 384 ){ return false; }
    // Process version.
    //if( BitFieldRead(block, 8) > 0 ){ return false; }
    // Process import tracking.
    gv_playerImportedFromUA3[player] = BitFieldRead(block, 2);
    // Load rank experience.
    for( i = 1 ; i <= 3 ; i+= 1 ){
        gv_playerExperience[i][player] = BitFieldRead(block, 20);
    }
    gv_playerStartingXP[player] = gv_playerExperience[1][player]; // ???
    // Load player stats.
    gv_playerGamesPlayed[player] = BitFieldRead(block, 16);
    gv_playerRevives[player] = BitFieldRead(block, 20);
    gv_playerAvgGameTime[player] = BitFieldRead(block, 16);
    // Load player control offsets, they are stored as offset numbers.
    gv_funcdialogoffsets[1][player] = BitFieldRead(block, 12) - 2048;
    gv_funcdialogoffsets[2][player] = BitFieldRead(block, 12) - 2048;
    // Load non-default cammos.
    for( i = 2 ; i <= gv_camos ; i+= 1 ){
        gv_playercamounlocked[i][player] = BitFieldRead(block, 1) != 0;
    }
    // Load decals.
    for( i = 1 ; i <= gv_decals ; i+= 1 ){
        gv_playerdecalunlocked[i][player] = BitFieldRead(block, 1) != 0;
    }
    // Load SIs.
    for( i = 1 ; i <= gv_sIcount ; i+= 1 ){
        gv_sIunlocked[i][player] = BitFieldRead(block, 1) != 0;
    }
    // Load medals.
    for( i = 1 ; i <= gv_medalscount ; i+= 1 ){
        gv_medalsunlocked[i][player] = BitFieldRead(block, 1) != 0;
    }
    // Load games won.
    for( i = 1 ; i <= 8 ; i+= 1 ){
        gv_gamesWon[i][player] = BitFieldRead(block, 16);
    }
    // Any version greater than ver. 0 loads player selected camo/decals.
    if( ver > 0 ) {
    
    // Load Selected Camo.
    gv_playerCurrentCamo[player] = BitFieldRead(block, 16);
    
    // Load Selected Decal.
    gv_playerCurrentDecal[player] = BitFieldRead(block, 16);
    
    }
   
    return true;
}
int PlayerBankClampInt(int in, int len){
    int max;
    if( in < 0 ){ return 0; }
    max = (~((-1) << len));
    if( in > max ){ return max; }
    return in;
}
void PlayerBankWriteBool(structref<bit_field_t> block, bool val){
    if( val ){ BitFieldWrite(block, 1, 1); }
    else{ BitFieldWrite(block, 0, 1); }
}
bool PlayerBankSave(int player){
    bit_field_t block;
    int i;
    // Make sure bank is valid;
    if( !ImperialBankValid(PlayerBanks[player]) ){
        ImperialBankClear(PlayerBanks[player]);
    }
    // Prepare for saveing.
    BitFieldInitialize(block, 384, false);
    BitFieldSeek(block, 0);
    // Write version. Version updated to ver 1.
    BitFieldWrite(block, 1, 8);
    // Write import status.
    BitFieldWrite(block, gv_playerImportedFromUA3[player], 2);
    // Write rank experience.
    for( i = 1 ; i <= 3 ; i+= 1 ){
        BitFieldWrite(block, PlayerBankClampInt(gv_playerExperience[i][player], 20), 20);
    }
    // Write player stats.
    BitFieldWrite(block, PlayerBankClampInt(gv_playerGamesPlayed[player], 16), 16);
    BitFieldWrite(block, PlayerBankClampInt(gv_playerRevives[player], 20), 20);
    BitFieldWrite(block, PlayerBankClampInt(gv_playerAvgGameTime[player], 16), 16);
    // Write player control offsets, they are stored as offset numbers.
    BitFieldWrite(block, PlayerBankClampInt(gv_funcdialogoffsets[1][player] + 2048, 12), 12);
    BitFieldWrite(block, PlayerBankClampInt(gv_funcdialogoffsets[2][player] + 2048, 12), 12);
    // Write non-default cammos.
    for( i = 2 ; i <= gv_camos ; i+= 1 ){
        PlayerBankWriteBool(block, gv_playercamounlocked[i][player]);
    }
    // Write decals.
    for( i = 1 ; i <= gv_decals ; i+= 1 ){
        PlayerBankWriteBool(block, gv_playerdecalunlocked[i][player]);
    }
    // Write SIs.
    for( i = 1 ; i <= gv_sIcount ; i+= 1 ){
        PlayerBankWriteBool(block, gv_sIunlocked[i][player]);
    }
    // Write medals.
    for( i = 1 ; i <= gv_medalscount ; i+= 1 ){
        PlayerBankWriteBool(block, gv_medalsunlocked[i][player]);
    }
    // Write games won.
    for( i = 1 ; i <= 8 ; i+= 1 ){
        BitFieldWrite(block, PlayerBankClampInt(gv_gamesWon[i][player], 16), 16);
    }
    // Write selected camo
    BitFieldWrite(block, PlayerBankClampInt(gv_playerCurrentCamo[player], 16), 16);
    
    // Write selected decal
    BitFieldWrite(block, PlayerBankClampInt(gv_playerCurrentDecal[player], 16), 16);
    
    // Write out block. Should always succeed
    if( !ImperialBankWrite(PlayerBanks[player], "UA3", block) ){ return false; }
    return ImperialBankSave(PlayerBanks[player]);
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    ASCIIUtilInit();
    AESEncryptionInit();
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_CreateDialogItemInPanelImage (int lp_panel, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_image, int lp_imageType, bool lp_tiled, color lp_tintColor, int lp_blendMode) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanel(lp_panel, c_triggerControlTypeImage);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lv_dialogitem, lp_image, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(lv_dialogitem, lp_imageType, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(lv_dialogitem, lp_tiled, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lv_dialogitem, lp_tintColor, PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(lv_dialogitem, lp_blendMode, PlayerGroupAll());
    return lv_dialogitem;
}

int gf_CreateDialogItemInPanelLabel (int lp_panel, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_text, color lp_color, bool lp_textWriteout, fixed lp_textWriteoutDuration) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanel(lp_panel, c_triggerControlTypeLabel);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemText(lv_dialogitem, lp_text, PlayerGroupAll());
    if ((lp_color != ColorWithAlpha(0,0,0,0))) {
        libNtve_gf_SetDialogItemColor(lv_dialogitem, lp_color, PlayerGroupAll());
    }

    libNtve_gf_SetDialogItemTextWriteout(lv_dialogitem, lp_textWriteout, PlayerGroupAll());
    if ((lp_textWriteout == true)) {
        libNtve_gf_SetDialogItemTextWriteoutDuration(lv_dialogitem, lp_textWriteoutDuration, PlayerGroupAll());
    }

    return lv_dialogitem;
}

fixed gf_RandomGaussianReal (fixed lp_expectedValue, fixed lp_variance) {
    // Variable Declarations
    fixed lv_u;
    fixed lv_v;
    fixed lv_s;
    fixed lv_c;

    // Variable Initialization
    lv_u = RandomFixed(-1.0, 1.0);
    lv_v = RandomFixed(-1.0, 1.0);
    lv_s = ((lv_u * lv_u) + (lv_v * lv_v));

    // Implementation
    while (((lv_s == 0.0) || (lv_s >= 1.0))) {
        lv_u = RandomFixed(-1.0, 1.0);
        lv_v = RandomFixed(-1.0, 1.0);
        lv_s = ((lv_u * lv_u) + (lv_v * lv_v));
    }
    lv_c = SquareRoot(((-2.0 * (Log2(lv_s) / Log2(2.7183))) / lv_s));
    return (lp_expectedValue + (lp_variance * (lv_u * lv_s)));
}

void gf_PlaySoundOnUnitForRelevant (unit lp_unit, soundlink lp_sound) {
    playergroup auto12598AEB_g;
    int auto12598AEB_p;

    // Variable Declarations
    int lv_owner;
    playergroup lv_nearby;
    playergroup lv_control;
    int lv_player;

    // Variable Initialization
    lv_owner = UnitGetOwner(lp_unit);
    lv_nearby = PlayerGroupAlliance(c_playerGroupAlly, lv_owner);
    lv_control = PlayerGroupSingle(lv_owner);

    // Implementation
    auto12598AEB_g = lv_nearby; 
    auto12598AEB_p = 1;
    for ( ; auto12598AEB_p <= PlayerGroupCount(auto12598AEB_g) ; auto12598AEB_p += BoolToInt(lv_player == PlayerGroupPlayer(auto12598AEB_g, auto12598AEB_p)) ) {
        lv_player = PlayerGroupPlayer(auto12598AEB_g, auto12598AEB_p);
        if ((PlayerGetAlliance(lv_owner, c_allianceIdControl, lv_player) == true)) {
            PlayerGroupAdd(lv_control, lv_player);
        }

    }
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_control, lv_nearby);
    SoundPlayOnUnit(lp_sound, lv_nearby, lp_unit, 0.0, 100.0, 0.0);
    SoundPlay(lp_sound, lv_control, 100.0, 0.0);
}

text gf_TextWithStyle (text lp_text, string lp_style) {
    // Implementation
    return (StringExternal("Param/Value/5636887D") + StringToText((lp_style)) + StringExternal("Param/Value/C388D8D9") + lp_text + StringExternal("Param/Value/7D9561D0"));
}

void gf_AddTimeToTimer (timer lp_timer, fixed lp_additionalTime) {
    // Implementation
    TimerStart(lp_timer, (TimerGetRemaining(lp_timer) + lp_additionalTime), false, c_timeGame);
}

void gf_ReduceTimeOfTimer (timer lp_timer, fixed lp_reductionTime) {
    // Implementation
    TimerStart(lp_timer, (TimerGetRemaining(lp_timer) - lp_reductionTime), false, c_timeGame);
}

bool gf_CallbackIsRunning (string lp_name) {
    // Variable Declarations
    string lv_path;

    // Variable Initialization
    lv_path = ("Callbacks/" + lp_name + "/Running");

    // Implementation
    return (DataTableValueExists(true, lv_path) && DataTableGetBool(true, lv_path));
}

int gf_CallbackTriggeringPlayer (string lp_name) {
    // Implementation
    return DataTableGetInt(true, ("Callbacks/" + lp_name + "/Player"));
}

unit gf_CallbackParameterUnit (string lp_name, int lp_index) {
    // Implementation
    return DataTableGetUnit(true, ("Callbacks/" + lp_name + "/Parameter" + IntToString(lp_index)));
}

int gf_CallbackParameterInteger (string lp_name, int lp_index) {
    // Implementation
    return DataTableGetInt(true, ("Callbacks/" + lp_name + "/Parameter" + IntToString(lp_index)));
}

void gf_RegisterCallback (trigger lp_trigger, string lp_name) {
    int auto98F97D56_ae;
    int auto98F97D56_ai;

    // Variable Declarations
    string lv_path;
    int lv_index;
    int lv_count;

    // Variable Initialization
    lv_path = ("Callbacks/" + lp_name);
    lv_count = DataTableGetInt(true, (lv_path + "/Count"));

    // Implementation
    auto98F97D56_ae = (lv_count - 1);
    auto98F97D56_ai = 1;
    lv_index = 0;
    for ( ; ( (auto98F97D56_ai >= 0 && lv_index <= auto98F97D56_ae) || (auto98F97D56_ai <= 0 && lv_index >= auto98F97D56_ae) ) ; lv_index += auto98F97D56_ai ) {
        if ((DataTableGetTrigger(true, (lv_path + "/Trigger" + IntToString(lv_index))) == lp_trigger)) {
            return ;
        }

    }
    DataTableSetTrigger(true, (lv_path + "/Trigger" + IntToString(lv_index)), lp_trigger);
    DataTableSetInt(true, (lv_path + "/Count"), (lv_count + 1));
}

void gf_RegisterCallbackPlayer (trigger lp_trigger, string lp_name, int lp_player) {
    // Variable Declarations
    string lv_path;
    int lv_mask;
    int lv_index;
    int lv_count;

    // Variable Initialization
    lv_path = ("Callbacks/" + lp_name);
    lv_count = DataTableGetInt(true, (lv_path + "/Count"));

    // Implementation
    if ((lp_player != c_playerAny)) {
        lv_mask = (1 << lp_player);
    }
    else {
        lv_mask = 0xFFFFFF;
    }
    while ((lv_index < lv_count) && (lv_mask != 0)) {
        if ((DataTableGetTrigger(true, (lv_path + "/Trigger" + IntToString(lv_index))) == lp_trigger)) {
            lv_mask &= (~DataTableGetInt(true, (lv_path + "/Mask" + IntToString(lv_index))));
        }

        lv_index += 1;
    }
    if ((lv_mask != 0)) {
        DataTableSetTrigger(true, (lv_path + "/Trigger" + IntToString(lv_index)), lp_trigger);
        DataTableSetInt(true, (lv_path + "/Mask" + IntToString(lv_index)), lv_mask);
        DataTableSetInt(true, (lv_path + "/Count"), (lv_count + 1));
    }

}

void gf_RunCallback (string lp_name) {
    int autoE6844589_ae;
    int autoE6844589_ai;

    // Variable Declarations
    string lv_path;
    int lv_index;

    // Variable Initialization
    lv_path = ("Callbacks/" + lp_name);

    // Implementation
    DataTableSetBool(true, (lv_path + "/Running"), true);
    autoE6844589_ae = (DataTableGetInt(true, (lv_path + "/Count")) - 1);
    autoE6844589_ai = 1;
    lv_index = 0;
    for ( ; ( (autoE6844589_ai >= 0 && lv_index <= autoE6844589_ae) || (autoE6844589_ai <= 0 && lv_index >= autoE6844589_ae) ) ; lv_index += autoE6844589_ai ) {
        TriggerExecute(DataTableGetTrigger(true, (lv_path + "/Trigger" + IntToString(lv_index))), true, false);
    }
    DataTableSetBool(true, (lv_path + "/Running"), false);
}

void gf_RunCallbackPlayer (string lp_name, int lp_player) {
    int autoF0866318_ae;
    int autoF0866318_ai;

    // Variable Declarations
    string lv_path;
    int lv_index;

    // Variable Initialization
    lv_path = ("Callbacks/" + lp_name);

    // Implementation
    DataTableSetBool(true, (lv_path + "/Running"), true);
    DataTableSetInt(true, (lv_path + "/Player"), lp_player);
    autoF0866318_ae = (DataTableGetInt(true, (lv_path + "/Count")) - 1);
    autoF0866318_ai = 1;
    lv_index = 0;
    for ( ; ( (autoF0866318_ai >= 0 && lv_index <= autoF0866318_ae) || (autoF0866318_ai <= 0 && lv_index >= autoF0866318_ae) ) ; lv_index += autoF0866318_ai ) {
        if ((((1 << lp_player) & DataTableGetInt(true, (lv_path + "/Mask" + IntToString(lv_index)))) != 0)) {
            TriggerExecute(DataTableGetTrigger(true, (lv_path + "/Trigger" + IntToString(lv_index))), true, false);
        }

    }
    DataTableValueRemove(true, (lv_path + "/Player"));
    DataTableSetBool(true, (lv_path + "/Running"), false);
}

void gf_SetCallbackParameterInteger (string lp_name, int lp_index, int lp_value) {
    // Implementation
    DataTableSetInt(true, ("Callbacks/" + lp_name + "/Parameter" + IntToString(lp_index)), lp_value);
}

void gf_SetCallbackParameterUnit (string lp_name, int lp_index, unit lp_value) {
    // Implementation
    DataTableSetUnit(true, ("Callbacks/" + lp_name + "/Parameter" + IntToString(lp_index)), lp_value);
}

void gf_RegisterDialogItemIsUsedEvent (trigger lp_trigger, int lp_item, int lp_player, int lp_eventType) {
    // Implementation
    TriggerAddEventDialogControl(lp_trigger, lp_player, lp_item, lp_eventType);
}

void gf_RegisterMouseClickedEvent (trigger lp_trigger, int lp_player, int lp_mouseButton, bool lp_down) {
    // Implementation
    TriggerAddEventMouseClicked(lp_trigger, lp_player, lp_mouseButton, lp_down);
}

void gf_RegisterUnitBecomesIdleEvent (trigger lp_trigger, unit lp_unit, bool lp_idleState) {
    // Implementation
    TriggerAddEventUnitBecomesIdle(lp_trigger, UnitRefFromUnit(lp_unit), lp_idleState);
}

void gf_RegisterUnitBehaviorChanges (trigger lp_trigger, unit lp_unit, string lp_behavior, int lp_type) {
    // Implementation
    TriggerAddEventUnitBehaviorChange(lp_trigger, UnitRefFromUnit(lp_unit), lp_behavior, lp_type);
}

void gf_RegisterUnitDiesEvent (trigger lp_trigger, unit lp_unit) {
    // Implementation
    TriggerAddEventUnitDied(lp_trigger, UnitRefFromUnit(lp_unit));
}

void gf_RegisterUnitEntersLeavesRangeOfUnit (trigger lp_trigger, unit lp_unit, bool lp_state, fixed lp_range, unit lp_fromUnit) {
    // Implementation
    TriggerAddEventUnitRange(lp_trigger, UnitRefFromUnit(lp_unit), lp_fromUnit, lp_range, lp_state);
}

void gf_RegisterUnitEntersLeavesRegion (trigger lp_trigger, unit lp_unit, region lp_region, bool lp_state) {
    // Implementation
    TriggerAddEventUnitRegion(lp_trigger, UnitRefFromUnit(lp_unit), lp_region, lp_state);
}

void gf_RegisterUnitEntersLeavesPoint (trigger lp_trigger, unit lp_unit, point lp_point, fixed lp_distance, bool lp_state) {
    // Implementation
    TriggerAddEventUnitRangePoint(lp_trigger, UnitRefFromUnit(lp_unit), lp_point, lp_distance, lp_state);
}

void gf_RegisterUnitIsSelectedEvent (trigger lp_trigger, unit lp_unit, bool lp_selectState, int lp_player) {
    // Implementation
    TriggerAddEventUnitSelected(lp_trigger, UnitRefFromUnit(lp_unit), lp_player, lp_selectState);
}

void gf_RegisterUnitResearchProgress (trigger lp_trigger, unit lp_unit, int lp_stage) {
    // Implementation
    TriggerAddEventUnitResearchProgress(lp_trigger, UnitRefFromUnit(lp_unit), lp_stage);
}

void gf_RegisterUnitTakesDamageEvent (trigger lp_trigger, unit lp_unit, int lp_damageFatalOption, int lp_damageType, string lp_damageEffect) {
    // Implementation
    TriggerAddEventUnitDamaged(lp_trigger, UnitRefFromUnit(lp_unit), lp_damageType, lp_damageFatalOption, lp_damageEffect);
}

void gf_RegisterUnitUsesAbilityEvent (trigger lp_trigger, unit lp_unit, abilcmd lp_ability, int lp_stage, bool lp_includeSharedAbilities) {
    // Implementation
    TriggerAddEventUnitAbility(lp_trigger, UnitRefFromUnit(lp_unit), lp_ability, lp_stage, lp_includeSharedAbilities);
}

void gf_EnableDisableAllCommandTypes (bool lp_enableDisable, playergroup lp_players) {
    // Implementation
    UISetCommandAllowed(lp_players, c_uiCommandAllowButtons, lp_enableDisable);
    UISetCommandAllowed(lp_players, c_uiCommandAllowHotkeys, lp_enableDisable);
    UISetCommandAllowed(lp_players, c_uiCommandAllowInfoPanel, lp_enableDisable);
    UISetCommandAllowed(lp_players, c_uiCommandAllowMinimap, lp_enableDisable);
    UISetCommandAllowed(lp_players, c_uiCommandAllowModifiers, lp_enableDisable);
    UISetCommandAllowed(lp_players, c_uiCommandAllowPings, lp_enableDisable);
    UISetCommandAllowed(lp_players, c_uiCommandAllowSmartClick, lp_enableDisable);
}

void gf_DropAllItemsImmediate (unit lp_dropper, fixed lp_spread) {
    unitgroup autoDFF9F66C_g;
    int autoDFF9F66C_u;

    // Variable Declarations
    unit lv_u;
    point lv_pos;
    point lv_pos2;
    int lv_i;

    // Variable Initialization
    lv_pos = UnitGetPosition(lp_dropper);

    // Implementation
    autoDFF9F66C_g = UnitInventoryGroup(lp_dropper);
    autoDFF9F66C_u = 1;
    for ( ; autoDFF9F66C_u <= UnitGroupCount(autoDFF9F66C_g, c_unitCountAll) ; autoDFF9F66C_u += BoolToInt(lv_u == UnitGroupUnit(autoDFF9F66C_g, autoDFF9F66C_u)) ) {
        lv_u = UnitGroupUnit(autoDFF9F66C_g, autoDFF9F66C_u);
        while ((lv_i < 16)) {
            lv_pos2 = PointWithOffset(lv_pos, RandomFixed(((-lp_spread)), lp_spread), RandomFixed(((-lp_spread)), lp_spread));
            if ((PointPathingIsConnected(lv_pos, lv_pos2) == true)) {
                break;
            }

            lv_pos2 = null;
            lv_i += 1;
        }
        if ((lv_pos2 == null)) {
            lv_pos2 = lv_pos;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(lv_u), 0, UnitGetOwner(lv_u), lv_pos2);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, UnitGetPropertyFixed(lv_u, c_unitPropLifePercent, c_unitPropCurrent));
        UnitInventoryRemove(lv_u);
    }
}

int gf_CurrentLevelForHeroAbility (string lp_ability, unit lp_unit) {
    // Implementation
    if ((UnitAbilityCheck(lp_unit, lp_ability, true) == true)) {
        return UnitAbilityGetLevel(lp_unit, lp_ability);
    }

    return -1;
}

void gf_ForceAbilityCooldowns (unit lp_unit, abilcmd lp_abilityCommand, int lp_spendLocation) {
    // Implementation
    UnitAbilityReset(lp_unit, lp_abilityCommand, lp_spendLocation);
    UnitAbilitySpend(lp_unit, lp_abilityCommand, lp_spendLocation);
}

void gf_ChangeUnitHeightAtRate (unit lp_unit, fixed lp_height, fixed lp_rate) {
    // Implementation
    if ((lp_rate == 0.0)) {
        return ;
    }

    UnitSetHeight(lp_unit, lp_height, AbsF(((lp_height - UnitGetHeight(lp_unit)) / lp_rate)));
}

text gf_DebugUnitInfo (unit lp_u) {
    // Variable Declarations
    text lv_msg;
    int lv_owner;

    // Variable Initialization
    lv_msg = StringToText("");

    // Implementation
    lv_owner = UnitGetOwner(lp_u);
    lv_msg = StringExternal("Param/Value/AA4F3E34");
    lv_msg = (lv_msg + StringExternal("Param/Value/86BA8747") + IntToText(lv_owner) + StringExternal("Param/Value/C705D451"));
    lv_msg = (lv_msg + StringExternal("Param/Value/627A5432"));
    lv_msg = (lv_msg + IntToText(PlayerGetPropertyInt(lv_owner, c_playerPropMinerals)) + StringExternal("Param/Value/8BF74AE3"));
    lv_msg = (lv_msg + StringExternal("Param/Value/FAD2ADFE"));
    lv_msg = (lv_msg + IntToText(PlayerGetPropertyInt(lv_owner, c_playerPropVespene)) + StringExternal("Param/Value/7BD00A8D"));
    lv_msg = (lv_msg + StringExternal("Param/Value/11247B24"));
    lv_msg = (lv_msg + IntToText(PlayerGetPropertyInt(lv_owner, c_playerPropSuppliesUsed)) + StringToText(""));
    lv_msg = (lv_msg + StringExternal("Param/Value/8D280DEC"));
    lv_msg = (lv_msg + IntToText(MinI(PlayerGetPropertyInt(lv_owner, c_playerPropSuppliesMade), PlayerGetPropertyInt(lv_owner, c_playerPropSuppliesLimit))) + StringExternal("Param/Value/C06148D1"));
    lv_msg = (lv_msg + StringExternal("Param/Value/C541DCC3"));
    lv_msg = (lv_msg + UnitTypeGetName(UnitGetType(lp_u)));
    lv_msg = (lv_msg + StringExternal("Param/Value/EC932ED9"));
    lv_msg = (lv_msg + FixedToText(UnitGetPropertyFixed(lp_u, c_unitPropShields, c_unitPropCurrent), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/55617AFB"));
    lv_msg = (lv_msg + FixedToText(UnitGetPropertyFixed(lp_u, c_unitPropLife, c_unitPropCurrent), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/4FF40249"));
    lv_msg = (lv_msg + FixedToText(UnitGetPropertyFixed(lp_u, c_unitPropEnergy, c_unitPropCurrent), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/D5CF1C49"));
    lv_msg = (lv_msg + StringExternal("Param/Value/CFD59F9A"));
    lv_msg = (lv_msg + StringExternal("Param/Value/EB79E1C2"));
    lv_msg = (lv_msg + FixedToText(PointGetX(UnitGetPosition(lp_u)), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/E5CD43EA"));
    lv_msg = (lv_msg + FixedToText(PointGetY(UnitGetPosition(lp_u)), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/22E8DB64"));
    lv_msg = (lv_msg + FixedToText(UnitGetFacing(lp_u), 0));
    lv_msg = (lv_msg + StringExternal("Param/Value/AA53915D"));
    if ((libNtve_gf_UnitIsPaused(lp_u) == true)) {
        lv_msg = (lv_msg + StringExternal("Param/Value/27CAF22D"));
    }

    if ((libNtve_gf_UnitIsHidden(lp_u) == true)) {
        lv_msg = (lv_msg + StringExternal("Param/Value/CCD8CE44"));
    }

    if ((UnitIsAlive(lp_u) == false)) {
        lv_msg = (lv_msg + StringExternal("Param/Value/B1B37075"));
    }

    lv_msg = (lv_msg + StringExternal("Param/Value/A2868178"));
    return lv_msg;
}

void gf_MissionItemPingAddItem (unit lp_item) {
    // Variable Declarations
    int lv_ping;

    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Implementation
    if ((UnitGroupHasUnit(gv_missionItemPingItems, lp_item) == false)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lp_item), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        lv_ping = PingLastCreated();
        PingSetTooltip(lv_ping, UnitTypeGetName(UnitGetType(lp_item)));
        PingSetScale(lv_ping, 0.5);
        PingSetUnit(lv_ping, lp_item);
        libHots_gf_StorePingForUnit(lp_item, 1, lv_ping);
        UnitGroupAdd(gv_missionItemPingItems, lp_item);
    }

}

void gf_MissionItemPingRemoveItem (unit lp_item) {
    // Variable Declarations
    int lv_ping;

    // Variable Initialization
    lv_ping = libHots_gf_PingStoredForUnit(lp_item, 1);

    // Implementation
    if ((UnitGroupHasUnit(gv_missionItemPingItems, lp_item) == true)) {
        PingDestroy(lv_ping);
        UnitGroupRemove(gv_missionItemPingItems, lp_item);
    }

}

void gf_FailMission (int lp_xplost, text lp_mission, int lp_iLdelta) {
    int autoC50B9B43_ae;
    int autoC50B9B43_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_xplostmod;

    // Variable Initialization
    lv_xplostmod = FixedToInt((IntToFixed(lp_xplost) * gv_xpmodifier));

    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }

    if ((lp_xplost == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_mission);
    }
    else {
        gv_xPGained = (gv_xPGained - lv_xplostmod);
        gv_infestationLevel = (gv_infestationLevel + lp_iLdelta);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/13C1CF5B") + IntToText(lv_xplostmod) + StringExternal("Param/Value/B8FC9750")));
        autoC50B9B43_ae = 12;
        autoC50B9B43_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoC50B9B43_ai >= 0 && lv_loopint <= autoC50B9B43_ae) || (autoC50B9B43_ai <= 0 && lv_loopint >= autoC50B9B43_ae) ) ; lv_loopint += autoC50B9B43_ai ) {
            gv_playerExperience[gv_playerRankSet[lv_loopint]][lv_loopint] = (gv_playerExperience[gv_playerRankSet[lv_loopint]][lv_loopint] - lv_xplostmod);
        }
    }
}

void gf_FailMissionNew (text lp_mission, text lp_penalty) {
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/0A0B4B66") + lp_penalty));
}

void gf_SucceedMission (int lp_xp, text lp_mission, int lp_iLdelta) {
    int auto50BFC255_ae;
    int auto50BFC255_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_xpmod;
    int lv_oldxp;
    int lv_newxp;

    // Variable Initialization
    lv_xpmod = FixedToInt((IntToFixed(lp_xp) * gv_xpmodifier));

    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }

    if ((lp_xp == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lp_mission);
    }
    else {
        SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_xPGained = (gv_xPGained + lv_xpmod);
        gv_infestationLevel = (gv_infestationLevel + lp_iLdelta);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/DA322CE8") + IntToText(lv_xpmod) + StringExternal("Param/Value/CD1156B3")));
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                lv_oldxp = gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()];
                lv_newxp = (gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()] + lv_xpmod);
                auto50BFC255_ae = gv_sIcount;
                auto50BFC255_ai = 1;
                lv_loopint = 1;
                for ( ; ( (auto50BFC255_ai >= 0 && lv_loopint <= auto50BFC255_ae) || (auto50BFC255_ai <= 0 && lv_loopint >= auto50BFC255_ae) ) ; lv_loopint += auto50BFC255_ai ) {
                    if ((gv_sIunlocked[lv_loopint][PlayerGroupLoopCurrent()] == false) && (lv_newxp >= gv_sIXPminimum[gv_playerRankSet[PlayerGroupLoopCurrent()]][lv_loopint]) && (gv_sIXPminimum[gv_playerRankSet[PlayerGroupLoopCurrent()]][lv_loopint] > 0)) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaDebug, (gv_sIname[lv_loopint] + StringExternal("Param/Value/44DE00D8")));
                        gv_sIunlocked[lv_loopint][PlayerGroupLoopCurrent()] = true;
                    }

                }
                if ((lv_oldxp < gv_rankXPMin[gv_playerRankSet[PlayerGroupLoopCurrent()]][(gf_GetPlayerRank(PlayerGroupLoopCurrent()) + 1)]) && (lv_newxp >= gv_rankXPMin[gv_playerRankSet[PlayerGroupLoopCurrent()]][(gf_GetPlayerRank(PlayerGroupLoopCurrent()) + 1)])) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))) + StringExternal("Param/Value/81720FE5") + gv_rankPrefix[gv_playerRankSet[PlayerGroupLoopCurrent()]][(gf_GetPlayerRank(PlayerGroupLoopCurrent()) + 1)]));
                    libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[PlayerGroupLoopCurrent()], gv_rankActorMsg[gv_playerRankSet[PlayerGroupLoopCurrent()]][(gf_GetPlayerRank(PlayerGroupLoopCurrent()) + 1)]);
                    if ((lv_oldxp < gv_rankXPMin[1][7]) && (lv_newxp >= gv_rankXPMin[1][7])) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaDebug, StringExternal("Param/Value/6A6FC0E8"));
                        gv_playerExperience[2][PlayerGroupLoopCurrent()] = 1;
                        gv_playerExperience[3][PlayerGroupLoopCurrent()] = 1;
                    }

                }

                if ((gv_playerxphalved[PlayerGroupLoopCurrent()] == true)) {
                    gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()] = (gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()] + (lv_xpmod / 2));
                }
                else {
                    gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()] = (gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()] + lv_xpmod);
                }
            }

        }
        PlayerGroupLoopEnd();
    }
}

void gf_AwardPlayerXP (int lp_xp, text lp_mission, int lp_player) {
    int autoFE0E1EDD_ae;
    int autoFE0E1EDD_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_xpmod;
    int lv_oldxp;
    int lv_newxp;

    // Variable Initialization
    lv_xpmod = FixedToInt((IntToFixed(lp_xp) * gv_xpmodifier));

    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }

    if ((lp_xp == 0)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, lp_mission);
    }
    else {
        SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, (lp_mission + StringExternal("Param/Value/2EF97179") + IntToText(lv_xpmod) + StringExternal("Param/Value/2916D81F")));
        lv_oldxp = gv_playerExperience[gv_playerRankSet[lp_player]][lp_player];
        lv_newxp = (gv_playerExperience[gv_playerRankSet[lp_player]][lp_player] + lv_xpmod);
        autoFE0E1EDD_ae = gv_sIcount;
        autoFE0E1EDD_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoFE0E1EDD_ai >= 0 && lv_loopint <= autoFE0E1EDD_ae) || (autoFE0E1EDD_ai <= 0 && lv_loopint >= autoFE0E1EDD_ae) ) ; lv_loopint += autoFE0E1EDD_ai ) {
            if ((gv_sIunlocked[lv_loopint][lp_player] == false) && (lv_newxp >= gv_sIXPminimum[gv_playerRankSet[lp_player]][lv_loopint]) && (gv_sIXPminimum[gv_playerRankSet[lp_player]][lv_loopint] > 0)) {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, (gv_sIname[lv_loopint] + StringExternal("Param/Value/01F06C60")));
                gv_sIunlocked[lv_loopint][lp_player] = true;
            }

        }
        if ((lv_oldxp < gv_rankXPMin[gv_playerRankSet[lp_player]][(gf_GetPlayerRank(lp_player) + 1)]) && (lv_newxp >= gv_rankXPMin[gv_playerRankSet[lp_player]][(gf_GetPlayerRank(lp_player) + 1)])) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/21D422CE") + gv_rankPrefix[gv_playerRankSet[lp_player]][(gf_GetPlayerRank(lp_player) + 1)]));
            libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lp_player], gv_rankActorMsg[gv_playerRankSet[lp_player]][(gf_GetPlayerRank(lp_player) + 1)]);
            if ((lv_oldxp < gv_rankXPMin[1][7]) && (lv_newxp >= gv_rankXPMin[1][7])) {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDebug, StringExternal("Param/Value/5FF05981"));
                gv_playerExperience[2][lp_player] = 1;
                gv_playerExperience[3][lp_player] = 1;
            }

        }

        if ((gv_playerxphalved[lp_player] == true)) {
            gv_playerExperience[gv_playerRankSet[lp_player]][lp_player] = (gv_playerExperience[gv_playerRankSet[lp_player]][lp_player] + (lv_xpmod / 2));
        }
        else {
            gv_playerExperience[gv_playerRankSet[lp_player]][lp_player] = (gv_playerExperience[gv_playerRankSet[lp_player]][lp_player] + lv_xpmod);
        }
    }
}

void gf_InitVisorText () {
    int auto4306BD0D_ae;
    int auto4306BD0D_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Implementation
    auto4306BD0D_ae = 12;
    auto4306BD0D_ai = 1;
    lv_int = 1;
    for ( ; ( (auto4306BD0D_ai >= 0 && lv_int <= auto4306BD0D_ae) || (auto4306BD0D_ai <= 0 && lv_int >= auto4306BD0D_ae) ) ; lv_int += auto4306BD0D_ai ) {
        DialogCreate(600, 800, c_anchorRight, 0, -70, true);
        gv_visorTextDialog[lv_int] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_int), true);
        libNtve_gf_CreateDialogItemLabel(gv_visorTextDialog[lv_int], 600, 600, c_anchorBottom, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), true, 0.15);
        gv_visorText[lv_int] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AiurChefLeftSize20Bold", PlayerGroupAll());
    }
}

void gf_VisorTextDialog (text lp_text, int lp_player) {
    // Implementation
    SoundPlay(SoundLink("UI_TipSelect", -1), PlayerGroupSingle(lp_player), 100.0, 0.0);
    libNtve_gf_SetDialogItemText(gv_visorText[lp_player], lp_text, PlayerGroupSingle(lp_player));
    DialogControlFadeTransparency(gv_visorText[lp_player], PlayerGroupSingle(lp_player), 0.0, 0.0);
    TimerStart(gv_visorTextTimer[lp_player], 8.0, false, c_timeGame);
}

void gf_MissionText (text lp_text) {
    // Variable Declarations
    int lv_int;
    int lv_height;

    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("UI_TransmissionStart", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/B20E90B1") + lp_text));
}

void gf_TextChat (unit lp_unit, text lp_text) {
    // Implementation
    SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupAll(), lp_unit, 0.0, 100.0, 0.0);
    TextTagCreate(lp_text, 24, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), lp_unit, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
}

trigger auto_gf_SpawnItemLoc_Trigger = null;
string auto_gf_SpawnItemLoc_lp_item;
int auto_gf_SpawnItemLoc_lp_chance;
point auto_gf_SpawnItemLoc_lp_loc;

void gf_SpawnItemLoc (string lp_item, int lp_chance, point lp_loc) {
    auto_gf_SpawnItemLoc_lp_item = lp_item;
    auto_gf_SpawnItemLoc_lp_chance = lp_chance;
    auto_gf_SpawnItemLoc_lp_loc = lp_loc;

    if (auto_gf_SpawnItemLoc_Trigger == null) {
        auto_gf_SpawnItemLoc_Trigger = TriggerCreate("auto_gf_SpawnItemLoc_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnItemLoc_Trigger, false, false);
}

bool auto_gf_SpawnItemLoc_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_gf_SpawnItemLoc_lp_item;
    int lp_chance = auto_gf_SpawnItemLoc_lp_chance;
    point lp_loc = auto_gf_SpawnItemLoc_lp_loc;

    // Variable Declarations
    unit lv_droppod;

    // Variable Initialization

    // Implementation
    if ((RandomInt(1, lp_chance) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lp_loc);
        lv_droppod = UnitLastCreated();
        UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
        Wait(5.0, c_timeGame);
        UnitKill(lv_droppod);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lp_loc);
        Wait(2.0, c_timeGame);
        UnitRemove(lv_droppod);
    }

    return true;
}

void gf_SkipifOver () {
    // Implementation
    if ((gv_gameOver == true)) {
        return ;
    }

}

void gf_CreateDifficultyButtonLeft (int lp_difficulty, string lp_image) {
    // Implementation
    libNtve_gf_CreateDialogItemButton(gv_modedialog, 250, 120, c_anchorTop, -160, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 1.0);
    gv_modeitem[lp_difficulty] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -160, (100 + (lp_difficulty * 125)));
    libNtve_gf_CreateDialogItemImage(gv_modedialog, 250, 120, c_anchorTop, 0, 0, StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -160, (100 + (lp_difficulty * 125)));
}

void gf_CreateDifficultyButtonRight (int lp_difficulty, string lp_image) {
    // Implementation
    libNtve_gf_CreateDialogItemButton(gv_modedialog, 250, 120, c_anchorTop, 160, 0, StringToText(""), StringToText(""), "");
    gv_modeitem[lp_difficulty] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 160, (100 + ((lp_difficulty - 4) * 125)));
    libNtve_gf_CreateDialogItemImage(gv_modedialog, 250, 120, c_anchorTop, 0, 0, StringToText(""), lp_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 160, (100 + ((lp_difficulty - 4) * 125)));
    if ((lp_difficulty == 6)) {
        gv_competivemodeimage = DialogControlLastCreated();
    }

}

void gf_SetupRankSet (int lp_player, int lp_rankset) {
    // Implementation
    if ((lp_rankset == 1)) {
        gv_playerRankSet[lp_player] = 1;
        if ((gv_playerExperience[1][lp_player] >= gv_rankXPMin[1][8])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SFCEn", 1);
        }

        if ((gv_playerExperience[1][lp_player] >= gv_rankXPMin[1][11])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SGM", 1);
        }

        if ((gv_playerExperience[1][lp_player] >= gv_rankXPMin[1][12])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CSM", 1);
        }

    }
    else {
        if ((lp_rankset == 2)) {
            if ((gv_playerExperience[2][lp_player] >= 1)) {
                gv_playerRankSet[lp_player] = 2;
                gv_playerStartingXP[lp_player] = gv_playerExperience[2][lp_player];
                if ((gv_playerExperience[2][lp_player] >= gv_rankXPMin[2][2])) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WO2", 1);
                }

                if ((gv_playerExperience[2][lp_player] >= gv_rankXPMin[2][3])) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WO3", 1);
                }

                if ((gv_playerExperience[2][lp_player] >= gv_rankXPMin[2][5])) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WO5", 1);
                }

            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/92AC9F1C"));
                gv_playerRankSet[lp_player] = 1;
            }
        }
        else {
            if ((lp_rankset == 3)) {
                if ((gv_playerExperience[3][lp_player] >= 1)) {
                    gv_playerRankSet[lp_player] = 3;
                    gv_playerStartingXP[lp_player] = gv_playerExperience[3][lp_player];
                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][2])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "1LT", 1);
                    }

                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][3])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CPT", 1);
                    }

                    if ((gv_playerExperience[3][lp_player] >= gv_rankXPMin[3][8])) {
                        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MGEN", 1);
                    }

                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/8CF77DAB"));
                    gv_playerRankSet[lp_player] = 1;
                }
            }

        }
    }
}

bool gf_CheckVotes (int lp_mode) {
    int auto4971D538_ae;
    int auto4971D538_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Implementation
    auto4971D538_ae = gv_modetotal;
    auto4971D538_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto4971D538_ai >= 0 && lv_loopint <= auto4971D538_ae) || (auto4971D538_ai <= 0 && lv_loopint >= auto4971D538_ae) ) ; lv_loopint += auto4971D538_ai ) {
        if ((lp_mode != lv_loopint)) {
            if ((gv_modevote[lp_mode] < gv_modevote[lv_loopint])) {
                return false;
            }

        }

    }
    return true;
}

void gf_AIScatterFromPoint (point lp_point, fixed lp_radius) {
    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(lp_point, lp_radius), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Sprint") == false) && ((UnitGetCustomValue(UnitGroupLoopCurrent(), 2) >= 14.0) || (UnitGroupHasUnit(gv_sprinters, UnitGroupLoopCurrent()) == false))) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        }

        if ((PlayerType(UnitGetOwner(UnitGroupLoopCurrent())) == c_playerTypeComputer) && (UnitGetOwner(UnitGroupLoopCurrent()) != 14)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_point, (lp_radius + RandomFixed(1.0, 4.0)), AngleBetweenPoints(lp_point, UnitGetPosition(UnitGroupLoopCurrent())))), c_orderQueueAddToFront);
            if ((UnitGetOwner(UnitGroupLoopCurrent()) == 15) && (gv_gamemode == 8)) {
            }

        }

    }
    UnitGroupLoopEnd();
}

void gf_SpawnPMCSoldier (string lp_type, point lp_point, int lp_squad) {
    string autoF64ED282_val;

    // Implementation
    UnitCreate(1, lp_type, 0, 15, lp_point, libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_pMCSquads[lp_squad].lv_group, UnitLastCreated());
    UnitSetCustomValue(UnitLastCreated(), 4, lp_squad);
    UnitSetInfoText(UnitLastCreated(), (StringExternal("Param/Value/B7F11E43") + UnitTypeGetName(lp_type)), (StringExternal("Param/Value/8210E0FA") + UnitTypeGetName(lp_type)), StringToText(""));
    if ((UnitTypeTestAttribute(lp_type, c_unitAttributeBiological) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRA");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoRockAvalanche");
        UnitBehaviorAdd(UnitLastCreated(), "PMCExplosionReduction", UnitLastCreated(), 1);
        gf_RegisterUnitEntersLeavesRegion(gt_MissChance, UnitLastCreated(), RegionEntireMap(), true);
        gf_RegisterUnitUsesAbilityEvent(gt_PMCUseAbil, UnitLastCreated(), AbilityCommand("GroundFlareItem", 0), c_unitAbilStageComplete, false);
        gf_RegisterUnitUsesAbilityEvent(gt_PMCUseAbil, UnitLastCreated(), AbilityCommand("FlareGunItem", 0), c_unitAbilStageComplete, false);
    }
    else {
        if (((lp_type == "CombatWalker") || (lp_type == "BattleWalker"))) {
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRA");
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById CamoRockAvalanche");
        }

    }
    if ((lp_type == "SquadLeader")) {
        gv_pMCSquads[lp_squad].lv_squadLeader = UnitLastCreated();
        if ((RandomInt(0, 1) == 1)) {
            if ((RandomInt(0, 1) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "GroundFlareAIHero", UnitLastCreated(), 1);
            }
            else {
                UnitBehaviorAdd(UnitLastCreated(), "FlareGunAIHero", UnitLastCreated(), 1);
            }
        }

        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "BinocularAIHero", UnitLastCreated(), 1);
        }

    }
    else {
        if ((RandomInt(0, 3) == 1) && (UnitTypeTestAttribute(lp_type, c_unitAttributeBiological) == true)) {
            UnitBehaviorAdd(UnitLastCreated(), "FragAIGrouporHero", UnitLastCreated(), 1);
        }
        else {
            if ((RandomInt(0, 2) == 1)) {
                if ((RandomInt(0, 1) == 1)) {
                    UnitBehaviorAdd(UnitLastCreated(), "GroundFlareAIHero", UnitLastCreated(), 1);
                }
                else {
                    UnitBehaviorAdd(UnitLastCreated(), "FlareGunAIHero", UnitLastCreated(), 1);
                }
            }

        }
        if ((RandomInt(0, 3) == 1) && (UnitTypeTestAttribute(lp_type, c_unitAttributeBiological) == true)) {
            if ((RandomInt(0, 2) == 1)) {
                if ((RandomInt(0, 2) == 1)) {
                    UnitBehaviorAdd(UnitLastCreated(), "OPA", UnitLastCreated(), 1);
                }
                else {
                    UnitBehaviorAdd(UnitLastCreated(), "SPCS", UnitLastCreated(), 1);
                }
            }
            else {
                UnitBehaviorAdd(UnitLastCreated(), "KevlarBodyArmor", UnitLastCreated(), 1);
            }
        }

        if ((RandomInt(0, 3) == 1) && (UnitTypeTestAttribute(lp_type, c_unitAttributeBiological) == true) && (UnitAbilityExists(UnitLastCreated(), "MiniInventoryRifle") == true)) {
            if ((RandomInt(0, 1) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "HK42", UnitLastCreated(), 1);
            }
            else {
                UnitBehaviorAdd(UnitLastCreated(), "StynerBR2", UnitLastCreated(), 1);
            }
        }

        if ((RandomInt(0, 3) == 1) && (UnitTypeTestAttribute(lp_type, c_unitAttributeBiological) == true) && (UnitAbilityExists(UnitLastCreated(), "MiniInventoryMG") == true)) {
            if ((RandomInt(0, 1) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "M41SAW", UnitLastCreated(), 1);
            }
            else {
                UnitBehaviorAdd(UnitLastCreated(), "M241MMG", UnitLastCreated(), 1);
            }
        }

    }
    if ((UnitAbilityExists(UnitLastCreated(), "MiniInventoryRifle") == true) && (RandomInt(0, 3) == 1)) {
        UnitBehaviorAdd(UnitLastCreated(), "BurstFire", UnitLastCreated(), 1);
    }

    if ((UnitTypeTestAttribute(UnitGetType(UnitLastCreated()), c_unitAttributeBiological) == true) && (RandomInt(0, 3) == 1)) {
        UnitBehaviorAdd(UnitLastCreated(), "FlashlightReveal", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "Flashlight", UnitLastCreated(), 1);
    }

    if ((UnitTypeTestAttribute(UnitGetType(UnitLastCreated()), c_unitAttributeBiological) == true) && (RandomInt(0, 5) == 4)) {
        UnitBehaviorAdd(UnitLastCreated(), "AimAssist", UnitLastCreated(), 1);
    }

    autoF64ED282_val = lp_type;
    if (autoF64ED282_val == "68WCombatMedic") {
        UnitBehaviorAdd(UnitLastCreated(), "MedicNanoAI", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "MedicBTAI", UnitLastCreated(), 1);
    }
    else if (autoF64ED282_val == "Sniper") {
        UnitBehaviorAdd(UnitLastCreated(), "BinocularAIHero", UnitLastCreated(), 1);
    }
    else if (autoF64ED282_val == "InfantrySDM") {
        UnitBehaviorAdd(UnitLastCreated(), "BinocularAIHero", UnitLastCreated(), 1);
    }
    else if (autoF64ED282_val == "CombatEngineerMini") {
        UnitBehaviorAdd(UnitLastCreated(), "ClusterRocketsAIHero", UnitLastCreated(), 1);
    }
    else if (autoF64ED282_val == "JavelinGunner") {
        UnitBehaviorAdd(UnitLastCreated(), "MRLAIHeroMechanical", UnitLastCreated(), 1);
    }
    else if (autoF64ED282_val == "74DFlamethrower") {
        UnitBehaviorAdd(UnitLastCreated(), "DamageAIMiniPlasmaShield", UnitLastCreated(), 1);
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "FuelDischargeAIGroupHero", UnitLastCreated(), 1);
        }

    }
    else if (autoF64ED282_val == "GhostMini") {
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "IPR", UnitLastCreated(), 1);
        }

    }
    else {
    }
}

void gf_SpawnPMCSquad (int lp_squadtype, int lp_chance) {
    int auto98FFDBF9_ae;
    int auto98FFDBF9_ai;
    int autoC576767E_val;
    int autoFE2B1698_n;
    int autoFE2B1698_i;
    int auto41F3FD09_n;
    int auto41F3FD09_i;
    int auto02A1A657_n;
    int auto02A1A657_i;
    int auto0C779023_n;
    int auto0C779023_i;
    int auto38C286C8_n;
    int auto38C286C8_i;
    int autoB1039A74_n;
    int autoB1039A74_i;
    int auto4C1C99A9_n;
    int auto4C1C99A9_i;
    int auto2626A996_n;
    int auto2626A996_i;
    int autoFB8F6CE1_n;
    int autoFB8F6CE1_i;
    int auto33523F66_n;
    int auto33523F66_i;
    int autoBD956028_n;
    int autoBD956028_i;
    int auto7E299B64_n;
    int auto7E299B64_i;
    int autoC3D5A2F5_n;
    int autoC3D5A2F5_i;
    int auto12DA5250_n;
    int auto12DA5250_i;
    int auto7F3F1485_n;
    int auto7F3F1485_i;
    int auto67E84884_n;
    int auto67E84884_i;

    // Variable Declarations
    int lv_int;
    point lv_spawnloc;
    int lv_squadarray;

    // Variable Initialization
    lv_spawnloc = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    if ((RandomInt(0, lp_chance) == 0)) {
    }
    else {
        return ;
    }
    auto98FFDBF9_ae = 16;
    auto98FFDBF9_ai = 1;
    lv_int = 1;
    for ( ; ( (auto98FFDBF9_ai >= 0 && lv_int <= auto98FFDBF9_ae) || (auto98FFDBF9_ai <= 0 && lv_int >= auto98FFDBF9_ae) ) ; lv_int += auto98FFDBF9_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(gv_pMCSquads[lv_int].lv_group) == true)) {
            lv_squadarray = lv_int;
            gv_pMCsquadcnt += 1;
            break;
        }

    }
    autoC576767E_val = lp_squadtype;
    if (autoC576767E_val == 1) {
        gf_SpawnPMCSoldier("InfantryRifleman", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("68WCombatMedic", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("InfantryAutomaticRifleman", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 2) {
        autoFE2B1698_n = RandomInt(3, 4);
        for (autoFE2B1698_i = 1; autoFE2B1698_i <= autoFE2B1698_n; autoFE2B1698_i += 1) {
            gf_SpawnPMCSoldier("74DFlamethrower", lv_spawnloc, lv_squadarray);
        }
    }
    else if (autoC576767E_val == 3) {
        auto41F3FD09_n = RandomInt(2, 3);
        for (auto41F3FD09_i = 1; auto41F3FD09_i <= auto41F3FD09_n; auto41F3FD09_i += 1) {
            gf_SpawnPMCSoldier("JavelinGunner", lv_spawnloc, lv_squadarray);
        }
        auto02A1A657_n = RandomInt(2, 4);
        for (auto02A1A657_i = 1; auto02A1A657_i <= auto02A1A657_n; auto02A1A657_i += 1) {
            gf_SpawnPMCSoldier("InfantryRifleman", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("68WCombatMedic", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 4) {
        auto0C779023_n = 2;
        for (auto0C779023_i = 1; auto0C779023_i <= auto0C779023_n; auto0C779023_i += 1) {
            gf_SpawnPMCSoldier("InfantrySDM", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 5) {
        gf_SpawnPMCSoldier("68WCombatMedic", lv_spawnloc, lv_squadarray);
        auto38C286C8_n = RandomInt(6, 8);
        for (auto38C286C8_i = 1; auto38C286C8_i <= auto38C286C8_n; auto38C286C8_i += 1) {
            gf_SpawnPMCSoldier("InfantryRifleman", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("68WCombatMedic", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 6) {
        autoB1039A74_n = RandomInt(2, 4);
        for (autoB1039A74_i = 1; autoB1039A74_i <= autoB1039A74_n; autoB1039A74_i += 1) {
            gf_SpawnPMCSoldier("InfantryRifleman", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("68WCombatMedic", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("CombatEngineerMini", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("M2BradleyIFV", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("M2BradleyIFV", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 7) {
        gf_SpawnPMCSoldier("AH25Hunter", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("AH25Hunter", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 8) {
        auto4C1C99A9_n = RandomInt(3, 4);
        for (auto4C1C99A9_i = 1; auto4C1C99A9_i <= auto4C1C99A9_n; auto4C1C99A9_i += 1) {
            gf_SpawnPMCSoldier("GhostMini", lv_spawnloc, lv_squadarray);
        }
    }
    else if (autoC576767E_val == 9) {
        auto2626A996_n = RandomInt(2, 3);
        for (auto2626A996_i = 1; auto2626A996_i <= auto2626A996_n; auto2626A996_i += 1) {
            gf_SpawnPMCSoldier("Sniper", lv_spawnloc, lv_squadarray);
        }
    }
    else if (autoC576767E_val == 10) {
        autoFB8F6CE1_n = 2;
        for (autoFB8F6CE1_i = 1; autoFB8F6CE1_i <= autoFB8F6CE1_n; autoFB8F6CE1_i += 1) {
            gf_SpawnPMCSoldier("CombatWalker", lv_spawnloc, lv_squadarray);
        }
        auto33523F66_n = RandomInt(1, 2);
        for (auto33523F66_i = 1; auto33523F66_i <= auto33523F66_n; auto33523F66_i += 1) {
            gf_SpawnPMCSoldier("CombatEngineerMini", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 11) {
        autoBD956028_n = RandomInt(1, 2);
        for (autoBD956028_i = 1; autoBD956028_i <= autoBD956028_n; autoBD956028_i += 1) {
            gf_SpawnPMCSoldier("InfantryRifleman", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("68WCombatMedic", lv_spawnloc, lv_squadarray);
        auto7E299B64_n = RandomInt(2, 3);
        for (auto7E299B64_i = 1; auto7E299B64_i <= auto7E299B64_n; auto7E299B64_i += 1) {
            gf_SpawnPMCSoldier("CombatEngineerMini", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 12) {
        autoC3D5A2F5_n = 3;
        for (autoC3D5A2F5_i = 1; autoC3D5A2F5_i <= autoC3D5A2F5_n; autoC3D5A2F5_i += 1) {
            gf_SpawnPMCSoldier("74DFlamethrower", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("Ignis", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 13) {
        auto12DA5250_n = RandomInt(2, 3);
        for (auto12DA5250_i = 1; auto12DA5250_i <= auto12DA5250_n; auto12DA5250_i += 1) {
            gf_SpawnPMCSoldier("InfantryRifleman", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("68WCombatMedic", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("CombatEngineerMini", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("M1Abrams", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 14) {
        auto7F3F1485_n = 3;
        for (auto7F3F1485_i = 1; auto7F3F1485_i <= auto7F3F1485_n; auto7F3F1485_i += 1) {
            gf_SpawnPMCSoldier("InfantryAutomaticRifleman", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("Vesania", lv_spawnloc, lv_squadarray);
    }
    else if (autoC576767E_val == 15) {
        auto67E84884_n = 2;
        for (auto67E84884_i = 1; auto67E84884_i <= auto67E84884_n; auto67E84884_i += 1) {
            gf_SpawnPMCSoldier("InfantryRifleman", lv_spawnloc, lv_squadarray);
        }
        gf_SpawnPMCSoldier("InfantryAutomaticRifleman", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("BattleWalker", lv_spawnloc, lv_squadarray);
        gf_SpawnPMCSoldier("SquadLeader", lv_spawnloc, lv_squadarray);
    }
    else {
    }
}

void gf_RefreshSquads () {
    int auto3501DB59_ae;
    int auto3501DB59_ai;

    // Variable Declarations
    int lv_int;
    int lv_lowestopen;

    // Variable Initialization

    // Implementation
    auto3501DB59_ae = 16;
    auto3501DB59_ai = 1;
    lv_int = 1;
    for ( ; ( (auto3501DB59_ai >= 0 && lv_int <= auto3501DB59_ae) || (auto3501DB59_ai <= 0 && lv_int >= auto3501DB59_ae) ) ; lv_int += auto3501DB59_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(gv_pMCSquads[lv_int].lv_group) == true)) {
            lv_lowestopen = lv_int;
        }

        if ((libNtve_gf_UnitGroupIsDead(gv_pMCSquads[lv_int].lv_group) == false) && (lv_lowestopen >= 1) && (lv_int > 1)) {
            UnitGroupAddUnitGroup(gv_pMCSquads[lv_lowestopen].lv_group, gv_pMCSquads[lv_int].lv_group);
            UnitGroupClear(gv_pMCSquads[lv_int].lv_group);
            UnitGroupLoopBegin(gv_pMCSquads[lv_lowestopen].lv_group);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetCustomValue(UnitLastCreated(), 4, lv_lowestopen);
            }
            UnitGroupLoopEnd();
        }

    }
}

void gf_SquadAttackPosition (int lp_squad, point lp_position) {
    // Variable Declarations
    point lv_offset;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_pMCSquads[lp_squad].lv_squadLeader) == true)) {
        UnitGroupIssueOrder(gv_pMCSquads[lp_squad].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), lp_position), c_orderQueueReplace);
        UnitGroupLoopBegin(gv_pMCSquads[lp_squad].lv_group);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_offset = PointWithOffsetPolar(lp_position, RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle());
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Sprint") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
            }

        }
        UnitGroupLoopEnd();
    }
    else {
        UnitGroupIssueOrder(gv_pMCSquads[lp_squad].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), lp_position), c_orderQueueReplace);
        UnitGroupLoopBegin(gv_pMCSquads[lp_squad].lv_group);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Sprint") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
            }

        }
        UnitGroupLoopEnd();
    }
}

void gf_PSampleHandover (unit lp_sample) {
    // Implementation
    UnitGroupRemove(gv_biosamples, lp_sample);
    UnitRemove(lp_sample);
    gv_biosamplehanded += 1;
    gf_SucceedMission(10, StringExternal("Param/Value/29C4A446"), 0);
}

string gf_RandomHeroType (int lp_player) {
    int autoA1FC9527_ae;
    int autoA1FC9527_ai;
    int autoCBA221F2_ae;
    int autoCBA221F2_ai;
    int autoB6A66406_ae;
    int autoB6A66406_ai;
    int auto6D29571E_ae;
    int auto6D29571E_ai;
    int auto8D80AFFC_ae;
    int auto8D80AFFC_ai;
    int auto8D85ACB9_ae;
    int auto8D85ACB9_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_int;
    int lv_totalweight;
    bool lv_otherteamhasspecial;

    // Variable Initialization

    // Implementation
    if ((gv_mod_rifle == true)) {
        return "Rifleman";
    }

    autoA1FC9527_ae = gv_heroarraysize;
    autoA1FC9527_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoA1FC9527_ai >= 0 && lv_loopint <= autoA1FC9527_ae) || (autoA1FC9527_ai <= 0 && lv_loopint >= autoA1FC9527_ae) ) ; lv_loopint += autoA1FC9527_ai ) {
        lv_totalweight = (lv_totalweight + gv_heroweights[lv_loopint]);
    }
    PlayerGroupLoopBegin(gv_teams[gv_playersTeam[lp_player]]);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoCBA221F2_ae = gv_heroarraysize;
        autoCBA221F2_ai = 1;
        lv_int = 8;
        for ( ; ( (autoCBA221F2_ai >= 0 && lv_int <= autoCBA221F2_ae) || (autoCBA221F2_ai <= 0 && lv_int >= autoCBA221F2_ae) ) ; lv_int += autoCBA221F2_ai ) {
            if ((UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()]) == gv_herotypes[lv_int]) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                lv_otherteamhasspecial = true;
                break;
            }

        }
    }
    PlayerGroupLoopEnd();
    if ((gv_teamCount <= 4) && (lv_otherteamhasspecial == false)) {
        autoB6A66406_ae = gv_teamCount;
        autoB6A66406_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoB6A66406_ai >= 0 && lv_loopint <= autoB6A66406_ae) || (autoB6A66406_ai <= 0 && lv_loopint >= autoB6A66406_ae) ) ; lv_loopint += autoB6A66406_ai ) {
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                auto6D29571E_ae = gv_heroarraysize;
                auto6D29571E_ai = 1;
                lv_int = 8;
                for ( ; ( (auto6D29571E_ai >= 0 && lv_int <= auto6D29571E_ae) || (auto6D29571E_ai <= 0 && lv_int >= auto6D29571E_ae) ) ; lv_int += auto6D29571E_ai ) {
                    if ((UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()]) == gv_herotypes[lv_int]) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                        lv_otherteamhasspecial = true;
                        break;
                    }

                }
            }
            PlayerGroupLoopEnd();
        }
    }
    else {
        lv_otherteamhasspecial = false;
    }
    if ((lv_otherteamhasspecial == true)) {
        auto8D80AFFC_ae = gv_heroarraysize;
        auto8D80AFFC_ai = 1;
        lv_loopint = 8;
        for ( ; ( (auto8D80AFFC_ai >= 0 && lv_loopint <= auto8D80AFFC_ae) || (auto8D80AFFC_ai <= 0 && lv_loopint >= auto8D80AFFC_ae) ) ; lv_loopint += auto8D80AFFC_ai ) {
            if ((RandomInt(1, (gv_heroarraysize - 8)) <= gv_heroweights[lv_loopint])) {
                return gv_herotypes[lv_loopint];
            }

        }
    }

    auto8D85ACB9_ae = gv_heroarraysize;
    auto8D85ACB9_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto8D85ACB9_ai >= 0 && lv_loopint <= auto8D85ACB9_ae) || (auto8D85ACB9_ai <= 0 && lv_loopint >= auto8D85ACB9_ae) ) ; lv_loopint += auto8D85ACB9_ai ) {
        if ((RandomInt(1, lv_totalweight) <= gv_heroweights[lv_loopint])) {
            return gv_herotypes[lv_loopint];
        }

    }
    return "Rifleman";
}

trigger auto_gf_SpawnPlayerHero_Trigger = null;
point auto_gf_SpawnPlayerHero_lp_point;
int auto_gf_SpawnPlayerHero_lp_player;

void gf_SpawnPlayerHero (point lp_point, int lp_player) {
    auto_gf_SpawnPlayerHero_lp_point = lp_point;
    auto_gf_SpawnPlayerHero_lp_player = lp_player;

    if (auto_gf_SpawnPlayerHero_Trigger == null) {
        auto_gf_SpawnPlayerHero_Trigger = TriggerCreate("auto_gf_SpawnPlayerHero_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnPlayerHero_Trigger, false, false);
}

bool auto_gf_SpawnPlayerHero_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_SpawnPlayerHero_lp_point;
    int lp_player = auto_gf_SpawnPlayerHero_lp_player;

    string auto707468A4_val;

    // Implementation
    libNtve_gf_SetDialogItemText(gv_sIDialogLabels[1], StringExternal("Param/Value/309A7C66"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_sIDialogLabels[2], StringExternal("Param/Value/C06BE319"), PlayerGroupSingle(lp_player));
    gv_playerSIsused[1][lp_player] = 0;
    gv_playerSIsused[2][lp_player] = 0;
    gf_UpdateSIDialogforPlayer(lp_player);
    DialogSetVisible(gv_sIDialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(lp_player), false);
    UnitGroupRemove(gv_heroesGroup, gv_playerHeroes[lp_player]);
    UnitRemove(gv_playerHeroes[lp_player]);
    UnitCreate(1, gf_RandomHeroType(lp_player), c_unitCreateIgnorePlacement, lp_player, lp_point, libNtve_gf_RandomAngle());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), gv_rankActorMsg[gv_playerRankSet[lp_player]][gf_GetPlayerRank(lp_player)]);
    UnitBehaviorAdd(UnitLastCreated(), "Spawned", UnitLastCreated(), 1);
    gv_playerHeroes[lp_player] = UnitLastCreated();
    UnitGroupAdd(gv_heroesGroup, UnitLastCreated());
    UnitSelect(UnitLastCreated(), lp_player, true);
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    UnitControlGroupAddUnit(lp_player, 1, UnitLastCreated());
    UnitCreateEffectUnit(UnitLastCreated(), "CompetitiveStartingXP", UnitLastCreated());
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "PlayUnitSound");
    UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeTerrazine, false);
    UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeVespene, true);
    UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeMinerals, true);
    gv_playerEncumbrance[lp_player] = 15;
    DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lp_player), true);
    DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lp_player), true);
    libNtve_gf_SetDialogItemImage(gv_ammoDialogueItems[3], "Assets\\Custom Icons\\icon-mags.dds", PlayerGroupSingle(lp_player));
    CameraPan(lp_player, lp_point, 0.8, -1, 30.0, false);
    PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperSetTo, 99999);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 6);
    auto707468A4_val = UnitGetType(UnitLastCreated());
    if (auto707468A4_val == "Rifleman") {
        gv_magsize[lp_player] = 60;
        gv_reloadbasetime[lp_player] = 3.9;
    }
    else if (auto707468A4_val == "JavelinGunner2") {
        gv_magsize[lp_player] = 60;
        gv_reloadbasetime[lp_player] = 4.0;
    }
    else if (auto707468A4_val == "CombatMedic") {
        gv_magsize[lp_player] = 60;
    }
    else if (auto707468A4_val == "PlatoonLeader") {
        gv_magsize[lp_player] = 60;
    }
    else if (auto707468A4_val == "SFAAT") {
        gv_magsize[lp_player] = 25;
    }
    else if (auto707468A4_val == "AutomaticRifleman") {
        gv_magsize[lp_player] = 100;
        gv_reloadbasetime[lp_player] = 6.0;
    }
    else if (auto707468A4_val == "Flamethrower") {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 700);
        UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeTerrazine, true);
        UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(lp_player), c_resourceTypeMinerals, false);
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lp_player), false);
        libNtve_gf_SetDialogItemImage(gv_ammoDialogueItems[3], "Assets\\Textures\\fireball_10.dds", PlayerGroupSingle(lp_player));
        gv_playerEncumbrance[lp_player] = 1500;
    }
    else if (auto707468A4_val == "CavalryScout") {
        gv_magsize[lp_player] = 60;
        gv_reloadbasetime[lp_player] = 4.0;
    }
    else if (auto707468A4_val == "SquadDesignatedMarksman") {
        gv_magsize[lp_player] = 35;
        gv_reloadbasetime[lp_player] = 5.0;
    }
    else if (auto707468A4_val == "GhostHero") {
        gv_magsize[lp_player] = 80;
        gv_reloadbasetime[lp_player] = 3.9;
    }
    else if (auto707468A4_val == "FireSupportSpecialist") {
        gv_magsize[lp_player] = 60;
    }
    else if (auto707468A4_val == "CombatEngineer") {
        gv_magsize[lp_player] = 25;
    }
    else if (auto707468A4_val == "Cyborg") {
        gv_magsize[lp_player] = 150;
        gv_reloadbasetime[lp_player] = 4.9;
    }
    else {
    }
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lp_player]);
    return true;
}

void gf_SpawnPMC (int lp_count, string lp_type, int lp_chance) {
    // Variable Declarations
    int lv_randomTCP;

    // Variable Initialization
    lv_randomTCP = RandomInt(1, 4);

    // Implementation
    while (!((gv_pauseSpawning == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((RandomInt(1, lp_chance) == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 15, RegionRandomPoint(gv_spawnRegion));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }

}

playergroup gf_AllOtherTeams (int lp_team) {
    // Variable Declarations
    int lv_int;
    playergroup lv_playergroup;

    // Variable Initialization
    lv_playergroup = PlayerGroupEmpty();

    // Implementation
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playersTeam[PlayerGroupLoopCurrent()] != lp_team)) {
            PlayerGroupAdd(lv_playergroup, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    return lv_playergroup;
}

void gf_SetTeamScore (int lp_team, int lp_score) {
    // Implementation
    gv_teamScores[lp_team] = lp_score;
    if ((lp_team < 5)) {
        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[lp_team][13], (StringExternal("Param/Value/4E86B27F") + IntToText(lp_score)), PlayerGroupAll());
    }

}

void gf_SetArena (int lp_arena) {
    // Implementation
    if ((lp_arena == 1)) {
        RegionPlayableMapSet(RegionCircle(Point(30.0, 50.0), 110.0));
        gv_lNSpawn = RegionFromId(27);
        gv_teamspawnregions[1] = RegionFromId(114);
        gv_teamspawnregions[2] = RegionFromId(40);
        gv_teamspawnregions[3] = RegionFromId(42);
        gv_teamspawnregions[4] = RegionFromId(147);
        RegionSetCenter(RegionFromId(52), RegionGetCenter(RegionFromId(138)));
        RegionSetCenter(RegionFromId(53), RegionGetCenter(RegionFromId(135)));
        RegionSetCenter(RegionFromId(54), RegionGetCenter(RegionFromId(137)));
        RegionSetCenter(RegionFromId(102), PointFromId(2326));
    }

    if ((lp_arena == 2)) {
        RegionPlayableMapSet(RegionCircle(Point(120.0, 110.0), 65.0));
        gv_lNSpawn = RegionFromId(132);
        gv_teamspawnregions[1] = RegionFromId(26);
        gv_teamspawnregions[2] = RegionFromId(13);
        gv_teamspawnregions[3] = RegionFromId(5);
        gv_teamspawnregions[4] = RegionFromId(42);
        RegionSetCenter(RegionFromId(52), PointFromId(1791));
        RegionSetCenter(RegionFromId(53), PointFromId(1788));
        RegionSetCenter(RegionFromId(54), RegionGetCenter(RegionFromId(91)));
        RegionSetCenter(RegionFromId(102), PointFromId(2506));
    }

    if ((lp_arena == 3)) {
        RegionPlayableMapSet(RegionCircle(Point(190.0, 70.0), 75.0));
        gv_lNSpawn = RegionFromId(26);
        gv_teamspawnregions[1] = RegionFromId(105);
        gv_teamspawnregions[2] = RegionFromId(15);
        gv_teamspawnregions[3] = RegionFromId(102);
        gv_teamspawnregions[4] = RegionFromId(73);
        RegionSetCenter(RegionFromId(52), PointFromId(1790));
        RegionSetCenter(RegionFromId(53), PointFromId(2505));
        RegionSetCenter(RegionFromId(54), PointFromId(2327));
        RegionSetCenter(RegionFromId(102), PointFromId(2328));
    }

    if ((lp_arena == 4)) {
        RegionPlayableMapSet(RegionCircle(Point(85.0, 210.0), 75.0));
        gv_lNSpawn = RegionFromId(24);
        gv_teamspawnregions[1] = RegionFromId(29);
        gv_teamspawnregions[2] = RegionFromId(145);
        gv_teamspawnregions[3] = RegionFromId(140);
        gv_teamspawnregions[4] = RegionFromId(85);
        RegionSetCenter(RegionFromId(52), PointFromId(1780));
        RegionSetCenter(RegionFromId(53), PointFromId(2325));
        RegionSetCenter(RegionFromId(54), PointFromId(1777));
        RegionSetCenter(RegionFromId(102), PointFromId(2503));
    }

}

void gf_SetTeams (int lp_teamcount) {
    int autoFB882FEF_ae;
    int autoFB882FEF_ai;
    int auto28944954_ae;
    int auto28944954_ai;
    int auto62DA8112_ae;
    int auto62DA8112_ai;

    // Variable Declarations
    int lv_loopint;
    playergroup lv_tempgroup;
    int lv_curteam;
    int lv_teamcountlim;
    int lv_teamsize;

    // Variable Initialization
    lv_tempgroup = PlayerGroupEmpty();
    lv_curteam = 1;
    lv_teamcountlim = lp_teamcount;
    lv_teamsize = (PlayerGroupCount(gv_players) / lp_teamcount);

    // Implementation
    if ((lp_teamcount >= 3) && (PlayerGroupCount(gv_players) < 5)) {
        lv_teamcountlim = 2;
    }

    if ((lp_teamcount >= 4) && (PlayerGroupCount(gv_players) < 8)) {
        lv_teamcountlim = 2;
    }

    if ((PlayerGroupCount(gv_players) == 1)) {
        lv_teamcountlim = 1;
    }

    gv_teamCount = lv_teamcountlim;
    lv_teamsize = (PlayerGroupCount(gv_players) / lv_teamcountlim);
    autoFB882FEF_ae = 12;
    autoFB882FEF_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoFB882FEF_ai >= 0 && lv_loopint <= autoFB882FEF_ae) || (autoFB882FEF_ai <= 0 && lv_loopint >= autoFB882FEF_ae) ) ; lv_loopint += autoFB882FEF_ai ) {
        gv_teams[lv_loopint] = PlayerGroupEmpty();
        gf_SetTeamScore(lv_loopint, 0);
    }
    if ((lv_teamcountlim == 1)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerGroupAdd(gv_teams[PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(gv_players, lv_tempgroup);
        auto28944954_ae = PlayerGroupCount(lv_tempgroup);
        auto28944954_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto28944954_ai >= 0 && lv_loopint <= auto28944954_ae) || (auto28944954_ai <= 0 && lv_loopint >= auto28944954_ae) ) ; lv_loopint += auto28944954_ai ) {
            if ((PlayerGroupCount(gv_teams[lv_curteam]) >= lv_teamsize) && (lv_curteam < lv_teamcountlim)) {
                lv_curteam = (lv_curteam + 1);
            }

            PlayerGroupAdd(gv_teams[lv_curteam], PlayerGroupPlayer(lv_tempgroup, RandomInt(1, PlayerGroupCount(lv_tempgroup))));
            libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_teams[lv_curteam], lv_tempgroup);
        }
    }
    libNtve_gf_SetPlayerGroupAlliance(gv_players, libNtve_ge_AllianceSetting_Enemy);
    auto62DA8112_ae = lv_teamcountlim;
    auto62DA8112_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto62DA8112_ai >= 0 && lv_loopint <= auto62DA8112_ae) || (auto62DA8112_ai <= 0 && lv_loopint >= auto62DA8112_ae) ) ; lv_loopint += auto62DA8112_ai ) {
        if ((lp_teamcount > 1)) {
            UIDisplayMessage(gv_teams[lv_loopint], c_messageAreaSubtitle, StringExternal("Param/Value/05F7F67A"));
            UIDisplayMessage(gv_teams[lv_loopint], c_messageAreaSubtitle, (StringExternal("Param/Value/959720C5") + IntToText(lv_loopint)));
            UIDisplayMessage(gv_teams[lv_loopint], c_messageAreaSubtitle, StringExternal("Param/Value/F98397B9"));
            libNtve_gf_SetPlayerGroupAlliance(gv_teams[lv_loopint], libNtve_ge_AllianceSetting_AllyWithSharedVision);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/0C9C58BF") + IntToText(lv_loopint)));
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                PlayerSetColorIndex(PlayerGroupLoopCurrent(), PlayerGetColorIndex(PlayerGroupLoopCurrent(), true), true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))));
                gv_playersTeam[PlayerGroupLoopCurrent()] = lv_loopint;
            }
            PlayerGroupLoopEnd();
        }
        else {
            PlayerGroupLoopBegin(gv_players);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                PlayerSetColorIndex(PlayerGroupLoopCurrent(), PlayerGetColorIndex(PlayerGroupLoopCurrent(), true), true);
                gv_playersTeam[PlayerGroupLoopCurrent()] = PlayerGroupLoopCurrent();
            }
            PlayerGroupLoopEnd();
        }
    }
    TriggerExecute(gt_COMPRefreshStatusDialog, true, false);
    TriggerExecute(gt_COMPRefreshHUDDialog, true, false);
}

void gf_ChapterIntermissionOn () {
    unitgroup auto654D5E23_g;
    int auto654D5E23_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    UnitPauseAll(true);
    gv_pauseSpawning = true;
    TriggerEnable(gt_SprintLoop, false);
    auto654D5E23_g = gv_undeadTargetGroup;
    auto654D5E23_u = 1;
    for ( ; auto654D5E23_u <= UnitGroupCount(auto654D5E23_g, c_unitCountAll) ; auto654D5E23_u += BoolToInt(lv_unit == UnitGroupUnit(auto654D5E23_g, auto654D5E23_u)) ) {
        lv_unit = UnitGroupUnit(auto654D5E23_g, auto654D5E23_u);
        libNtve_gf_MakeUnitInvulnerable(lv_unit, true);
    }
}

void gf_ChapterIntermissionOff () {
    unitgroup autoCC1E85B3_g;
    int autoCC1E85B3_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Implementation
    UnitPauseAll(false);
    gv_pauseSpawning = false;
    TriggerEnable(gt_SprintLoop, true);
    autoCC1E85B3_g = gv_undeadTargetGroup;
    autoCC1E85B3_u = 1;
    for ( ; autoCC1E85B3_u <= UnitGroupCount(autoCC1E85B3_g, c_unitCountAll) ; autoCC1E85B3_u += BoolToInt(lv_unit == UnitGroupUnit(autoCC1E85B3_g, autoCC1E85B3_u)) ) {
        lv_unit = UnitGroupUnit(autoCC1E85B3_g, autoCC1E85B3_u);
        libNtve_gf_MakeUnitInvulnerable(lv_unit, false);
    }
}

string gf_RandomPoliceType () {
    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        return "PoliceOfficer";
    }
    else {
        return "PoliceOfficerShotgun";
    }
}

void gf_ResetMissionComplete () {
    // Implementation
    gv_missioncomplete[0] = false;
    gv_missioncomplete[1] = false;
    gv_missioncomplete[2] = false;
    gv_missioncomplete[3] = false;
}

trigger auto_gf_SpawnMayorAssault_Trigger = null;
string auto_gf_SpawnMayorAssault_lp_type;
int auto_gf_SpawnMayorAssault_lp_count;

void gf_SpawnMayorAssault (string lp_type, int lp_count) {
    auto_gf_SpawnMayorAssault_lp_type = lp_type;
    auto_gf_SpawnMayorAssault_lp_count = lp_count;

    if (auto_gf_SpawnMayorAssault_Trigger == null) {
        auto_gf_SpawnMayorAssault_Trigger = TriggerCreate("auto_gf_SpawnMayorAssault_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnMayorAssault_Trigger, false, false);
}

bool auto_gf_SpawnMayorAssault_TriggerFunc (bool testConds, bool runActions) {
    string lp_type = auto_gf_SpawnMayorAssault_lp_type;
    int lp_count = auto_gf_SpawnMayorAssault_lp_count;

    // Implementation
    gf_SkipifOver();
    Wait(RandomFixed(1.0, 3.0), c_timeGame);
    while (!((gv_pauseSpawning == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true)) {
        gv_infestationLevel = (gv_infestationLevel + 2);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, RegionRandomPoint(RegionFromId(40)));
    UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((PlayerGroupCount(gv_players) <= 3)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "PlayerHandicap", UnitGroupLoopCurrent(), (4 - PlayerGroupCount(gv_players)));
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "PlayerModifier", UnitGroupLoopCurrent(), PlayerGroupCount(gv_players));
        }
        if ((gv_gamemode > 1) && (gv_gamemode <= 5)) {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifierBoss", UnitGroupLoopCurrent(), (gv_gamemode - 1));
            }
            else {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifier", UnitGroupLoopCurrent(), (gv_gamemode - 1));
            }
        }

        if ((gv_gamemode == 1) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RecruitModifier", UnitGroupLoopCurrent(), 1);
        }

        if ((gv_gamemode == 7)) {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifierBoss", UnitGroupLoopCurrent(), 2);
            }
            else {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifier", UnitGroupLoopCurrent(), 2);
            }
        }

        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(7))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}

trigger auto_gf_FarmerAkmaEvac_Trigger = null;

void gf_FarmerAkmaEvac () {
    if (auto_gf_FarmerAkmaEvac_Trigger == null) {
        auto_gf_FarmerAkmaEvac_Trigger = TriggerCreate("auto_gf_FarmerAkmaEvac_TriggerFunc");
    }

    TriggerExecute(auto_gf_FarmerAkmaEvac_Trigger, false, false);
}

bool auto_gf_FarmerAkmaEvac_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    TriggerEnable(gt_FarmerAkmaWork, false);
    UnitGroupAdd(gv_wanderers[RandomInt(1, 2)], UnitFromId(1328));
    UnitIssueOrder(UnitFromId(1328), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_cityRegions[RandomInt(1, 2)])), c_orderQueueReplace);
    UnitGroupAdd(gv_wanderers[RandomInt(1, 2)], UnitFromId(274));
    UnitIssueOrder(UnitFromId(274), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_cityRegions[RandomInt(1, 2)])), c_orderQueueReplace);
    Wait(240.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1328), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(274), false);
    return true;
}

trigger auto_gf_FarmerAkmaWifeTurn_Trigger = null;

void gf_FarmerAkmaWifeTurn () {
    if (auto_gf_FarmerAkmaWifeTurn_Trigger == null) {
        auto_gf_FarmerAkmaWifeTurn_Trigger = TriggerCreate("auto_gf_FarmerAkmaWifeTurn_TriggerFunc");
    }

    TriggerExecute(auto_gf_FarmerAkmaWifeTurn_Trigger, false, false);
}

bool auto_gf_FarmerAkmaWifeTurn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    fixed lv_facing;
    unitgroup lv_units;

    // Variable Initialization
    lv_point = UnitGetPosition(UnitFromId(274));
    lv_facing = UnitGetFacing(UnitFromId(274));
    lv_units = UnitGroupEmpty();

    // Implementation
    UnitKill(UnitFromId(274));
    Wait(1.0, c_timeGame);
    UnitCreate(1, "Cursed", c_unitCreateIgnorePlacement, 14, lv_point, lv_facing);
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitGroupAdd(lv_units, UnitLastCreated());
    UnitGroupIssueOrder(lv_units, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    while (!((UnitGroupCount(lv_units, c_unitCountAlive) == 0))) {
        Wait(5.0, c_timeGame);
    }
    gf_MissionText(StringExternal("Param/Value/C68DD0FC"));
    Wait(2.0, c_timeGame);
    gf_SucceedMission(7, StringExternal("Param/Value/A1B068DF"), 0);
    return true;
}

void gf_SpawnTCPzombie (int lp_tCP, string lp_type, int lp_count) {
    // Implementation
    gf_SkipifOver();
    Wait(RandomFixed(1.0, 3.0), c_timeGame);
    while (!((gv_pauseSpawning == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((TriggerIsEnabled(gt_TCPcontainment) == false)) {
        return ;
    }

    if ((UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true)) {
        gv_infestationLevel = (gv_infestationLevel + 2);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, RegionRandomPoint(gv_tCPSpawns[lp_tCP]));
    UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(gv_tCPhostiles, UnitLastCreatedGroup());
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((PlayerGroupCount(gv_players) <= 3)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "PlayerHandicap", UnitGroupLoopCurrent(), (4 - PlayerGroupCount(gv_players)));
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "PlayerModifier", UnitGroupLoopCurrent(), PlayerGroupCount(gv_players));
        }
        if ((gv_gamemode > 1) && (gv_gamemode <= 5)) {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifierBoss", UnitGroupLoopCurrent(), (gv_gamemode - 1));
            }
            else {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifier", UnitGroupLoopCurrent(), (gv_gamemode - 1));
            }
        }

        if ((gv_gamemode == 1) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RecruitModifier", UnitGroupLoopCurrent(), 1);
        }

        if ((gv_gamemode == 7)) {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifierBoss", UnitGroupLoopCurrent(), 2);
            }
            else {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifier", UnitGroupLoopCurrent(), 2);
            }
        }

        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_tCPregion[lp_tCP])), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
}

void gf_HighlanderEvaluateEnd () {
    int auto1B74C9B9_ae;
    int auto1B74C9B9_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_allsearched;

    // Variable Initialization
    lv_allsearched = true;

    // Implementation
    auto1B74C9B9_ae = 8;
    auto1B74C9B9_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto1B74C9B9_ai >= 0 && lv_loopint <= auto1B74C9B9_ae) || (auto1B74C9B9_ai <= 0 && lv_loopint >= auto1B74C9B9_ae) ) ; lv_loopint += auto1B74C9B9_ai ) {
        if ((gv_highlanderssearched[lv_loopint] == false)) {
            lv_allsearched = false;
        }

    }
    if ((UnitGroupCount(gv_highlandercivilians, c_unitCountAlive) == 0) && (lv_allsearched == true)) {
        gv_escortcivmissioncomplete[3] = true;
        if ((gv_highlanderrescued > 0)) {
            ObjectiveSetState(gv_thirdObj, c_objectiveStateCompleted);
            if ((gv_highlanderrescued == gv_highlandertorescue)) {
                gf_MissionText(StringExternal("Param/Value/01355BD2"));
                gf_SucceedMission(((gv_highlanderrescued * 3) + 10), StringExternal("Param/Value/78283FE2"), -2);
            }
            else if ((gv_highlanderrescued > (gv_highlandertorescue / 2))) {
                gf_MissionText(StringExternal("Param/Value/BED8D438"));
                gf_SucceedMission((gv_highlanderrescued * 3), StringExternal("Param/Value/A5E5C512"), -1);
            }
            else if (true) {
                gf_MissionText(StringExternal("Param/Value/8BE8315C"));
                gf_SucceedMission((gv_highlanderrescued * 2), StringExternal("Param/Value/7DE9E8C5"), 0);
            }
        }
        else {
            ObjectiveSetState(gv_thirdObj, c_objectiveStateFailed);
            gf_MissionText(StringExternal("Param/Value/1F98B219"));
            gf_FailMission((gv_highlandertorescue * 1), StringExternal("Param/Value/144D4DD9"), 3);
        }
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_HighlanderLoop, false);
        TriggerEnable(gt_HighlanderApproachBuilding, false);
    }

}

void gf_SetupPatrolUnit (unit lp_unit) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, gv_rankActorMsg[1][RandomInt(1, 4)]);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(lp_unit, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitGroupAdd(gv_patrol, lp_unit);
    UnitBehaviorAdd(lp_unit, "PatrollingSlow", lp_unit, 1);
    UnitGroupAdd(gv_undeadTargetGroup, lp_unit);
}

trigger auto_gf_CollectGraveSample_Trigger = null;
unit auto_gf_CollectGraveSample_lp_unit;
region auto_gf_CollectGraveSample_lp_region;
int auto_gf_CollectGraveSample_lp_grave;

void gf_CollectGraveSample (unit lp_unit, region lp_region, int lp_grave) {
    auto_gf_CollectGraveSample_lp_unit = lp_unit;
    auto_gf_CollectGraveSample_lp_region = lp_region;
    auto_gf_CollectGraveSample_lp_grave = lp_grave;

    if (auto_gf_CollectGraveSample_Trigger == null) {
        auto_gf_CollectGraveSample_Trigger = TriggerCreate("auto_gf_CollectGraveSample_TriggerFunc");
    }

    TriggerExecute(auto_gf_CollectGraveSample_Trigger, false, false);
}

bool auto_gf_CollectGraveSample_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_CollectGraveSample_lp_unit;
    region lp_region = auto_gf_CollectGraveSample_lp_region;
    int lp_grave = auto_gf_CollectGraveSample_lp_grave;

    int auto4B3C000A_ae;
    int auto4B3C000A_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_leftregion;
    int lv_gravesremaining;

    // Variable Initialization

    // Implementation
    UnitGroupAdd(gv_graveDiggers, lp_unit);
    gf_MissionText(StringExternal("Param/Value/276321A7"));
    UnitBehaviorAdd(lp_unit, "CollectingSampleGrave", lp_unit, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(lp_region), Color(0.00, 100.00, 0.00), 6.0, 270.0);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    while (true) {
        if ((UnitHasBehavior(lp_unit, "CollectingSampleGrave") == false)) {
            break;
        }

        if ((libNtve_gf_UnitInRegion(lp_unit, lp_region) == true) && (UnitIsAlive(lp_unit) == true)) {
        }
        else {
            gf_MissionText(StringExternal("Param/Value/B52219B6"));
            UnitBehaviorRemove(lp_unit, "CollectingSampleGrave", 1);
            UnitGroupRemove(gv_graveDiggers, lp_unit);
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false) && (TriggerIsEnabled(gt_GraveDiggerCollectSampleLoop) == true)) {
        UnitGroupRemove(gv_graveDiggers, lp_unit);
        ActorSend(gv_graveSiteActors[lp_grave], "Destroy");
        gv_graveSiteActors[lp_grave] = null;
        libNtve_gf_CreateActorAtPoint("SmallBurrowDownEffects", RegionGetCenter(lp_region));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowSmall", -1), PlayerGroupAll(), RegionGetCenter(lp_region), 0.0, 100.0, 0.0);
        gf_SucceedMission(5, StringExternal("Param/Value/AF37F1E8"), 0);
        auto4B3C000A_ae = gv_sensorcount;
        auto4B3C000A_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto4B3C000A_ai >= 0 && lv_loopint <= auto4B3C000A_ae) || (auto4B3C000A_ai <= 0 && lv_loopint >= auto4B3C000A_ae) ) ; lv_loopint += auto4B3C000A_ai ) {
            if ((gv_graveSiteActors[lv_loopint] != null)) {
                lv_gravesremaining = (lv_gravesremaining + 1);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_graveSites[lv_loopint]), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 5.0, 270.0);
            }

        }
        ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/F1D677FB") + IntToText(lv_gravesremaining) + StringExternal("Param/Value/6E1921CB")));
    }

    return true;
}

trigger auto_gf_SpawnRefugees_Trigger = null;

void gf_SpawnRefugees () {
    if (auto_gf_SpawnRefugees_Trigger == null) {
        auto_gf_SpawnRefugees_Trigger = TriggerCreate("auto_gf_SpawnRefugees_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnRefugees_Trigger, false, false);
}

bool auto_gf_SpawnRefugees_TriggerFunc (bool testConds, bool runActions) {
    int auto6C323604_n;
    int auto6C323604_i;

    // Variable Declarations
    int lv_ping;
    unitgroup lv_refugees;
    int lv_refugeessaved;

    // Variable Initialization
    lv_ping = c_invalidPingId;
    lv_refugees = UnitGroupEmpty();

    // Implementation
    SoundPlay(SoundLink("BridgeToStarMapTransition", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/AEB7A034"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(18)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 5.0, 270.0);
    Wait(5.0, c_timeGame);
    UnitCreate(RandomInt(7, 9), "Civilian", 0, 0, RegionGetCenter(RegionFromId(18)), 180.0);
    UnitGroupAddUnitGroup(gv_civilians, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_refugees, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(gv_undeadTargetGroup, UnitLastCreatedGroup());
    auto6C323604_n = RandomInt(4, 5);
    for (auto6C323604_i = 1; auto6C323604_i <= auto6C323604_n; auto6C323604_i += 1) {
        UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionGetCenter(RegionFromId(18)), 180.0);
        UnitGroupAddUnitGroup(gv_civilians, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(lv_refugees, UnitLastCreatedGroup());
        UnitGroupAddUnitGroup(gv_undeadTargetGroup, UnitLastCreatedGroup());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "EscortingSlow", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitGroupLoopBegin(lv_refugees);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, PlayerGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    PlayerGroupLoopEnd();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(18)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(PingLastCreated(), UnitGroupRandomUnit(lv_refugees, c_unitCountAlive));
    while (true) {
        if ((UnitGroupCount(lv_refugees, c_unitCountAlive) == 0)) {
            gf_MissionText((IntToText(lv_refugeessaved) + StringExternal("Param/Value/63D4563F")));
            lv_refugees = null;
            PingDestroy(lv_ping);
            break;
        }

        UnitGroupIssueOrder(lv_refugees, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
        UnitGroupLoopBegin(lv_refugees);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(24)) == true)) {
                UnitGroupRemove(lv_refugees, UnitGroupLoopCurrent());
                UnitGroupRemove(gv_undeadTargetGroup, UnitGroupLoopCurrent());
                PlayerGroupLoopBegin(gv_players);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_cityRegions[RandomInt(1, 2)])), c_orderQueueReplace);
                UnitGroupAdd(gv_wanderers[RandomInt(1, 2)], UnitGroupLoopCurrent());
                lv_refugeessaved = (lv_refugeessaved + 1);
            }

        }
        UnitGroupLoopEnd();
        PingSetUnit(lv_ping, UnitGroupRandomUnit(lv_refugees, c_unitCountAlive));
        Wait(3.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_MoveToGuardPos_Trigger = null;
unit auto_gf_MoveToGuardPos_lp_unit;
region auto_gf_MoveToGuardPos_lp_region;

void gf_MoveToGuardPos (unit lp_unit, region lp_region) {
    auto_gf_MoveToGuardPos_lp_unit = lp_unit;
    auto_gf_MoveToGuardPos_lp_region = lp_region;

    if (auto_gf_MoveToGuardPos_Trigger == null) {
        auto_gf_MoveToGuardPos_Trigger = TriggerCreate("auto_gf_MoveToGuardPos_TriggerFunc");
    }

    TriggerExecute(auto_gf_MoveToGuardPos_Trigger, false, false);
}

bool auto_gf_MoveToGuardPos_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_MoveToGuardPos_lp_unit;
    region lp_region = auto_gf_MoveToGuardPos_lp_region;

    // Implementation
    while (true) {
        if (((libNtve_gf_UnitInRegion(lp_unit, lp_region) == true) || (UnitIsAlive(lp_unit) == false))) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
            break;
        }
        else {
            if ((UnitHasBehavior(lp_unit, "Sprint") == false) && ((UnitGetCustomValue(lp_unit, 2) >= 14.0) || (UnitGroupHasUnit(gv_sprinters, lp_unit) == false))) {
                UnitIssueOrder(lp_unit, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
            }

            if ((RandomInt(0, 2) == 1)) {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
            }
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

void gf_SetTTFadeandDuration (int lp_tag, fixed lp_duration) {
    // Implementation
    TextTagSetTime(lp_tag, c_textTagTimeDuration, lp_duration);
    TextTagSetTime(lp_tag, c_textTagTimeFadeOut, (lp_duration - 1.0));
}

void gf_InitCivilians () {
    int auto033AFD2E_ae;
    int auto033AFD2E_ai;
    int autoB38D41CD_ae;
    int autoB38D41CD_ai;
    int auto941FF9A7_ae;
    int auto941FF9A7_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Implementation
    gv_cityRegions[1] = RegionFromId(24);
    gv_cityRegions[2] = RegionFromId(25);
    gv_cityRegions[3] = RegionFromId(26);
    libNtve_gf_MakeUnitInvulnerable(gv_farmerakma, true);
    UnitGroupAdd(gv_civilians, UnitFromId(1328));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(274), true);
    auto033AFD2E_ae = RandomInt(8, 12);
    auto033AFD2E_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto033AFD2E_ai >= 0 && lv_loopint <= auto033AFD2E_ae) || (auto033AFD2E_ai <= 0 && lv_loopint >= auto033AFD2E_ae) ) ; lv_loopint += auto033AFD2E_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[1]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[1], UnitLastCreatedGroup());
    }
    autoB38D41CD_ae = RandomInt(3, 6);
    autoB38D41CD_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoB38D41CD_ai >= 0 && lv_loopint <= autoB38D41CD_ae) || (autoB38D41CD_ai <= 0 && lv_loopint >= autoB38D41CD_ae) ) ; lv_loopint += autoB38D41CD_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[2]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[2], UnitLastCreatedGroup());
    }
    auto941FF9A7_ae = RandomInt(3, 6);
    auto941FF9A7_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto941FF9A7_ai >= 0 && lv_loopint <= auto941FF9A7_ae) || (auto941FF9A7_ai <= 0 && lv_loopint >= auto941FF9A7_ae) ) ; lv_loopint += auto941FF9A7_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[3]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[3], UnitLastCreatedGroup());
    }
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Civilian") || (UnitGetType(UnitGroupLoopCurrent()) == "CivilianFemale"))) {
            UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
}

trigger auto_gf_SpawnItem_Trigger = null;
string auto_gf_SpawnItem_lp_item;
int auto_gf_SpawnItem_lp_chance;

void gf_SpawnItem (string lp_item, int lp_chance) {
    auto_gf_SpawnItem_lp_item = lp_item;
    auto_gf_SpawnItem_lp_chance = lp_chance;

    if (auto_gf_SpawnItem_Trigger == null) {
        auto_gf_SpawnItem_Trigger = TriggerCreate("auto_gf_SpawnItem_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnItem_Trigger, false, false);
}

bool auto_gf_SpawnItem_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_gf_SpawnItem_lp_item;
    int lp_chance = auto_gf_SpawnItem_lp_chance;

    // Variable Declarations
    point lv_point;
    unit lv_droppod;
    unit lv_itemspawned;
    bool lv_itemisvisible;

    // Variable Initialization
    lv_point = RegionRandomPoint(RegionPlayableMap());

    // Implementation
    while (true) {
        lv_point = RegionRandomPoint(RegionPlayableMap());
        if ((PointPathingPassable(lv_point) == true)) {
            break;
        }

    }
    if ((RandomInt(1, lp_chance) == 1)) {
        Wait(RandomFixed(0.0, 1.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lv_point);
        lv_itemspawned = UnitLastCreated();
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
        }

        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_itemspawned, PlayerGroupLoopCurrent()) == true)) {
                lv_itemisvisible = true;
            }

        }
        PlayerGroupLoopEnd();
        if ((lv_itemisvisible == true)) {
            UnitBehaviorAdd(UnitLastCreated(), "NoDraw", UnitLastCreated(), 1);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lv_point);
            lv_droppod = UnitLastCreated();
            UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
            Wait(2.0, c_timeGame);
            UnitBehaviorRemove(lv_itemspawned, "NoDraw", 1);
            UnitKill(lv_droppod);
            Wait(2.0, c_timeGame);
            UnitRemove(lv_droppod);
        }

    }

    return true;
}

trigger auto_gf_AirDropItemLoc_Trigger = null;
string auto_gf_AirDropItemLoc_lp_item;
point auto_gf_AirDropItemLoc_lp_loc;
int auto_gf_AirDropItemLoc_lp_chance;

void gf_AirDropItemLoc (string lp_item, point lp_loc, int lp_chance) {
    auto_gf_AirDropItemLoc_lp_item = lp_item;
    auto_gf_AirDropItemLoc_lp_loc = lp_loc;
    auto_gf_AirDropItemLoc_lp_chance = lp_chance;

    if (auto_gf_AirDropItemLoc_Trigger == null) {
        auto_gf_AirDropItemLoc_Trigger = TriggerCreate("auto_gf_AirDropItemLoc_TriggerFunc");
    }

    TriggerExecute(auto_gf_AirDropItemLoc_Trigger, false, false);
}

bool auto_gf_AirDropItemLoc_TriggerFunc (bool testConds, bool runActions) {
    string lp_item = auto_gf_AirDropItemLoc_lp_item;
    point lp_loc = auto_gf_AirDropItemLoc_lp_loc;
    int lp_chance = auto_gf_AirDropItemLoc_lp_chance;

    // Variable Declarations
    unit lv_droppod;

    // Variable Initialization

    // Implementation
    if ((RandomInt(1, lp_chance) == 1)) {
        Wait(RandomFixed(0.0, 1.5), c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, lp_loc);
        lv_droppod = UnitLastCreated();
        UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
        Wait(2.0, c_timeGame);
        UnitKill(lv_droppod);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, 0, lp_loc);
        if ((lp_item == "Magazines")) {
            UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
        }

        Wait(2.0, c_timeGame);
        UnitRemove(lv_droppod);
    }

    return true;
}

void gf_RemoveItemIfZero (unit lp_unit, string lp_chargestring, fixed lp_maxcharges) {
    // Implementation
    if ((UnitGetChargeUsed(lp_unit, lp_chargestring) == lp_maxcharges)) {
        UnitRemove(lp_unit);
    }

}

fixed gf_negativereal (fixed lp_real) {
    // Implementation
    return (0.0 - lp_real);
}

fixed gf_chargesremaining (unit lp_item, string lp_chargestring, fixed lp_maxcharges) {
    // Implementation
    return (lp_maxcharges - UnitGetChargeUsed(lp_item, lp_chargestring));
}

int gf_CountItemTypeUsed (string lp_itemtype, unit lp_unit, string lp_chargestring) {
    int autoA5ABE62C_ae;
    int autoA5ABE62C_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_count;

    // Variable Initialization

    // Implementation
    autoA5ABE62C_ae = 6;
    autoA5ABE62C_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoA5ABE62C_ai >= 0 && lv_loopint <= autoA5ABE62C_ae) || (autoA5ABE62C_ai <= 0 && lv_loopint >= autoA5ABE62C_ae) ) ; lv_loopint += autoA5ABE62C_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == lp_itemtype) && (UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), lp_chargestring) >= 1.0)) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

int gf_CountItemType (string lp_itemtype, unit lp_unit) {
    int autoFC371FEA_ae;
    int autoFC371FEA_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_count;

    // Variable Initialization

    // Implementation
    autoFC371FEA_ae = 6;
    autoFC371FEA_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoFC371FEA_ai >= 0 && lv_loopint <= autoFC371FEA_ae) || (autoFC371FEA_ai <= 0 && lv_loopint >= autoFC371FEA_ae) ) ; lv_loopint += autoFC371FEA_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == lp_itemtype)) {
            lv_count = (lv_count + 1);
        }

    }
    return lv_count;
}

unit gf_FirstItemType (string lp_itemtype, unit lp_unit) {
    int auto26521465_ae;
    int auto26521465_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Implementation
    auto26521465_ae = 6;
    auto26521465_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto26521465_ai >= 0 && lv_loopint <= auto26521465_ae) || (auto26521465_ai <= 0 && lv_loopint >= auto26521465_ae) ) ; lv_loopint += auto26521465_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == lp_itemtype)) {
            return UnitInventoryItem(lp_unit, lv_loopint);
        }

    }
    return null;
}

unit gf_FirstAmmoUsed (unit lp_unit) {
    int auto7FC2B636_ae;
    int auto7FC2B636_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Implementation
    auto7FC2B636_ae = 6;
    auto7FC2B636_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto7FC2B636_ai >= 0 && lv_loopint <= auto7FC2B636_ae) || (auto7FC2B636_ai <= 0 && lv_loopint >= auto7FC2B636_ae) ) ; lv_loopint += auto7FC2B636_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), "AmmoCharges") >= 1.0) && ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "AmmoCase") || (UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "Magazines"))) {
            return UnitInventoryItem(lp_unit, lv_loopint);
        }

    }
    return null;
}

unit gf_FirstAmmoCaseUsed (unit lp_unit) {
    int autoAA52D19E_ae;
    int autoAA52D19E_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Implementation
    autoAA52D19E_ae = 6;
    autoAA52D19E_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoAA52D19E_ai >= 0 && lv_loopint <= autoAA52D19E_ae) || (autoAA52D19E_ai <= 0 && lv_loopint >= autoAA52D19E_ae) ) ; lv_loopint += autoAA52D19E_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), "AmmoCharges") >= 1.0) && (UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "AmmoCase")) {
            return UnitInventoryItem(lp_unit, lv_loopint);
        }

    }
    return null;
}

unit gf_First40mmGrenadeUsed (unit lp_unit) {
    int auto1C64CD19_ae;
    int auto1C64CD19_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Implementation
    auto1C64CD19_ae = 6;
    auto1C64CD19_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto1C64CD19_ai >= 0 && lv_loopint <= auto1C64CD19_ae) || (auto1C64CD19_ai <= 0 && lv_loopint >= auto1C64CD19_ae) ) ; lv_loopint += auto1C64CD19_ai ) {
        if ((UnitGetChargeUsed(UnitInventoryItem(lp_unit, lv_loopint), "ItemCharges") >= 1.0) && ((UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "MGL") || (UnitGetType(UnitInventoryItem(lp_unit, lv_loopint)) == "M5MAR"))) {
            return UnitInventoryItem(lp_unit, lv_loopint);
        }

    }
    return null;
}

unit gf_SameItemTypeUsed (unit lp_host, unit lp_firstitem, string lp_chargestring) {
    int auto986FA166_ae;
    int auto986FA166_ai;

    // Variable Declarations
    int lv_loopint;
    string lv_itemtype;

    // Variable Initialization
    lv_itemtype = UnitGetType(lp_firstitem);

    // Implementation
    auto986FA166_ae = 6;
    auto986FA166_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto986FA166_ai >= 0 && lv_loopint <= auto986FA166_ae) || (auto986FA166_ai <= 0 && lv_loopint >= auto986FA166_ae) ) ; lv_loopint += auto986FA166_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_host, lv_loopint)) == lv_itemtype) && (lp_firstitem != UnitInventoryItem(lp_host, lv_loopint)) && (UnitGetChargeUsed(UnitInventoryItem(lp_host, lv_loopint), lp_chargestring) >= 1.0)) {
            return UnitInventoryItem(lp_host, lv_loopint);
        }

    }
    return null;
}

unit gf_SameItemType (unit lp_host, unit lp_firstitem) {
    int auto0C1096B6_ae;
    int auto0C1096B6_ai;

    // Variable Declarations
    int lv_loopint;
    string lv_itemtype;

    // Variable Initialization
    lv_itemtype = UnitGetType(lp_firstitem);

    // Implementation
    auto0C1096B6_ae = 6;
    auto0C1096B6_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto0C1096B6_ai >= 0 && lv_loopint <= auto0C1096B6_ae) || (auto0C1096B6_ai <= 0 && lv_loopint >= auto0C1096B6_ae) ) ; lv_loopint += auto0C1096B6_ai ) {
        if ((UnitGetType(UnitInventoryItem(lp_host, lv_loopint)) == lv_itemtype) && (lp_firstitem != UnitInventoryItem(lp_host, lv_loopint))) {
            return UnitInventoryItem(lp_host, lv_loopint);
        }

    }
    return null;
}

void gf_CombineItems (unit lp_reciever, unit lp_donator, string lp_chargestring, fixed lp_maxcharges) {
    // Variable Declarations
    fixed lv_difference;

    // Variable Initialization

    // Implementation
    if ((UnitGetChargeUsed(lp_donator, lp_chargestring) >= 1.0)) {
        lv_difference = UnitGetChargeUsed(lp_reciever, lp_chargestring);
        if ((lv_difference > (lp_maxcharges - UnitGetChargeUsed(lp_donator, lp_chargestring)))) {
            lv_difference = (gf_negativereal(lp_maxcharges) + UnitGetChargeUsed(lp_donator, lp_chargestring));
            UnitRemove(lp_donator);
            UnitAddChargeUsed(lp_reciever, lp_chargestring, lv_difference);
        }
        else {
            UnitAddChargeUsed(lp_reciever, lp_chargestring, gf_negativereal(lv_difference));
            UnitAddChargeUsed(lp_donator, lp_chargestring, lv_difference);
            gf_RemoveItemIfZero(lp_donator, lp_chargestring, lp_maxcharges);
        }
    }

}

void gf_DonateItems (unit lp_reciever, unit lp_donator, string lp_chargestring, fixed lp_maxchargesdonator) {
    // Variable Declarations
    fixed lv_difference;

    // Variable Initialization

    // Implementation
    lv_difference = UnitGetChargeUsed(lp_reciever, lp_chargestring);
    if ((lv_difference >= lp_maxchargesdonator) && (UnitGetChargeUsed(lp_donator, lp_chargestring) == 0.0)) {
        UnitRemove(lp_donator);
        UnitAddChargeUsed(lp_reciever, lp_chargestring, gf_negativereal(lp_maxchargesdonator));
    }
    else {
        if ((lv_difference >= gf_chargesremaining(lp_donator, lp_chargestring, lp_maxchargesdonator))) {
            lv_difference = gf_chargesremaining(lp_donator, lp_chargestring, lp_maxchargesdonator);
            UnitRemove(lp_donator);
        }
        else {
            UnitAddChargeUsed(lp_donator, lp_chargestring, lv_difference);
        }
        UnitAddChargeUsed(lp_reciever, lp_chargestring, gf_negativereal(lv_difference));
    }
    gf_RemoveItemIfZero(lp_donator, lp_chargestring, lp_maxchargesdonator);
}

void gf_ReloadSentry (unit lp_sentry, unit lp_magazine, fixed lp_value) {
    // Variable Declarations
    string lv_magazinetype;
    string lv_magazineitemtype;
    fixed lv_magazinemaxcharges;
    fixed lv_magazinecurrentcharges;
    fixed lv_magazinechargesneeded;
    unit lv_returnedmagazine;

    // Variable Initialization
    lv_magazinetype = UnitGetType(lp_magazine);
    lv_magazineitemtype = CatalogFieldValueGet(c_gameCatalogUnit, lv_magazinetype, "Item", c_playerAny);
    lv_magazinemaxcharges = CatalogFieldValueGetAsInt(c_gameCatalogItem, lv_magazineitemtype, "EffectCost.Charge.CountMax", c_playerAny);
    lv_magazinecurrentcharges = (lv_magazinemaxcharges - UnitGetChargeUsed(lp_magazine, "AmmoCharges"));
    lv_magazinechargesneeded = ((UnitGetPropertyFixed(lp_sentry, c_unitPropEnergyMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_sentry, c_unitPropEnergy, c_unitPropCurrent)) / lp_value);

    // Implementation
    if ((lv_magazinechargesneeded > 0.0) && (lv_magazinecurrentcharges > 0.0)) {
        if ((lv_magazinechargesneeded > lv_magazinecurrentcharges)) {
            UnitSetPropertyFixed(lp_sentry, c_unitPropEnergy, (UnitGetPropertyFixed(lp_sentry, c_unitPropEnergy, c_unitPropCurrent) + (lv_magazinecurrentcharges * lp_value)));
            lv_magazinecurrentcharges = 0.0;
        }
        else {
            UnitSetPropertyFixed(lp_sentry, c_unitPropEnergy, UnitGetPropertyFixed(lp_sentry, c_unitPropEnergyMax, c_unitPropCurrent));
            lv_magazinecurrentcharges -= FixedToInt(lv_magazinechargesneeded);
            if ((RandomFixed(0.0, 1.0) >= ModF(lv_magazinechargesneeded, 1.0))) {
            }
            else {
                lv_magazinecurrentcharges -= 1.0;
            }
        }
        SoundPlayOnUnit(SoundLink("AmmoBelt", -1), PlayerGroupAll(), lp_sentry, 0.0, 100.0, 0.0);
    }

    if ((UnitGetType(lp_magazine) == "Magazines") && (lv_magazinecurrentcharges <= 0.0)) {
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_magazinetype, 0, 0, PointWithOffset(UnitGetPosition(lp_sentry), 1.0, -1.0));
        lv_returnedmagazine = UnitLastCreated();
        libNtve_gf_UnitRemoveChargeUsed(lv_returnedmagazine, "AmmoCharges");
        UnitAddChargeUsed(lv_returnedmagazine, "AmmoCharges", (lv_magazinemaxcharges - lv_magazinecurrentcharges));
    }
    UnitInventoryRemove(lp_magazine);
}

void gf_WeaponCacheSpawnItem (string lp_itemUnitType, int lp_number, region lp_cacheSite) {
    int auto49BD4268_n;
    int auto49BD4268_i;
    int auto65309E11_n;
    int auto65309E11_i;

    // Variable Declarations
    bool lv_succeded;
    point lv_where;
    point lv_from;

    // Variable Initialization
    lv_from = RegionGetCenter(lp_cacheSite);

    // Implementation
    auto49BD4268_n = lp_number;
    for (auto49BD4268_i = 1; auto49BD4268_i <= auto49BD4268_n; auto49BD4268_i += 1) {
        lv_succeded = false;
        auto65309E11_n = 8;
        for (auto65309E11_i = 1; auto65309E11_i <= auto65309E11_n; auto65309E11_i += 1) {
            lv_where = RegionRandomPoint(lp_cacheSite);
            if ((PointPathingPassable(lv_where) == true) && (PointPathingIsConnected(lv_from, lv_where) == true)) {
                lv_succeded = true;
                break;
            }

        }
        if ((lv_succeded == false)) {
            lv_where = lv_from;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_itemUnitType, c_unitCreateIgnorePlacement, 0, lv_where);
    }
}

trigger auto_gf_ChainJAG_Trigger = null;
unit auto_gf_ChainJAG_lp_source;
unit auto_gf_ChainJAG_lp_target;

void gf_ChainJAG (unit lp_source, unit lp_target) {
    auto_gf_ChainJAG_lp_source = lp_source;
    auto_gf_ChainJAG_lp_target = lp_target;

    if (auto_gf_ChainJAG_Trigger == null) {
        auto_gf_ChainJAG_Trigger = TriggerCreate("auto_gf_ChainJAG_TriggerFunc");
    }

    TriggerExecute(auto_gf_ChainJAG_Trigger, false, false);
}

bool auto_gf_ChainJAG_TriggerFunc (bool testConds, bool runActions) {
    unit lp_source = auto_gf_ChainJAG_lp_source;
    unit lp_target = auto_gf_ChainJAG_lp_target;

    // Variable Declarations
    bool lv_test;
    unit lv_target;

    // Variable Initialization

    // Implementation
    lv_test = UnitHasBehavior(lp_source, "aidummychainjag");
    UnitBehaviorAdd(lp_source, "aidummychainjag", lp_target, 1);
    if ((lv_test != true)) {
        while ((UnitIsAlive(lp_source) == true) && (UnitHasBehavior(lp_source, "aidummychainjag") == true)) {
            if ((UnitCheckAbilCmdState(lp_source, AbilityCommand("JAG108Missile", 0), c_cmdStateHasCharges) != true)) {
                UnitBehaviorRemove(lp_source, "aidummychainjag", 1);
                break;
            }
            else if ((UnitCheckAbilCmdState(lp_source, AbilityCommand("JAG108Missile", 0), c_cmdStateExecuting | c_cmdStateCooldown) != true)) {
                lv_target = UnitBehaviorEffectUnit(lp_source, "aidummychainjag", c_effectUnitSource, 0);
                if ((UnitIsAlive(lv_target) == true) && (OrderGetAbilityCommand(UnitOrder(lp_source, 0)) != AbilityCommand("JAG108Missile", 0)) && (OrderGetAbilityCommand(UnitOrder(lp_source, 1)) != AbilityCommand("JAG108Missile", 0))) {
                    UnitIssueOrder(lp_source, OrderTargetingUnit(AbilityCommand("JAG108Missile", 0), lv_target), c_orderQueueAddToFront);
                }
                else {
                    UnitBehaviorRemove(lp_source, "aidummychainjag", 1);
                    UnitBehaviorRemove(lp_source, "aidummyhelicopterrf", 1);
                    break;
                }
            }
            else if ((UnitCheckAbilCmdState(lp_source, AbilityCommand("JAG108Missile", 0), c_cmdStateCooldown) == true)) {
                Wait(UnitAbilityGetCooldown(lp_source, "JAG108Missile", "Abil/JAG108Missile"), c_timeGame);
            }
            Wait(0.1875, c_timeGame);
        }
    }

    return true;
}

int gf_CyborgMode (unit lp_cyborg) {
    // Implementation
    if (((UnitHasBehavior(lp_cyborg, "Strength2") == true) || (UnitHasBehavior(lp_cyborg, "Strength3") == true))) {
        return 1;
    }

    return 0;
}

trigger auto_gf_DropShellatTarget_Trigger = null;
point auto_gf_DropShellatTarget_lp_target;
string auto_gf_DropShellatTarget_lp_effect;
int auto_gf_DropShellatTarget_lp_player;

void gf_DropShellatTarget (point lp_target, string lp_effect, int lp_player) {
    auto_gf_DropShellatTarget_lp_target = lp_target;
    auto_gf_DropShellatTarget_lp_effect = lp_effect;
    auto_gf_DropShellatTarget_lp_player = lp_player;

    if (auto_gf_DropShellatTarget_Trigger == null) {
        auto_gf_DropShellatTarget_Trigger = TriggerCreate("auto_gf_DropShellatTarget_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropShellatTarget_Trigger, false, false);
}

bool auto_gf_DropShellatTarget_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_DropShellatTarget_lp_target;
    string lp_effect = auto_gf_DropShellatTarget_lp_effect;
    int lp_player = auto_gf_DropShellatTarget_lp_player;

    // Variable Declarations
    unit lv_dummyunit;
    point lv_dummypoint;

    // Variable Initialization
    lv_dummypoint = PointWithOffsetPolar(lp_target, 10.0, RandomFixed(125.0, 145.0));

    // Implementation
    if ((RegionContainsPoint(RegionEntireMap(), lv_dummypoint) == false)) {
        lv_dummypoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_dummypoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_dummypoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    }

    libNtve_gf_UnitCreateFacingPoint(1, "CasterDummy", c_unitCreateIgnorePlacement, lp_player, lv_dummypoint, lp_target);
    lv_dummyunit = UnitLastCreated();
    UnitBehaviorAdd(lv_dummyunit, "KillsToCaster", gv_playerHeroes[lp_player], 1);
    UnitCreateEffectPoint(lv_dummyunit, lp_effect, lp_target);
    Wait(4.0, c_timeGame);
    UnitRemove(lv_dummyunit);
    return true;
}

trigger auto_gf_DropShellatTargetPMC_Trigger = null;
point auto_gf_DropShellatTargetPMC_lp_target;
string auto_gf_DropShellatTargetPMC_lp_effect;
int auto_gf_DropShellatTargetPMC_lp_player;

void gf_DropShellatTargetPMC (point lp_target, string lp_effect, int lp_player) {
    auto_gf_DropShellatTargetPMC_lp_target = lp_target;
    auto_gf_DropShellatTargetPMC_lp_effect = lp_effect;
    auto_gf_DropShellatTargetPMC_lp_player = lp_player;

    if (auto_gf_DropShellatTargetPMC_Trigger == null) {
        auto_gf_DropShellatTargetPMC_Trigger = TriggerCreate("auto_gf_DropShellatTargetPMC_TriggerFunc");
    }

    TriggerExecute(auto_gf_DropShellatTargetPMC_Trigger, false, false);
}

bool auto_gf_DropShellatTargetPMC_TriggerFunc (bool testConds, bool runActions) {
    point lp_target = auto_gf_DropShellatTargetPMC_lp_target;
    string lp_effect = auto_gf_DropShellatTargetPMC_lp_effect;
    int lp_player = auto_gf_DropShellatTargetPMC_lp_player;

    // Variable Declarations
    unit lv_dummyunit;

    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "CasterDummy", c_unitCreateIgnorePlacement, lp_player, PointWithOffsetPolar(lp_target, 10.0, RandomFixed(35.0, 55.0)), lp_target);
    lv_dummyunit = UnitLastCreated();
    UnitCreateEffectPoint(lv_dummyunit, lp_effect, lp_target);
    Wait(4.0, c_timeGame);
    UnitRemove(lv_dummyunit);
    return true;
}

int gf_LNDataFindFreeSlot (int lp_slotnumber) {
    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Implementation
    while ((lv_loopint < gv_lNDataEntriesSize)) {
        lp_slotnumber -= (gv_lNDataEntries[lv_loopint].lv_maximumnumber - UnitGroupCount(gv_lNDataEntries[lv_loopint].lv_existing, c_unitCountAlive));
        if ((lp_slotnumber < 0)) {
            return lv_loopint;
        }

        lv_loopint += 1;
    }
    return -1;
}

bool gf_Parity (int lp_integer) {
    // Variable Declarations
    string lv_i2s;

    // Variable Initialization
    lv_i2s = "";

    // Implementation
    lv_i2s = IntToString(lp_integer);
    if (((StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "1") || (StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "3") || (StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "5") || (StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "7") || (StringSub(lv_i2s, StringLength(lv_i2s), StringLength(lv_i2s)) == "9"))) {
        return true;
    }

    return false;
}

trigger auto_gf_BlendFog_Trigger = null;
fixed auto_gf_BlendFog_lp_colorR;
fixed auto_gf_BlendFog_lp_colorG;
fixed auto_gf_BlendFog_lp_colorB;
fixed auto_gf_BlendFog_lp_density;
fixed auto_gf_BlendFog_lp_falloff;
fixed auto_gf_BlendFog_lp_start;
int auto_gf_BlendFog_lp_blendtime;

void gf_BlendFog (fixed lp_colorR, fixed lp_colorG, fixed lp_colorB, fixed lp_density, fixed lp_falloff, fixed lp_start, int lp_blendtime) {
    auto_gf_BlendFog_lp_colorR = lp_colorR;
    auto_gf_BlendFog_lp_colorG = lp_colorG;
    auto_gf_BlendFog_lp_colorB = lp_colorB;
    auto_gf_BlendFog_lp_density = lp_density;
    auto_gf_BlendFog_lp_falloff = lp_falloff;
    auto_gf_BlendFog_lp_start = lp_start;
    auto_gf_BlendFog_lp_blendtime = lp_blendtime;

    if (auto_gf_BlendFog_Trigger == null) {
        auto_gf_BlendFog_Trigger = TriggerCreate("auto_gf_BlendFog_TriggerFunc");
    }

    TriggerExecute(auto_gf_BlendFog_Trigger, false, false);
}

bool auto_gf_BlendFog_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_colorR = auto_gf_BlendFog_lp_colorR;
    fixed lp_colorG = auto_gf_BlendFog_lp_colorG;
    fixed lp_colorB = auto_gf_BlendFog_lp_colorB;
    fixed lp_density = auto_gf_BlendFog_lp_density;
    fixed lp_falloff = auto_gf_BlendFog_lp_falloff;
    fixed lp_start = auto_gf_BlendFog_lp_start;
    int lp_blendtime = auto_gf_BlendFog_lp_blendtime;

    int auto61A93796_ae;
    int auto61A93796_ai;
    int auto895049DC_ae;
    int auto895049DC_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_int;
    fixed[7] lv_intervals;

    // Variable Initialization

    // Implementation
    lv_intervals[1] = ((lp_colorR - gv_fogvars[1]) / IntToFixed(lp_blendtime));
    lv_intervals[2] = ((lp_colorG - gv_fogvars[2]) / IntToFixed(lp_blendtime));
    lv_intervals[3] = ((lp_colorB - gv_fogvars[3]) / IntToFixed(lp_blendtime));
    lv_intervals[4] = ((lp_density - gv_fogvars[4]) / IntToFixed(lp_blendtime));
    lv_intervals[5] = ((lp_falloff - gv_fogvars[5]) / IntToFixed(lp_blendtime));
    lv_intervals[6] = ((lp_start - gv_fogvars[6]) / IntToFixed(lp_blendtime));
    auto61A93796_ae = lp_blendtime;
    auto61A93796_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto61A93796_ai >= 0 && lv_loopint <= auto61A93796_ae) || (auto61A93796_ai <= 0 && lv_loopint >= auto61A93796_ae) ) ; lv_loopint += auto61A93796_ai ) {
        auto895049DC_ae = 6;
        auto895049DC_ai = 1;
        lv_int = 1;
        for ( ; ( (auto895049DC_ai >= 0 && lv_int <= auto895049DC_ae) || (auto895049DC_ai <= 0 && lv_int >= auto895049DC_ae) ) ; lv_int += auto895049DC_ai ) {
            gv_fogvars[lv_int] = (gv_fogvars[lv_int] + lv_intervals[lv_int]);
        }
        FogSetColor(Color(gv_fogvars[1], gv_fogvars[2], gv_fogvars[3]));
        FogSetDensity(gv_fogvars[4]);
        FogSetFallOff(gv_fogvars[5]);
        FogSetStartHeight(gv_fogvars[6]);
        Wait(0.01, c_timeGame);
    }
    FogSetColor(Color(lp_colorR, lp_colorG, lp_colorB));
    FogSetDensity(lp_density);
    FogSetFallOff(lp_falloff);
    FogSetStartHeight(lp_start);
    gv_fogvars[1] = lp_colorR;
    gv_fogvars[2] = lp_colorG;
    gv_fogvars[3] = lp_colorB;
    gv_fogvars[4] = lp_density;
    gv_fogvars[5] = lp_falloff;
    gv_fogvars[6] = lp_start;
    return true;
}

void gf_BlendFogNew (fixed lp_colorR, fixed lp_colorG, fixed lp_colorB, fixed lp_density, fixed lp_falloff, fixed lp_start, fixed lp_blendtime) {
    // Implementation
    FogSetColorOverTime(Color(lp_colorR, lp_colorG, lp_colorB), lp_blendtime);
    FogSetDensityOverTime(lp_density, lp_blendtime);
    FogSetFallOffOverTime(lp_falloff, lp_blendtime);
    FogSetStartHeightOverTime(lp_start, lp_blendtime);
    gv_fogvars[1] = lp_colorR;
    gv_fogvars[2] = lp_colorG;
    gv_fogvars[3] = lp_colorB;
    gv_fogvars[4] = lp_density;
    gv_fogvars[5] = lp_falloff;
    gv_fogvars[6] = lp_start;
}

void gf_SetNewLighting (string lp_light, fixed lp_blendtime) {
    // Implementation
    gv_currentlighting = lp_light;
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerNODson[PlayerGroupLoopCurrent()] == false)) {
            PlayerSetLighting(PlayerGroupLoopCurrent(), lp_light, lp_blendtime);
        }
        else {
            if ((lp_light == "UA3Night")) {
                PlayerSetLighting(PlayerGroupLoopCurrent(), "NODs", lp_blendtime);
            }
            else {
                PlayerSetLighting(PlayerGroupLoopCurrent(), "NODsBright", lp_blendtime);
            }
        }
    }
    PlayerGroupLoopEnd();
}

void gf_ResetLighting (fixed lp_blendtime) {
    // Implementation
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerNODson[PlayerGroupLoopCurrent()] == false)) {
            PlayerSetLighting(PlayerGroupLoopCurrent(), gv_currentlighting, lp_blendtime);
        }
        else {
            if ((gv_currentlighting == "UA3Night")) {
                PlayerSetLighting(PlayerGroupLoopCurrent(), "NODs", lp_blendtime);
            }
            else {
                PlayerSetLighting(PlayerGroupLoopCurrent(), "NODsBright", lp_blendtime);
            }
        }
    }
    PlayerGroupLoopEnd();
}

text gf_TextImage (string lp_imgpath, int lp_scale) {
    // Implementation
    return (StringExternal("Param/Value/9E1FD4D9") + StringToText(lp_imgpath) + StringExternal("Param/Value/7108FFDA") + IntToText(lp_scale) + StringExternal("Param/Value/CC9A18E9") + IntToText(lp_scale) + StringExternal("Param/Value/C879867F"));
}

void gf_InitGameSetup () {
    int auto003AFEF1_ae;
    int auto003AFEF1_ai;
    int auto8E01745E_ae;
    int auto8E01745E_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_loopint2;

    // Variable Initialization
    lv_loopint = 1;
    lv_loopint2 = 1;

    // Implementation
    TriggerDestroy(libSwaC_gt_ZS_OverlordRally);
    TriggerDestroy(libSwaC_gt_ZS_KerriganLifeTooLow);
    TriggerDestroy(libSwaC_gt_ZS_KerriganDies);
    TriggerDestroy(libSwaC_gt_ZS_KerriganDied);
    TriggerDestroy(libSwaC_gt_ZS_FeaturedZergStructureDies);
    TriggerDestroy(libSwaC_gt_ZS_CamStatsGameLoaded);
    TriggerDestroy(libSwaC_gt_ZS_AbortMission);
    TriggerDestroy(libSwaC_gt_ZS_CampaignUnitCreated);
    TriggerDestroy(libSwaC_gt_ZS_CampaignUnitChangeOwner);
    TriggerDestroy(libSwaC_gt_ZS_CampaignUnitInfoUnitMorphes);
    TriggerDestroy(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood2);
    TriggerDestroy(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood3);
    TriggerDestroy(libSwaC_gt_ZS_PlayerNeedOverlordButtonClickedFood6);
    TriggerDestroy(libSwaC_gt_ZS_ResourcePickup);
    TriggerDestroy(libSwaC_gt_ZS_BaseUnderAttackByGround);
    TriggerDestroy(libSwaC_gt_ZS_OverlordRallyEnable);
    TriggerDestroy(libSwaC_gt_ZS_BaseUnderAttackByGroundSpineCrawlerBuilt);
    TriggerDestroy(libSwaC_gt_ZS_ZerglingRespawnCheat);
    TriggerDestroy(libSwaC_gt_ZS_HatcheryEggModels);
    TriggerDestroy(libSwaC_gt_ZS_HatcheryEggBirths);
    TriggerDestroy(libSwaC_gt_ZS_ZerglingRespawnAchievementAdd);
    TriggerDestroy(libSwaC_gt_ZS_MissionTipClicked);
    TriggerDestroy(libSwaC_gt_ZS_CamStatsHelpOpened);
    TriggerDestroy(libSwaC_gt_ZS_LoadCampaignStatsData);
    TriggerDestroy(libSwaC_gt_ZS_SaveCampaignStatsData);
    TriggerDestroy(libSwaC_gt_ZS_SetCasualRallyPoints);
    TriggerDestroy(libSwaC_gt_ZS_ArmyCustomMissionPitchPlay);
    TriggerDestroy(libSwaC_gt_ZS_ArmyCustomMissionPitchStop);
    TriggerDestroy(libSwaC_gt_ZS_KerriganDied);
    TriggerDestroy(libSwaC_gt_ZS_KerriganUITierCloseButtonClicked);
    TriggerDestroy(libSwaC_gt_ZS_KerriganUITierAbilityButtonClick);
    TriggerDestroy(libSwaC_gt_ZS_ArchivesHandleMissionLoad);
    TriggerDestroy(libSwaC_gt_ZS_FootageRecording);
    TriggerDestroy(libSwaC_gt_ZS_CampaignProgressButtonClicked); 
    TriggerDestroy(libSwaC_gt_ZS_CampaignProgressTechButtonClicked);
    TriggerDestroy(libLbty_gt_MeleeSurrender_Surrender);
    TriggerDestroy(libLbty_gt_MeleeSurrender_SurrenderClickedButton);
    TriggerDestroy(libLbty_gt_MeleeSurrender_FlashDialog);
    TriggerDestroy(libNtve_gt_ScreenButtonClicked);
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    PlayerSetColorIndex(14, 14, true);
    PlayerSetColorIndex(13, 13, true);
    PlayerSetColorIndex(15, 14, true);
    gv_spawnRegion = RegionFromId(64);
    RegionAddRegion(gv_spawnRegion, RegionFromId(65));
    RegionAddRegion(gv_spawnRegion, RegionFromId(66));
    RegionAddRegion(gv_spawnRegion, RegionFromId(77));
    RegionAddRegion(gv_spawnRegion, RegionFromId(78));
    gv_bossSpawnRegion = RegionFromId(64);
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(65));
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(66));
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(77));
    RegionAddRegion(gv_bossSpawnRegion, RegionFromId(78));
    RegionAddRegion(gv_spawnRegion, RegionFromId(3));
    RegionAddRegion(gv_spawnRegion, RegionFromId(4));
    RegionAddRegion(gv_spawnRegion, RegionFromId(2));
    RegionAddRegion(gv_spawnRegion, RegionFromId(1));
    gv_umbraRegion = RegionFromId(143);
    RegionAddRegion(gv_umbraRegion, RegionFromId(144));
    RegionAddRegion(gv_umbraRegion, RegionFromId(10));
    RegionAddRegion(gv_umbraRegion, RegionFromId(84));
    RegionAddRegion(gv_umbraRegion, RegionFromId(82));
    RegionAddRegion(gv_umbraRegion, RegionFromId(22));
    RegionAddRegion(gv_umbraRegion, RegionFromId(67));
    RegionAddRegion(gv_umbraRegion, RegionFromId(87));
    RegionAddRegion(gv_umbraRegion, RegionFromId(89));
    gv_mapEdges[1] = RegionFromId(1);
    gv_mapEdges[2] = RegionFromId(2);
    gv_mapEdges[3] = RegionFromId(3);
    gv_mapEdges[4] = RegionFromId(4);
    gv_modespawnmodifier[1] = -1;
    gv_modespawnmodifier[2] = 0;
    gv_modespawnmodifier[3] = 1;
    gv_modespawnmodifier[4] = 2;
    gv_modespawnmodifier[5] = 3;
    gv_modespawnmodifier[6] = -1;
    gv_modespawnmodifier[7] = 2;
    gv_lZs[1] = RegionFromId(13);
    gv_lZs[2] = RegionFromId(15);
    gv_lZs[3] = RegionFromId(14);
    gv_lZs[4] = RegionFromId(16);
    gv_lZs[5] = RegionFromId(6);
    gv_pingnumeral[1] = "PingNumeric1";
    gv_pingnumeral[2] = "PingNumeric2";
    gv_pingnumeral[3] = "PingNumeric3";
    gv_pingnumeral[4] = "PingNumeric4";
    gv_pingnumeral[5] = "PingNumeric5";
    gv_pingnumeral[6] = "PingNumeric6";
    gv_pingnumeral[7] = "PingNumeric7";
    gv_pingnumeral[8] = "PingNumeric8";
    gv_pingnumeral[9] = "PingNumeric9";
    VisRevealArea(14, RegionPlayableMap(), 0.0, false);
    auto003AFEF1_ae = 12;
    auto003AFEF1_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto003AFEF1_ai >= 0 && lv_loopint <= auto003AFEF1_ae) || (auto003AFEF1_ai <= 0 && lv_loopint >= auto003AFEF1_ae) ) ; lv_loopint += auto003AFEF1_ai ) {
        MeleeSetOption(lv_loopint, c_meleeOptionSplitResources, false);
        libNtve_gf_SetAlliance(lv_loopint, 14, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_loopint, 13, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(lv_loopint, 0, libNtve_ge_AllianceSetting_Ally);
        PlayerModifyPropertyInt(lv_loopint, c_playerPropCustom, c_playerPropOperSetTo, 999999);
        if ((PlayerStatus(lv_loopint) == c_playerStatusActive)) {
            PlayerGroupAdd(gv_players, lv_loopint);
            PlayerOptionOverride(lv_loopint, "simplecommandcard", "0");
            PlayerOptionOverride(lv_loopint, "displayunitstatus", "Damaged");
            PlayerOptionOverride(lv_loopint, "showcurrentordermodel", "0");
        }

        lv_loopint2 = 1;
        auto8E01745E_ae = 13;
        auto8E01745E_ai = 1;
        lv_loopint2 = 0;
        for ( ; ( (auto8E01745E_ai >= 0 && lv_loopint2 <= auto8E01745E_ae) || (auto8E01745E_ai <= 0 && lv_loopint2 >= auto8E01745E_ae) ) ; lv_loopint2 += auto8E01745E_ai ) {
            PlayerSetAlliance(lv_loopint, c_allianceIdSeekHelp, lv_loopint2, false);
            PlayerSetAlliance(lv_loopint, c_allianceIdGiveHelp, lv_loopint2, false);
            PlayerSetAlliance(lv_loopint2, c_allianceIdTrade, lv_loopint, false);
            PlayerSetAlliance(lv_loopint, c_allianceIdTrade, lv_loopint2, false);
        }
    }
    gv_startingplayers = PlayerGroupCount(gv_players);
    libNtve_gf_SetAlliance(14, 13, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(14, 0, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 0, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetPlayerGroupAlliance(gv_players, libNtve_ge_AllianceSetting_Ally);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesMade, c_playerPropOperSetTo, 40);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropHandicap, c_playerPropOperSetTo, 100);
        libNtve_gf_SetAlliance(15, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_Ally);
    }
    PlayerGroupLoopEnd();
    gv_spawnCount = (gv_spawnCount + FixedToInt((IntToFixed(PlayerGroupCount(gv_players)) * 0.6)));
    GameSetLighting("UA3Dusk", 0.0);
    gv_fogvars[1] = 50.0;
    gv_fogvars[2] = 50.0;
    gv_fogvars[3] = 50.0;
    gv_fogvars[5] = 1.0;
}

void gf_Preload () {
    // Implementation
    libNtve_gf_PreloadUnit("Rifleman", false);
    libNtve_gf_PreloadUnit("Cyborg", false);
    libNtve_gf_PreloadUnit("FireSupportSpecialist", false);
    libNtve_gf_PreloadUnit("GhostHero", false);
    libNtve_gf_PreloadUnit("JavelinGunner2", false);
    libNtve_gf_PreloadUnit("PlatoonLeader", false);
    libNtve_gf_PreloadUnit("CombatEngineer", false);
    libNtve_gf_PreloadUnit("AutomaticRifleman", false);
    libNtve_gf_PreloadUnit("SquadDesignatedMarksman", false);
    libNtve_gf_PreloadUnit("CavalryScout", false);
    libNtve_gf_PreloadUnit("Flamethrower", false);
    libNtve_gf_PreloadUnit("CombatMedic", false);
    libNtve_gf_PreloadUnit("GhostMini", false);
    libNtve_gf_PreloadUnit("68WCombatMedic", false);
    libNtve_gf_PreloadUnit("InfantrySDM", false);
    libNtve_gf_PreloadUnit("JavelinGunner", false);
    libNtve_gf_PreloadUnit("InfantryAutomaticRifleman", false);
    libNtve_gf_PreloadUnit("CombatEngineerMini", false);
    libNtve_gf_PreloadUnit("Sniper", false);
    libNtve_gf_PreloadUnit("InfantryRifleman", false);
    libNtve_gf_PreloadUnit("LNCombatEngineer", false);
    libNtve_gf_PreloadUnit("LNRifleman", false);
    libNtve_gf_PreloadUnit("LNAutomaticRifleman", false);
    libNtve_gf_PreloadUnit("LNJavelinGunner", false);
    libNtve_gf_PreloadUnit("LNSquadDesignatedMarksman", false);
    libNtve_gf_PreloadUnit("SquadLeader", false);
    libNtve_gf_PreloadUnit("Vesania", false);
    libNtve_gf_PreloadUnit("Civilian", false);
    libNtve_gf_PreloadUnit("CivilianFemale", false);
    libNtve_gf_PreloadUnit("M1Abrams", false);
    libNtve_gf_PreloadUnit("M2BradleyIFV", false);
    libNtve_gf_PreloadUnit("CombatWalker", false);
    libNtve_gf_PreloadUnit("BattleWalker", false);
    libNtve_gf_PreloadUnit("Crab", false);
    libNtve_gf_PreloadUnit("Grotesque", false);
    libNtve_gf_PreloadUnit("Swarmer", false);
    libNtve_gf_PreloadUnit("Morbus", false);
    libNtve_gf_PreloadUnit("Unburied", false);
    libNtve_gf_PreloadUnit("Metasis", false);
    libNtve_gf_PreloadUnit("Lacerti", false);
    libNtve_gf_PreloadUnit("Immussilus", false);
    libNtve_gf_PreloadUnit("Krill", false);
    libNtve_gf_PreloadUnit("Turned", false);
    libNtve_gf_PreloadUnit("Shredder", false);
    libNtve_gf_PreloadUnit("Gargoyle", false);
    libNtve_gf_PreloadUnit("Gourmand", false);
    libNtve_gf_PreloadUnit("Glutton", false);
    libNtve_gf_PreloadUnit("Horror", false);
    libNtve_gf_PreloadUnit("Commando", false);
    libNtve_gf_PreloadUnit("Drake", false);
    libNtve_gf_PreloadUnit("Hopper", false);
    libNtve_gf_PreloadUnit("Raisuli", false);
    libNtve_gf_PreloadUnit("Livid", false);
    libNtve_gf_PreloadUnit("Minerva", false);
    libNtve_gf_PreloadUnit("InfestedCivilian", false);
    libNtve_gf_PreloadUnit("Cacumen", false);
    libNtve_gf_PreloadUnit("Licker", false);
    libNtve_gf_PreloadUnit("Gargantuan", false);
    libNtve_gf_PreloadUnit("Hunter", false);
    libNtve_gf_PreloadUnit("Darreus", false);
    libNtve_gf_PreloadUnit("Bruchus", false);
    libNtve_gf_PreloadUnit("Leaper", false);
    libNtve_gf_PreloadUnit("Zombie", false);
    libNtve_gf_PreloadUnit("Cursed", false);
    libNtve_gf_PreloadUnit("Spitter", false);
    libNtve_gf_PreloadUnit("Pooch", false);
    libNtve_gf_PreloadUnit("Charger", false);
    libNtve_gf_PreloadUnit("StalkerZombie", false);
    libNtve_gf_PreloadUnit("Boomer", false);
    libNtve_gf_PreloadUnit("Tarantula", false);
    libNtve_gf_PreloadUnit("Arachnathid", false);
    libNtve_gf_PreloadUnit("Ares", false);
    libNtve_gf_PreloadUnit("ArachnidMother", false);
    libNtve_gf_PreloadUnit("Risen", false);
    libNtve_gf_PreloadUnit("Eel", false);
    libNtve_gf_PreloadUnit("Thanatos", false);
    libNtve_gf_PreloadUnit("ThresherMaw", false);
}

trigger auto_gf_SavePlayerProgress_Trigger = null;
int auto_gf_SavePlayerProgress_lp_player;

void gf_SavePlayerProgress (int lp_player) {
    auto_gf_SavePlayerProgress_lp_player = lp_player;

    if (auto_gf_SavePlayerProgress_Trigger == null) {
        auto_gf_SavePlayerProgress_Trigger = TriggerCreate("auto_gf_SavePlayerProgress_TriggerFunc");
    }

    TriggerExecute(auto_gf_SavePlayerProgress_Trigger, false, false);
}

bool auto_gf_SavePlayerProgress_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SavePlayerProgress_lp_player;

    // Variable Declarations
    text lv_temptext;
    int lv_loopint;
    string lv_string;
    bank lv_bank;

    // Variable Initialization
    lv_temptext = StringToText("");
    lv_loopint = 1;
    lv_string = "";
    lv_bank = gv_banks[lp_player];

    // Implementation
    if (((gv_savedisabled == true) || (gv_saveprevent[lp_player] == true))) {
        gf_VisorTextDialog(StringExternal("Param/Value/E848F66B"), lp_player);
        return true;
    }

    PlayerBankSave(lp_player);
    lv_string = BankValueGetAsString(gv_banks[lp_player], "Un", "XP");
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/15093126") + StringToText(PlayerHandle(lp_player))));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/132DDB45"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/B7EE6751") + IntToText(gv_playerExperience[1][lp_player])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/95908DB1"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/B93B8C4F") + IntToText(gv_playerExperience[2][lp_player])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/753F3910"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/E4EEA3CF") + IntToText(gv_playerExperience[3][lp_player])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/A9414B50"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/DCC780A5") + IntToText((gv_playerExperience[gv_playerRankSet[lp_player]][lp_player] - gv_playerStartingXP[lp_player]))));
    gf_VisorTextDialog(lv_temptext, lp_player);
    return true;
}

trigger auto_gf_LoadPlayerProgress_Trigger = null;
int auto_gf_LoadPlayerProgress_lp_player;

void gf_LoadPlayerProgress (int lp_player) {
    auto_gf_LoadPlayerProgress_lp_player = lp_player;

    if (auto_gf_LoadPlayerProgress_Trigger == null) {
        auto_gf_LoadPlayerProgress_Trigger = TriggerCreate("auto_gf_LoadPlayerProgress_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadPlayerProgress_Trigger, false, false);
}

bool auto_gf_LoadPlayerProgress_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_LoadPlayerProgress_lp_player;

    // Variable Declarations
    int lv_int;
    bool lv_bool;

    // Variable Initialization
    lv_int = lp_player;

    // Implementation
    gv_playercamounlocked[1][lv_int] = true;
    lv_bool = PlayerBankLoad(lv_int);
    if ((lv_bool == true)) {
        if ((gv_playerGamesPlayed[lv_int] >= 75) && (gv_playercamounlocked[6][lv_int] == false)) {
            UIDisplayMessage(PlayerGroupSingle(lv_int), c_messageAreaSubtitle, StringExternal("Param/Value/5F4D6816"));
            gv_playercamounlocked[6][lv_int] = true;
        }

        UIDisplayMessage(PlayerGroupSingle(lv_int), c_messageAreaDebug, (StringExternal("Param/Value/16E2C500")));
        UIDisplayMessage(PlayerGroupSingle(lv_int), c_messageAreaDebug, (StringExternal("Param/Value/8870CAE1") + FormatNumber(gv_playerExperience[1][lv_int])));
        UIDisplayMessage(PlayerGroupSingle(lv_int), c_messageAreaDebug, (StringExternal("Param/Value/77A38FE7") + FormatNumber(gv_playerExperience[2][lv_int])));
        UIDisplayMessage(PlayerGroupSingle(lv_int), c_messageAreaDebug, (StringExternal("Param/Value/90A780C5") + FormatNumber(gv_playerExperience[3][lv_int])));
        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][3])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "PFC", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][5])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "CPL", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][6])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "SGT", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][7])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "SSG", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][9])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "MSG", 1);
        }

        if ((gv_playerExperience[1][lv_int] >= gv_rankXPMin[1][10])) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_int, "1SG", 1);
        }

        if ((gv_playerImportedFromUA3[lp_player] > 0)) {
            while ((BankSectionCount(gv_banksold[lp_player]) > 0)) {
                BankSectionRemove(gv_banksold[lp_player], BankSectionName(gv_banksold[lp_player], 0));
            }
            BankSave(gv_banksold[lp_player]);
            BankRemove(gv_banksold[lp_player]);
        }

    }
    else {
        gv_funcdialogoffsets[1][lv_int] = 325;
        gv_funcdialogoffsets[2][lv_int] = -5;
        PlayerBankNew(lv_int);
        UIDisplayMessage(PlayerGroupSingle(lv_int), c_messageAreaDebug, (StringExternal("Param/Value/7DA14653") + IntToText(gv_playerExperience[1][lv_int])));
    }
    return true;
}

void gf_InitUnlocks () {
    // Implementation
    gv_playercamostring[1] = "Default";
    gv_playercamostring[2] = "ACUPAT";
    gv_playercamostring[3] = "CADPAT";
    gv_playercamostring[4] = "MARPAT";
    gv_playercamostring[5] = "Night";
    gv_playercamostring[6] = "Olive";
    gv_playercamostring[7] = "Red Tiger";
    gv_playercamostring[8] = "SAS";
    gv_playercamostring[9] = "Woodland";
    gv_playercamostring[10] = "Woodland Tiger";
    gv_playercamostring[11] = "Chameleon";
    gv_playercamostring[12] = "OctoCamo";
    gv_playercamostring[13] = "Medic";
    gv_playercamostring[14] = "Desert";
    gv_playercamostring[15] = "Navy Blue";
    gv_playercamostring[16] = "ABU";
    gv_playercamostring[17] = "Snow";
    gv_playercamostring[18] = "Rock Avalanche";
    gv_playercamoactormsg[1] = "TextureSelectById CamoDefault";
    gv_playercamoactormsg[2] = "TextureSelectById CamoACUPAT";
    gv_playercamoactormsg[3] = "TextureSelectById CamoCADPAT";
    gv_playercamoactormsg[4] = "TextureSelectById CamoMARPAT";
    gv_playercamoactormsg[5] = "TextureSelectById CamoNight";
    gv_playercamoactormsg[6] = "TextureSelectById CamoOlive";
    gv_playercamoactormsg[7] = "TextureSelectById CamoRedTiger";
    gv_playercamoactormsg[8] = "TextureSelectById CamoSAS";
    gv_playercamoactormsg[9] = "TextureSelectById CamoMulticam";
    gv_playercamoactormsg[10] = "TextureSelectById CamoWoodlandTiger";
    gv_playercamoactormsg[11] = "TextureSelectById CamoChameleon";
    gv_playercamoactormsg[12] = "TextureSelectById CamoDefault";
    gv_playercamoactormsg[13] = "TextureSelectById CamoMedic";
    gv_playercamoactormsg[14] = "TextureSelectById CamoDesert";
    gv_playercamoactormsg[15] = "TextureSelectById CamoNavyBlue";
    gv_playercamoactormsg[16] = "TextureSelectById CamoABU";
    gv_playercamoactormsg[17] = "TextureSelectById CamoSnow";
    gv_playercamoactormsg[18] = "TextureSelectById CamoRockAvalanche";
    gv_octoCamoTextures[1] = "AgriaConcrete";
    gv_octoCamoTextures[2] = "AgriaCrops";
    gv_octoCamoTextures[3] = "AgriaDirt";
    gv_octoCamoTextures[4] = "AgriaDirtRough";
    gv_octoCamoTextures[5] = "AgriaFoliage";
    gv_octoCamoTextures[6] = "AgriaGrassGreen";
    gv_octoCamoTextures[7] = "AgriaGrassYellow";
    gv_octoCamoTextures[8] = "AgriaRock";
    gv_octoCamoactormsg[1] = "TextureSelectById AGRIAConcrete";
    gv_octoCamoactormsg[2] = "TextureSelectById AGRIACrops";
    gv_octoCamoactormsg[3] = "TextureSelectById AGRIADirt";
    gv_octoCamoactormsg[4] = "TextureSelectById AGRIADirtRough";
    gv_octoCamoactormsg[5] = "TextureSelectById AGRIAFoilage";
    gv_octoCamoactormsg[6] = "TextureSelectById AGRIAGrassGreen";
    gv_octoCamoactormsg[7] = "TextureSelectById AGRIAGrassYellow";
    gv_octoCamoactormsg[8] = "TextureSelectById AGRIARock";
    gv_playerdecalstring[0] = "Default";
    gv_playerdecalstring[1] = "Bear Claw";
    gv_playerdecalstring[2] = "Blue Diamond";
    gv_playerdecalstring[3] = "Cavalry Sabers";
    gv_playerdecalstring[4] = "Outlaw";
    gv_playerdecalstring[5] = "RA";
    gv_playerdecalstring[6] = "Ravensword";
    gv_playerdecalstring[7] = "Combat Medic Badge";
    gv_playerdecalstring[8] = "ZES";
    gv_playerdecalstring[9] = "Wolves";
    gv_playerdecalstring[10] = "US Flag";
    gv_playerdecalactormsg[1] = "TextureSelectById DecalBearClaw";
    gv_playerdecalactormsg[2] = "TextureSelectById DecalBlueDiamond";
    gv_playerdecalactormsg[3] = "TextureSelectById DecalCavSabers";
    gv_playerdecalactormsg[4] = "TextureSelectById DecalOutlaw";
    gv_playerdecalactormsg[5] = "TextureSelectById DecalRA";
    gv_playerdecalactormsg[6] = "TextureSelectById DecalRavensword";
    gv_playerdecalactormsg[7] = "TextureSelectById DecalCMB";
    gv_playerdecalactormsg[8] = "TextureSelectById DecalZES";
    gv_playerdecalactormsg[9] = "TextureSelectById DecalWolves";
    gv_playerdecalactormsg[10] = "TextureSelectById DecalUSFlag";
}

int gf_GetPlayerRank (int lp_player) {
    int auto340EDED6_ae;
    int auto340EDED6_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_set;

    // Variable Initialization
    lv_set = gv_playerRankSet[lp_player];

    // Implementation
    auto340EDED6_ae = 13;
    auto340EDED6_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto340EDED6_ai >= 0 && lv_loopint <= auto340EDED6_ae) || (auto340EDED6_ai <= 0 && lv_loopint >= auto340EDED6_ae) ) ; lv_loopint += auto340EDED6_ai ) {
        if ((((gv_playerExperience[lv_set][lp_player] >= gv_rankXPMin[lv_set][lv_loopint]) && (gv_playerExperience[lv_set][lp_player] < gv_rankXPMin[lv_set][(lv_loopint + 1)])) || ((gv_playerExperience[lv_set][lp_player] >= gv_rankXPMin[lv_set][lv_loopint]) && (lv_loopint == gv_rankMax[lv_set])))) {
            return lv_loopint;
        }

    }
    return 1;
}

void gf_InitRanks () {
    // Implementation
    gv_rankDecal[1][1] = "Buttons\\Ranks\\RankPVT.dds";
    gv_rankDecal[1][2] = "Buttons\\Ranks\\RankPV2.dds";
    gv_rankDecal[1][3] = "Buttons\\Ranks\\RankPFC.dds";
    gv_rankDecal[1][4] = "Buttons\\Ranks\\RankSPC.dds";
    gv_rankDecal[1][5] = "Buttons\\Ranks\\RankCPL.dds";
    gv_rankDecal[1][6] = "Buttons\\Ranks\\RankSGT.dds";
    gv_rankDecal[1][7] = "Buttons\\Ranks\\RankSSG.dds";
    gv_rankDecal[1][8] = "Buttons\\Ranks\\RankSFC.dds";
    gv_rankDecal[1][9] = "Buttons\\Ranks\\RankMSG.dds";
    gv_rankDecal[1][10] = "Buttons\\Ranks\\Rank1SG.dds";
    gv_rankDecal[1][11] = "Buttons\\Ranks\\RankSGM.dds";
    gv_rankDecal[1][12] = "Buttons\\Ranks\\RankCSM.dds";
    gv_rankDecal[1][13] = "Buttons\\Ranks\\RankSMA.dds";
    gv_rankActorMsg[1][1] = "TextureSelectById RankPVT";
    gv_rankActorMsg[1][2] = "TextureSelectById RankPV2";
    gv_rankActorMsg[1][3] = "TextureSelectById RankPFC";
    gv_rankActorMsg[1][4] = "TextureSelectById RankSPC";
    gv_rankActorMsg[1][5] = "TextureSelectById RankCPL";
    gv_rankActorMsg[1][6] = "TextureSelectById RankSGT";
    gv_rankActorMsg[1][7] = "TextureSelectById RankSSG";
    gv_rankActorMsg[1][8] = "TextureSelectById RankSFC";
    gv_rankActorMsg[1][9] = "TextureSelectById RankMSG";
    gv_rankActorMsg[1][10] = "TextureSelectById Rank1SG";
    gv_rankActorMsg[1][11] = "TextureSelectById RankSGM";
    gv_rankActorMsg[1][12] = "TextureSelectById RankCSM";
    gv_rankActorMsg[1][13] = "TextureSelectById RankSMA";
    gv_rankXPMin[1][1] = 0;
    gv_rankXPMin[1][2] = 400;
    gv_rankXPMin[1][3] = 1000;
    gv_rankXPMin[1][4] = 1550;
    gv_rankXPMin[1][5] = 2600;
    gv_rankXPMin[1][6] = 3800;
    gv_rankXPMin[1][7] = 5500;
    gv_rankXPMin[1][8] = 11000;
    gv_rankXPMin[1][9] = 17000;
    gv_rankXPMin[1][10] = 25000;
    gv_rankXPMin[1][11] = 65000;
    gv_rankXPMin[1][12] = 95000;
    gv_rankXPMin[1][13] = 190000;
    gv_rankXPMin[1][14] = 999999;
    gv_rankPrefix[1][1] = StringExternal("Param/Value/DC1DF080");
    gv_rankPrefix[1][2] = StringExternal("Param/Value/559D8FF4");
    gv_rankPrefix[1][3] = StringExternal("Param/Value/6050F3C0");
    gv_rankPrefix[1][4] = StringExternal("Param/Value/93DB7DAE");
    gv_rankPrefix[1][5] = StringExternal("Param/Value/7BFC5B97");
    gv_rankPrefix[1][6] = StringExternal("Param/Value/85512CEA");
    gv_rankPrefix[1][7] = StringExternal("Param/Value/D7C13904");
    gv_rankPrefix[1][8] = StringExternal("Param/Value/02B0B05B");
    gv_rankPrefix[1][9] = StringExternal("Param/Value/B85ABA66");
    gv_rankPrefix[1][10] = StringExternal("Param/Value/5795296D");
    gv_rankPrefix[1][11] = StringExternal("Param/Value/D19D410C");
    gv_rankPrefix[1][12] = StringExternal("Param/Value/4EF75EF8");
    gv_rankPrefix[1][13] = StringExternal("Param/Value/21495004");
    gv_rankMax[1] = 13;
    gv_rankDecal[2][1] = "Buttons\\Ranks\\RankWO1.dds";
    gv_rankDecal[2][2] = "Buttons\\Ranks\\RankCWO2.dds";
    gv_rankDecal[2][3] = "Buttons\\Ranks\\RankCWO3.dds";
    gv_rankDecal[2][4] = "Buttons\\Ranks\\RankCWO4.dds";
    gv_rankDecal[2][5] = "Buttons\\Ranks\\RankCWO5.dds";
    gv_rankActorMsg[2][1] = "TextureSelectById RankWO1";
    gv_rankActorMsg[2][2] = "TextureSelectById RankCWO2";
    gv_rankActorMsg[2][3] = "TextureSelectById RankCWO3";
    gv_rankActorMsg[2][4] = "TextureSelectById RankCWO4";
    gv_rankActorMsg[2][5] = "TextureSelectById RankCWO5";
    gv_rankXPMin[2][1] = 0;
    gv_rankXPMin[2][2] = 8000;
    gv_rankXPMin[2][3] = 25000;
    gv_rankXPMin[2][4] = 65000;
    gv_rankXPMin[2][5] = 120000;
    gv_rankXPMin[2][6] = 999999;
    gv_rankPrefix[2][1] = StringExternal("Param/Value/060AB96B");
    gv_rankPrefix[2][2] = StringExternal("Param/Value/4C8F585E");
    gv_rankPrefix[2][3] = StringExternal("Param/Value/7C14AE7D");
    gv_rankPrefix[2][4] = StringExternal("Param/Value/9B7D8B84");
    gv_rankPrefix[2][5] = StringExternal("Param/Value/C7240396");
    gv_rankMax[2] = 5;
    gv_rankDecal[3][1] = "Buttons\\Ranks\\Rank2LT.dds";
    gv_rankDecal[3][2] = "Buttons\\Ranks\\Rank1LT.dds";
    gv_rankDecal[3][3] = "Buttons\\Ranks\\RankCPT.dds";
    gv_rankDecal[3][4] = "Buttons\\Ranks\\RankMAJ.dds";
    gv_rankDecal[3][5] = "Buttons\\Ranks\\RankLTCOL.dds";
    gv_rankDecal[3][6] = "Buttons\\Ranks\\RankCOL.dds";
    gv_rankDecal[3][7] = "Buttons\\Ranks\\RankBGEN.dds";
    gv_rankDecal[3][8] = "Buttons\\Ranks\\RankMGEN.dds";
    gv_rankDecal[3][9] = "Buttons\\Ranks\\RankLTGEN.dds";
    gv_rankDecal[3][10] = "Buttons\\Ranks\\RankGEN.dds";
    gv_rankActorMsg[3][1] = "TextureSelectById Rank2LT";
    gv_rankActorMsg[3][2] = "TextureSelectById Rank1LT";
    gv_rankActorMsg[3][3] = "TextureSelectById RankCPT";
    gv_rankActorMsg[3][4] = "TextureSelectById RankMAJ";
    gv_rankActorMsg[3][5] = "TextureSelectById RankLTCOL";
    gv_rankActorMsg[3][6] = "TextureSelectById RankCOL";
    gv_rankActorMsg[3][7] = "TextureSelectById RankBGEN";
    gv_rankActorMsg[3][8] = "TextureSelectById RankMGEN";
    gv_rankActorMsg[3][9] = "TextureSelectById RankLTGEN";
    gv_rankActorMsg[3][10] = "TextureSelectById RankGEN";
    gv_rankXPMin[3][1] = 0;
    gv_rankXPMin[3][2] = 3500;
    gv_rankXPMin[3][3] = 12000;
    gv_rankXPMin[3][4] = 18000;
    gv_rankXPMin[3][5] = 30000;
    gv_rankXPMin[3][6] = 65000;
    gv_rankXPMin[3][7] = 100000;
    gv_rankXPMin[3][8] = 130000;
    gv_rankXPMin[3][9] = 180000;
    gv_rankXPMin[3][10] = 250000;
    gv_rankXPMin[3][11] = 999999;
    gv_rankPrefix[3][1] = StringExternal("Param/Value/824B7A8E");
    gv_rankPrefix[3][2] = StringExternal("Param/Value/2A3F3DF1");
    gv_rankPrefix[3][3] = StringExternal("Param/Value/D418E5C0");
    gv_rankPrefix[3][4] = StringExternal("Param/Value/C5A78B56");
    gv_rankPrefix[3][5] = StringExternal("Param/Value/79658A4D");
    gv_rankPrefix[3][6] = StringExternal("Param/Value/438094D2");
    gv_rankPrefix[3][7] = StringExternal("Param/Value/F28DE124");
    gv_rankPrefix[3][8] = StringExternal("Param/Value/D9379810");
    gv_rankPrefix[3][9] = StringExternal("Param/Value/59BB97F6");
    gv_rankPrefix[3][10] = StringExternal("Param/Value/C6214D87");
    gv_rankMax[3] = 10;
}

trigger auto_gf_OctoCamo_Trigger = null;

void gf_OctoCamo () {
    if (auto_gf_OctoCamo_Trigger == null) {
        auto_gf_OctoCamo_Trigger = TriggerCreate("auto_gf_OctoCamo_TriggerFunc");
    }

    TriggerExecute(auto_gf_OctoCamo_Trigger, false, false);
}

bool auto_gf_OctoCamo_TriggerFunc (bool testConds, bool runActions) {
    int auto59010D12_ae;
    int auto59010D12_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Implementation
    while ((UnitGroupCount(gv_octoCamos, c_unitCountAll) >= 1)) {
        Wait(2.0, c_timeGame);
        UnitGroupLoopBegin(gv_octoCamos);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            auto59010D12_ae = 8;
            auto59010D12_ai = 1;
            lv_loopint = 1;
            for ( ; ( (auto59010D12_ai >= 0 && lv_loopint <= auto59010D12_ae) || (auto59010D12_ai <= 0 && lv_loopint >= auto59010D12_ae) ) ; lv_loopint += auto59010D12_ai ) {
                if ((TerrainTexture(UnitGetPosition(UnitGroupLoopCurrent())) == gv_octoCamoTextures[lv_loopint]) && (UnitGetCustomValue(UnitGroupLoopCurrent(), 6) != IntToFixed(lv_loopint))) {
                    SoundPlayOnUnit(SoundLink("OctoCamo", -1), PlayerGroupAll(), UnitGroupLoopCurrent(), 0.0, 100.0, 0.0);
                    libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), gv_octoCamoactormsg[lv_loopint]);
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 6, IntToFixed(lv_loopint));
                }

            }
        }
        UnitGroupLoopEnd();
    }
    gv_octoLoop = false;
    return true;
}

void gf_UpdateSIDialogforPlayer (int lp_player) {
    int auto9046E69A_ae;
    int auto9046E69A_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Implementation
    auto9046E69A_ae = gv_sIcount;
    auto9046E69A_ai = 1;
    lv_int = 1;
    for ( ; ( (auto9046E69A_ai >= 0 && lv_int <= auto9046E69A_ae) || (auto9046E69A_ai <= 0 && lv_int >= auto9046E69A_ae) ) ; lv_int += auto9046E69A_ai ) {
        if ((gv_sIunlocked[lv_int][lp_player] == true) && (gv_sIXPminimum[gv_playerRankSet[lp_player]][lv_int] != 0)) {
            libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_int], false, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_sIDialogButtons[lv_int], (gv_sIname[lv_int] + StringExternal("Param/Value/DD5605BF") + gv_sIdescription[lv_int]), PlayerGroupSingle(lp_player));
        }

    }
}

void gf_SetupSI (int lp_array, int lp_enXP, int lp_wOXP, int lp_cOXP, text lp_name, string lp_abbreviation, text lp_description) {
    // Implementation
    gv_sIXPminimum[1][lp_array] = lp_enXP;
    gv_sIXPminimum[2][lp_array] = lp_wOXP;
    gv_sIXPminimum[3][lp_array] = lp_cOXP;
    gv_sIname[lp_array] = lp_name;
    gv_sIabbreviation[lp_array] = lp_abbreviation;
    gv_sIdescription[lp_array] = lp_description;
}

void gf_InitSIs () {
    // Implementation
    gv_sIXPminimum[1][1] = 600;
    gv_sIXPminimum[2][1] = 1;
    gv_sIXPminimum[3][1] = 1;
    gv_sIname[1] = StringExternal("Param/Value/F8260585");
    gv_sIabbreviation[1] = "RF";
    gv_sIdescription[1] = StringExternal("Param/Value/9D4153BF");
    gv_sIXPminimum[1][2] = 2000;
    gv_sIXPminimum[2][2] = 1;
    gv_sIXPminimum[3][2] = 1;
    gv_sIname[2] = StringExternal("Param/Value/43EA7A28");
    gv_sIabbreviation[2] = "TN";
    gv_sIdescription[2] = StringExternal("Param/Value/85635C20");
    gv_sIXPminimum[1][3] = 3100;
    gv_sIXPminimum[2][3] = 1;
    gv_sIXPminimum[3][3] = 1;
    gv_sIname[3] = StringExternal("Param/Value/ADF22A64");
    gv_sIabbreviation[3] = "QT";
    gv_sIdescription[3] = StringExternal("Param/Value/9F75F147");
    gv_sIXPminimum[1][4] = 4200;
    gv_sIXPminimum[2][4] = 1;
    gv_sIXPminimum[3][4] = 1;
    gv_sIname[4] = StringExternal("Param/Value/8DDE1614");
    gv_sIabbreviation[4] = "EN";
    gv_sIdescription[4] = StringExternal("Param/Value/67DA9482");
    gv_sIXPminimum[1][5] = 8000;
    gv_sIXPminimum[2][5] = 1500;
    gv_sIXPminimum[3][5] = 1800;
    gv_sIname[5] = StringExternal("Param/Value/363F17C1");
    gv_sIabbreviation[5] = "HE";
    gv_sIdescription[5] = StringExternal("Param/Value/3F25792C");
    gv_sIXPminimum[1][6] = 13500;
    gv_sIXPminimum[2][6] = 5000;
    gv_sIXPminimum[3][6] = 0;
    gv_sIname[6] = StringExternal("Param/Value/0EC21E68");
    gv_sIabbreviation[6] = "AR";
    gv_sIdescription[6] = StringExternal("Param/Value/0DF230E8");
    gv_sIXPminimum[1][7] = 20000;
    gv_sIXPminimum[2][7] = 15000;
    gv_sIXPminimum[3][7] = 0;
    gv_sIname[7] = StringExternal("Param/Value/DC3D84FD");
    gv_sIabbreviation[7] = "TT";
    gv_sIdescription[7] = StringExternal("Param/Value/629DE5AB");
    gv_sIXPminimum[1][8] = 38000;
    gv_sIXPminimum[2][8] = 32000;
    gv_sIXPminimum[3][8] = 35000;
    gv_sIname[8] = StringExternal("Param/Value/ADD6DECE");
    gv_sIabbreviation[8] = "DS";
    gv_sIdescription[8] = StringExternal("Param/Value/7BEA7748");
    gv_sIXPminimum[1][9] = 0;
    gv_sIXPminimum[2][9] = 4000;
    gv_sIXPminimum[3][9] = 8000;
    gv_sIname[9] = StringExternal("Param/Value/FFD7666F");
    gv_sIabbreviation[9] = "IT";
    gv_sIdescription[9] = StringExternal("Param/Value/91407C15");
    gv_sIXPminimum[1][10] = 0;
    gv_sIXPminimum[2][10] = 0;
    gv_sIXPminimum[3][10] = 15000;
    gv_sIname[10] = StringExternal("Param/Value/E710EBD0");
    gv_sIabbreviation[10] = "BL";
    gv_sIdescription[10] = StringExternal("Param/Value/605EAC88");
    gv_sIXPminimum[1][11] = 25000;
    gv_sIXPminimum[2][11] = 12000;
    gv_sIXPminimum[3][11] = 19000;
    gv_sIname[11] = StringExternal("Param/Value/9395F27D");
    gv_sIabbreviation[11] = "BA";
    gv_sIdescription[11] = StringExternal("Param/Value/7E700A4A");
    gv_sIXPminimum[1][12] = 0;
    gv_sIXPminimum[2][12] = 0;
    gv_sIXPminimum[3][12] = 45000;
    gv_sIname[12] = StringExternal("Param/Value/EE24C454");
    gv_sIabbreviation[12] = "IS";
    gv_sIdescription[12] = StringExternal("Param/Value/32736391");
    gv_sIXPminimum[1][13] = 80000;
    gv_sIXPminimum[2][13] = 35000;
    gv_sIXPminimum[3][13] = 0;
    gv_sIname[13] = StringExternal("Param/Value/B191D001");
    gv_sIabbreviation[13] = "SS";
    gv_sIdescription[13] = StringExternal("Param/Value/0B4D4D2B");
    gv_sIXPminimum[1][14] = -1;
    gv_sIXPminimum[2][14] = -1;
    gv_sIXPminimum[3][14] = 0;
    gv_sIname[14] = StringExternal("Param/Value/50457341");
    gv_sIabbreviation[14] = "ST";
    gv_sIdescription[14] = StringExternal("Param/Value/BB1B59E1");
    gv_sIXPminimum[1][15] = 0;
    gv_sIXPminimum[2][15] = 11000;
    gv_sIXPminimum[3][15] = 0;
    gv_sIname[15] = StringExternal("Param/Value/35923FD2");
    gv_sIabbreviation[15] = "PU";
    gv_sIdescription[15] = StringExternal("Param/Value/F59AFB4E");
    gv_sIXPminimum[1][16] = 15000;
    gv_sIXPminimum[2][16] = 6000;
    gv_sIXPminimum[3][16] = 14000;
    gv_sIname[16] = StringExternal("Param/Value/AFD2A5C6");
    gv_sIabbreviation[16] = "Wk";
    gv_sIdescription[16] = StringExternal("Param/Value/A9010E2A");
    gv_sIXPminimum[1][17] = -1;
    gv_sIXPminimum[2][17] = -1;
    gv_sIXPminimum[3][17] = -1;
    gv_sIname[17] = StringExternal("Param/Value/2B9BA936");
    gv_sIabbreviation[17] = "BB";
    gv_sIdescription[17] = StringExternal("Param/Value/3688F7B8");
    gf_SetupSI(18, 80000, 80000, 80000, StringExternal("Param/Value/A8FCF45E"), "GR", StringExternal("Param/Value/F07E3F69"));
    gf_SetupSI(19, -1, -1, -1, StringExternal("Param/Value/CCA8D036"), "BO", StringExternal("Param/Value/DE228D42"));
    gf_SetupSI(20, 180000, 120000, 130000, StringExternal("Param/Value/1125D1FF"), "VT", StringExternal("Param/Value/3EBC5142"));
    gf_SetupSI(21, 50000, 50000, 50000, StringExternal("Param/Value/AD5BF185"), "LA", StringExternal("Param/Value/65A31BF3"));
    gf_SetupSI(22, 20000, 20000, 20000, StringExternal("Param/Value/49277366"), "HA", StringExternal("Param/Value/7D0ED0E5"));
    gf_SetupSI(23, 45000, 45000, 45000, StringExternal("Param/Value/6295431F"), "CL", StringExternal("Param/Value/8F35644C"));
}

void gf_FloatingTextforPlayer (unit lp_unit, text lp_text, int lp_player) {
    // Implementation
    SoundPlayOnUnit(SoundLink("RadioChatter", -1), PlayerGroupSingle(lp_player), lp_unit, 0.0, 100.0, 0.0);
    TextTagCreate(lp_text, 24, UnitGetPosition(lp_unit), 1.0, true, false, PlayerGroupSingle(lp_player));
    TextTagAttachToUnit(TextTagLastCreated(), lp_unit, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
}

trigger auto_gf_RefreshFireteamDialog_Trigger = null;

void gf_RefreshFireteamDialog () {
    if (auto_gf_RefreshFireteamDialog_Trigger == null) {
        auto_gf_RefreshFireteamDialog_Trigger = TriggerCreate("auto_gf_RefreshFireteamDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_RefreshFireteamDialog_Trigger, false, false);
}

bool auto_gf_RefreshFireteamDialog_TriggerFunc (bool testConds, bool runActions) {
    int auto4041E28C_ae;
    int auto4041E28C_ai;
    int auto4D7A4A57_ae;
    int auto4D7A4A57_ai;
    int autoBF314BB0_ae;
    int autoBF314BB0_ai;
    int autoFAC45D55_ae;
    int autoFAC45D55_ai;
    int autoEE65E26D_ae;
    int autoEE65E26D_ai;
    int autoB3D42A74_ae;
    int autoB3D42A74_ai;

    // Variable Declarations
    int lv_fireteams;
    int lv_fireteamplayers;
    int lv_fireteamplayers2;
    int lv_yoffset;
    int lv_curplayer;

    // Variable Initialization
    lv_yoffset = 75;

    // Implementation
    auto4041E28C_ae = 4;
    auto4041E28C_ai = 1;
    lv_fireteams = 1;
    for ( ; ( (auto4041E28C_ai >= 0 && lv_fireteams <= auto4041E28C_ae) || (auto4041E28C_ai <= 0 && lv_fireteams >= auto4041E28C_ae) ) ; lv_fireteams += auto4041E28C_ai ) {
        if ((PlayerGroupCount(gv_fireteamGroups[lv_fireteams]) > 0)) {
            DialogControlSetPosition(gv_fireteamdialogbuttons[lv_fireteams], PlayerGroupAll(), c_anchorTopLeft, 25, lv_yoffset);
            lv_yoffset = (lv_yoffset + 55);
            libNtve_gf_SetDialogItemColor(gv_fireteamdialogbuttons[lv_fireteams], Color(22*100/255,128*100/255,0), gv_players);
            libNtve_gf_SetDialogItemColor(gv_fireteamdialogbuttons[lv_fireteams], Color(0,66*100/255,100), gv_fireteamGroups[lv_fireteams]);
            autoBF314BB0_ae = 4;
            autoBF314BB0_ai = 1;
            lv_fireteamplayers = 1;
            for ( ; ( (autoBF314BB0_ai >= 0 && lv_fireteamplayers <= autoBF314BB0_ae) || (autoBF314BB0_ai <= 0 && lv_fireteamplayers >= autoBF314BB0_ae) ) ; lv_fireteamplayers += autoBF314BB0_ai ) {
                if ((lv_fireteamplayers <= PlayerGroupCount(gv_fireteamGroups[lv_fireteams])) && (PlayerStatus(PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], lv_fireteamplayers)) != c_playerStatusActive)) {
                    lv_curplayer = PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], lv_fireteamplayers);
                    PlayerGroupRemove(gv_fireteamGroups[lv_fireteams], lv_curplayer);
                    if ((PlayerGroupCount(gv_fireteamGroups[lv_fireteams]) > 0)) {
                        if ((lv_curplayer == gv_fireteamTLs[lv_fireteams])) {
                            gv_fireteamTLs[lv_fireteams] = PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], 1);
                            UIDisplayMessage(PlayerGroupSingle(gv_fireteamTLs[lv_fireteams]), c_messageAreaSubtitle, StringExternal("Param/Value/037D9467"));
                        }

                    }
                    else {
                        DialogControlDestroy(gv_fireteamdialogbuttons[lv_fireteams]);
                        autoFAC45D55_ae = 4;
                        autoFAC45D55_ai = 1;
                        lv_fireteamplayers2 = 1;
                        for ( ; ( (autoFAC45D55_ai >= 0 && lv_fireteamplayers2 <= autoFAC45D55_ae) || (autoFAC45D55_ai <= 0 && lv_fireteamplayers2 >= autoFAC45D55_ae) ) ; lv_fireteamplayers2 += autoFAC45D55_ai ) {
                            DialogControlDestroy(gv_fireteamlabels[lv_fireteams][lv_fireteamplayers2]);
                        }
                    }
                }

            }
            autoEE65E26D_ae = 4;
            autoEE65E26D_ai = 1;
            lv_fireteamplayers = 1;
            for ( ; ( (autoEE65E26D_ai >= 0 && lv_fireteamplayers <= autoEE65E26D_ae) || (autoEE65E26D_ai <= 0 && lv_fireteamplayers >= autoEE65E26D_ae) ) ; lv_fireteamplayers += autoEE65E26D_ai ) {
                DialogControlDestroy(gv_fireteamlabels[lv_fireteams][lv_fireteamplayers]);
                if ((lv_fireteamplayers <= PlayerGroupCount(gv_fireteamGroups[lv_fireteams]))) {
                    lv_curplayer = PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], lv_fireteamplayers);
                    if ((PlayerStatus(lv_curplayer) == c_playerStatusActive)) {
                        if ((lv_curplayer == gv_fireteamTLs[lv_fireteams])) {
                            libNtve_gf_CreateDialogItemLabel(gv_fireteamDialog, 200, 50, c_anchorTopLeft, 35, lv_yoffset, (StringExternal("Param/Value/3689A94E") + PlayerName(lv_curplayer)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_curplayer, false)), false, 2.0);
                        }
                        else {
                            libNtve_gf_CreateDialogItemLabel(gv_fireteamDialog, 200, 50, c_anchorTopLeft, 35, lv_yoffset, PlayerName(lv_curplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_curplayer, false)), false, 2.0);
                        }
                        gv_fireteamlabels[lv_fireteams][lv_fireteamplayers] = DialogControlLastCreated();
                        lv_yoffset = (lv_yoffset + 30);
                    }
                    else {
                        PlayerGroupRemove(gv_fireteamGroups[lv_fireteams], lv_curplayer);
                        if ((PlayerGroupCount(gv_fireteamGroups[lv_fireteams]) > 0)) {
                            if ((lv_curplayer == gv_fireteamTLs[lv_fireteams])) {
                                gv_fireteamTLs[lv_fireteams] = PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], 1);
                                UIDisplayMessage(PlayerGroupSingle(gv_fireteamTLs[lv_fireteams]), c_messageAreaSubtitle, StringExternal("Param/Value/9EB1EF8F"));
                            }

                        }
                        else {
                            DialogControlDestroy(gv_fireteamdialogbuttons[lv_fireteams]);
                            autoB3D42A74_ae = 4;
                            autoB3D42A74_ai = 1;
                            lv_fireteamplayers = 1;
                            for ( ; ( (autoB3D42A74_ai >= 0 && lv_fireteamplayers <= autoB3D42A74_ae) || (autoB3D42A74_ai <= 0 && lv_fireteamplayers >= autoB3D42A74_ae) ) ; lv_fireteamplayers += autoB3D42A74_ai ) {
                                DialogControlDestroy(gv_fireteamlabels[lv_fireteams][lv_fireteamplayers]);
                            }
                        }
                    }
                }

            }
        }
        else {
            DialogControlDestroy(gv_fireteamdialogbuttons[lv_fireteams]);
            auto4D7A4A57_ae = 4;
            auto4D7A4A57_ai = 1;
            lv_fireteamplayers = 1;
            for ( ; ( (auto4D7A4A57_ai >= 0 && lv_fireteamplayers <= auto4D7A4A57_ae) || (auto4D7A4A57_ai <= 0 && lv_fireteamplayers >= auto4D7A4A57_ae) ) ; lv_fireteamplayers += auto4D7A4A57_ai ) {
                DialogControlDestroy(gv_fireteamlabels[lv_fireteams][lv_fireteamplayers]);
            }
        }
    }
    return true;
}

trigger auto_gf_FireteamVision_Trigger = null;

void gf_FireteamVision () {
    if (auto_gf_FireteamVision_Trigger == null) {
        auto_gf_FireteamVision_Trigger = TriggerCreate("auto_gf_FireteamVision_TriggerFunc");
    }

    TriggerExecute(auto_gf_FireteamVision_Trigger, false, false);
}

bool auto_gf_FireteamVision_TriggerFunc (bool testConds, bool runActions) {
    int auto69819C12_ae;
    int auto69819C12_ai;
    int autoBB5013FD_ae;
    int autoBB5013FD_ai;

    // Variable Declarations
    int lv_fireteams;
    int lv_players;

    // Variable Initialization

    // Implementation
    while ((gv_gameOver == false)) {
        Wait(0.3, c_timeGame);
        auto69819C12_ae = 4;
        auto69819C12_ai = 1;
        lv_fireteams = 1;
        for ( ; ( (auto69819C12_ai >= 0 && lv_fireteams <= auto69819C12_ae) || (auto69819C12_ai <= 0 && lv_fireteams >= auto69819C12_ae) ) ; lv_fireteams += auto69819C12_ai ) {
            if ((PlayerGroupCount(gv_fireteamGroups[lv_fireteams]) > 0)) {
                PlayerGroupLoopBegin(gv_fireteamGroups[lv_fireteams]);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    autoBB5013FD_ae = PlayerGroupCount(gv_fireteamGroups[lv_fireteams]);
                    autoBB5013FD_ai = 1;
                    lv_players = 1;
                    for ( ; ( (autoBB5013FD_ai >= 0 && lv_players <= autoBB5013FD_ae) || (autoBB5013FD_ai <= 0 && lv_players >= autoBB5013FD_ae) ) ; lv_players += autoBB5013FD_ai ) {
                        if ((PlayerGroupLoopCurrent() != PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], lv_players))) {
                            VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(UnitGetPosition(gv_playerHeroes[PlayerGroupPlayer(gv_fireteamGroups[lv_fireteams], lv_players)]), 2.0), 0.3, false);
                        }

                    }
                }
                PlayerGroupLoopEnd();
            }

        }
    }
    return true;
}

trigger auto_gf_InitSprintBar_Trigger = null;

void gf_InitSprintBar () {
    if (auto_gf_InitSprintBar_Trigger == null) {
        auto_gf_InitSprintBar_Trigger = TriggerCreate("auto_gf_InitSprintBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitSprintBar_Trigger, false, false);
}

bool auto_gf_InitSprintBar_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialog;
    int lv_progressbar;
    fixed lv_psprint;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_progressbar = c_invalidDialogControlId;

    // Implementation
    DialogCreate(250, 100, c_anchorCenter, 0, 0, true);
    lv_dialog = DialogLastCreated();
    gv_sprintbar = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPosition(DialogLastCreated(), c_anchorBottom, 350, 200);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    lv_progressbar = DialogControlLastCreated();
    DialogControlSetPosition(lv_progressbar, PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetSize(lv_progressbar, PlayerGroupAll(), 200, 25);
    libNtve_gf_SetDialogItemMinimumValue(lv_progressbar, 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 16.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lv_progressbar, Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(lv_progressbar, StringExternal("Param/Value/D525A44C"), PlayerGroupAll());
    DialogSetVisible(lv_dialog, PlayerGroupAll(), true);
    while (true) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (((gv_functionaldialog[PlayerGroupLoopCurrent()] == c_invalidDialogId) || (DialogIsVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()) == false))) {
                DialogSetVisible(lv_dialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
            }
            else {
                DialogSetVisible(lv_dialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                lv_psprint = UnitGetCustomValue(gv_playerHeroes[PlayerGroupLoopCurrent()], 2);
                libNtve_gf_SetDialogItemCurrentValue(lv_progressbar, lv_psprint, PlayerGroupSingle(PlayerGroupLoopCurrent()));
                DialogControlSetVisible(lv_progressbar, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
        }
        PlayerGroupLoopEnd();
        Wait(0.75, c_timeGame);
    }
    return true;
}

trigger auto_gf_SprintCheck_Trigger = null;
unit auto_gf_SprintCheck_lp_unit;

void gf_SprintCheck (unit lp_unit) {
    auto_gf_SprintCheck_lp_unit = lp_unit;

    if (auto_gf_SprintCheck_Trigger == null) {
        auto_gf_SprintCheck_Trigger = TriggerCreate("auto_gf_SprintCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_SprintCheck_Trigger, false, false);
}

bool auto_gf_SprintCheck_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_SprintCheck_lp_unit;

    // Variable Declarations
    point lv_point;

    // Variable Initialization

    // Implementation
    while ((UnitHasBehavior2(lp_unit, "Sprint") == true)) {
        if ((UnitIsAlive(lp_unit) == true)) {
            lv_point = UnitGetPosition(lp_unit);
            Wait(0.5, c_timeGame);
            if ((lv_point == UnitGetPosition(lp_unit))) {
                UnitBehaviorRemove(lp_unit, "Sprint", -1);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_unit)), c_messageAreaSubtitle, StringExternal("Param/Value/CA8D2347"));
                break;
            }
            else {
                lv_point = null;
            }
        }
        else {
            break;
        }
    }
    return true;
}

trigger auto_gf_InitAmmoBar_Trigger = null;

void gf_InitAmmoBar () {
    if (auto_gf_InitAmmoBar_Trigger == null) {
        auto_gf_InitAmmoBar_Trigger = TriggerCreate("auto_gf_InitAmmoBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitAmmoBar_Trigger, false, false);
}

bool auto_gf_InitAmmoBar_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialog;
    text lv_temptext;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_temptext = StringExternal("Param/Value/3B33F3C8");

    // Implementation
    DialogCreate(400, 35, c_anchorBottom, 0, 325, true);
    lv_dialog = DialogLastCreated();
    gv_ammoDialogue = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
    libNtve_gf_CreateDialogItemImage(gv_ammoDialogue, 25, 25, c_anchorLeft, 25, 0, StringExternal("Param/Value/1DF650D6"), "Assets\\Textures\\btn-techupgrade-terran-fullborecanisterammo.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ammoDialogueItems[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_ammoDialogue, 75, 25, c_anchorLeft, 50, 0, StringExternal("Param/Value/94E98DC9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ammoDialogueItems[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_ammoDialogue, 25, 25, c_anchorLeft, 150, 0, StringExternal("Param/Value/3D285434"), "Assets\\Custom Icons\\icon-mags.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ammoDialogueItems[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_ammoDialogue, 75, 25, c_anchorLeft, 175, 0, StringExternal("Param/Value/444958CF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ammoDialogueItems[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_ammoDialogue, 25, 25, c_anchorLeft, 275, 0, StringExternal("Param/Value/2E568923"), "Assets\\Textures\\ui_hots_icon_generic_infestation.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ammoDialogueItems[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_ammoDialogue, 75, 25, c_anchorLeft, 300, 0, StringExternal("Param/Value/76CB7C45"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_ammoDialogueItems[6] = DialogControlLastCreated();
    DialogSetVisible(lv_dialog, PlayerGroupAll(), true);
    while (true) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (((gv_functionaldialog[PlayerGroupLoopCurrent()] == c_invalidDialogId) || (DialogIsVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()) == false))) {
                DialogSetVisible(lv_dialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
            }
            else {
                DialogSetVisible(lv_dialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            }
        }
        PlayerGroupLoopEnd();
        if ((gv_infestationLevel < 30)) {
            lv_temptext = StringExternal("Param/Value/277AB114");
        }
        else {
            if ((gv_infestationLevel < 35)) {
                lv_temptext = StringExternal("Param/Value/A8EB0449");
            }
            else {
                if ((gv_infestationLevel < 40)) {
                    lv_temptext = StringExternal("Param/Value/BE98D04B");
                }
                else {
                    lv_temptext = StringExternal("Param/Value/91E34817");
                }
            }
        }
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[6], (StringExternal("Param/Value/518904FE") + lv_temptext + IntToText(gv_infestationLevel) + StringExternal("Param/Value/9AE0A5AD")), PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

void gf_UpdateMedalsDialogforP (int lp_player) {
    int auto602D77C3_ae;
    int auto602D77C3_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Implementation
    auto602D77C3_ae = gv_medalscount;
    auto602D77C3_ai = 1;
    lv_int = 1;
    for ( ; ( (auto602D77C3_ai >= 0 && lv_int <= auto602D77C3_ae) || (auto602D77C3_ai <= 0 && lv_int >= auto602D77C3_ae) ) ; lv_int += auto602D77C3_ai ) {
        if ((gv_medalsunlocked[lv_int][lp_player] == true)) {
            libNtve_gf_SetDialogItemDesaturated(gv_medalsDialogItems[lv_int], false, PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(gv_medalsDialogItems[lv_int], (StringExternal("Param/Value/6224F3B8") + StringToText(gv_medalsnames[lv_int]) + StringExternal("Param/Value/E8CB3FFD") + StringExternal("Param/Value/6642316C") + gv_medalstooltip[lv_int]), PlayerGroupSingle(lp_player));
        }

    }
}

void gf_InitMedal (int lp_index, string lp_name, text lp_tooltip, string lp_image) {
    // Implementation
    gv_medalsnames[lp_index] = lp_name;
    gv_medalimages[lp_index] = lp_image;
    gv_medalstooltip[lp_index] = lp_tooltip;
}

void gf_AwardMedal (int lp_medal, int lp_player, int lp_xP, text lp_message) {
    // Implementation
    if ((gv_medalsunlocked[lp_medal][lp_player] == false)) {
        gv_medalsunlocked[lp_medal][lp_player] = true;
        gf_AwardPlayerXP(lp_xP, (lp_message + StringExternal("Param/Value/1AFE88B1") + StringExternal("Param/Value/292605BB") + StringToText(gv_medalsnames[lp_medal]) + StringExternal("Param/Value/CF81DFAB")), lp_player);
    }

}

void gf_InitMedals () {
    // Implementation
    gf_InitMedal(1, "Combat Veteran", StringExternal("Param/Value/709E8C49"), "Textures\\Medals\\MDLdist serv medal.dds");
    gf_InitMedal(2, "Combat Action Badge", StringExternal("Param/Value/26C09AE0"), "Textures\\Medals\\MDLcombat action medal.dds");
    gf_InitMedal(3, "Expert Medic Badge", StringExternal("Param/Value/8E446CE1"), "Textures\\Decals\\Combat Medic Badge.dds");
    gf_InitMedal(4, "Bronze Star", StringExternal("Param/Value/36CECB44"), "Textures\\Medals\\MDLbronze star.dds");
    gf_InitMedal(5, "Silver Star", StringExternal("Param/Value/00D5185C"), "Textures\\Medals\\MDLsilver star.dds");
    gf_InitMedal(6, "Gold Star", StringExternal("Param/Value/97BAABB3"), "Textures\\Medals\\MDLgold star.dds");
    gf_InitMedal(7, "Combat Proficiency Badge", StringExternal("Param/Value/C3E9879E"), "Textures\\Medals\\MDLcombat infantry medal.dds");
    gf_InitMedal(8, "Medal of Gallantry", StringExternal("Param/Value/56950E97"), "Textures\\Medals\\MDLmeritorious service medal.dds");
    gf_InitMedal(9, "Purple Heart", StringExternal("Param/Value/55A8CF26"), "Textures\\Medals\\MDLpurple heart.dds");
    gf_InitMedal(10, "Medal of Valor", StringExternal("Param/Value/DC6F82E9"), "Textures\\Medals\\MDLmedal of valor.dds");
    gf_InitMedal(11, "Good Conduct Medal", StringExternal("Param/Value/39A909E0"), "Textures\\Medals\\MDLgood conduct medal.dds");
    gf_InitMedal(12, "Sharpshooter Medal", StringExternal("Param/Value/09D20E0D"), "Textures\\Medals\\MDLmarksman infantry medal.dds");
    gf_InitMedal(13, "Expert Marksman Badge", StringExternal("Param/Value/8824FA3B"), "Assets\\Textures\\btn-icon-dominion.dds");
}

int gf_UnitHighestAilment (unit lp_unit) {
    // Implementation
    if (((UnitHasBehavior(lp_unit, "NecroticVenom") == true) || (UnitHasBehavior(lp_unit, "NeurotoxicVenom") == true))) {
        return 4;
    }

    if (((UnitHasBehavior(lp_unit, "ClassIVHemmorrhaging") == true) || (UnitHasBehavior(lp_unit, "InfectedBite") == true) || (UnitHasBehavior(lp_unit, "ParasiticInfection") == true))) {
        return 3;
    }

    if (((UnitHasBehavior(lp_unit, "ClassIIIHemmorrhaging") == true) || (UnitHasBehavior(lp_unit, "FracturedArm") == true) || (UnitHasBehavior(lp_unit, "FracturedLeg") == true) || (UnitHasBehavior(lp_unit, "TraumaticBrainInjury") == true) || (UnitHasBehavior(lp_unit, "EnergyLeak") == true))) {
        return 2;
    }

    if (((UnitHasBehavior(lp_unit, "MinorLacerations") == true))) {
        return 1;
    }

    return 0;
}

void gf_SetAilment (int lp_array, string lp_ailmentbehavior, int lp_ailmentchance, string lp_ailmentimagepath) {
    // Implementation
    gv_ailmentIndividualChance[lp_array] = lp_ailmentchance;
    gv_ailments[lp_array] = lp_ailmentbehavior;
    gv_ailmentImages[lp_array] = lp_ailmentimagepath;
}

void gf_InitAilments () {
    // Implementation
    gf_SetAilment(0, "NecroticVenom", 1, "Assets\\Textures\\btn-ability-zerg-contaminate-color.dds");
    gf_SetAilment(1, "NeurotoxicVenom", 1, "Assets\\Textures\\btn-ability-zerg-banelingspooge.dds");
    gf_SetAilment(2, "MinorLacerations", 4, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level0.dds");
    gf_SetAilment(3, "ClassIIIHemmorrhaging", 5, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds");
    gf_SetAilment(4, "FracturedArm", 5, "Assets\\Textures\\btn-ability-zerg-harvestcorpse.dds");
    gf_SetAilment(5, "FracturedLeg", 5, "Assets\\Textures\\btn-ability-protoss-charge-color.dds");
    gf_SetAilment(6, "TraumaticBrainInjury", 5, "Assets\\Textures\\stunswirl1_orange.dds");
    gf_SetAilment(7, "EnergyLeak", 6, "Assets\\Textures\\btn-upgrade-protoss-researchbosoniccore.dds");
    gf_SetAilment(8, "InfectedBite", 5, "Assets\\Textures\\btn-ability-zerg-infestation.dds");
    gf_SetAilment(9, "ClassIVHemmorrhaging", 6, "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds");
    gf_SetAilment(10, "ParasiticInfection", 6, "Assets\\Textures\\btn-upgrade-zerg-evolveincreasedlocustlifetime.dds");
}

void gf_InitMinis () {
    // Implementation
    gv_minitypes[1] = "InfantryRifleman";
    gv_miniweights[1] = 3;
    gv_minitypes[2] = "InfantryAutomaticRifleman";
    gv_miniweights[2] = 2;
    gv_minitypes[3] = "CombatEngineerMini";
    gv_miniweights[3] = 1;
    gv_minitypes[4] = "JavelinGunner";
    gv_miniweights[4] = 1;
    gv_minitypes[5] = "74DFlamethrower";
    gv_miniweights[5] = 1;
    gv_minitypes[6] = "InfantrySDM";
    gv_miniweights[6] = 1;
    gv_minitypes[7] = "68WCombatMedic";
    gv_miniweights[7] = 2;
}

string gf_randomminitype () {
    int autoED99CCDC_ae;
    int autoED99CCDC_ai;
    int autoE7B20574_ae;
    int autoE7B20574_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_totalweight;

    // Variable Initialization

    // Implementation
    autoED99CCDC_ae = gv_miniarraysize;
    autoED99CCDC_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoED99CCDC_ai >= 0 && lv_loopint <= autoED99CCDC_ae) || (autoED99CCDC_ai <= 0 && lv_loopint >= autoED99CCDC_ae) ) ; lv_loopint += autoED99CCDC_ai ) {
        lv_totalweight = (lv_totalweight + gv_miniweights[lv_loopint]);
    }
    autoE7B20574_ae = gv_miniarraysize;
    autoE7B20574_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoE7B20574_ai >= 0 && lv_loopint <= autoE7B20574_ae) || (autoE7B20574_ai <= 0 && lv_loopint >= autoE7B20574_ae) ) ; lv_loopint += autoE7B20574_ai ) {
        if ((RandomInt(1, lv_totalweight) <= gv_miniweights[lv_loopint])) {
            return gv_minitypes[lv_loopint];
        }

    }
    return "InfantryRifleman";
}

void gf_ReloadPlayer (int lp_player, int lp_controler) {
    // Variable Declarations
    unit lv_hero;
    int lv_texttag;
    bool lv_empty;
    fixed lv_reloadbasetime;
    int lv_magsused;
    int lv_sSlevel;
    soundlink lv_magout;
    soundlink lv_magin;

    // Variable Initialization
    lv_hero = gv_playerHeroes[lp_player];
    lv_texttag = c_textTagNone;
    lv_empty = (PlayerGetPropertyInt(lp_player, c_playerPropMinerals) == 0);
    lv_reloadbasetime = gv_reloadbasetime[lp_player];
    lv_magsused = gv_magsused[lp_player];
    lv_sSlevel = UnitAbilityGetLevel(lv_hero, "SoldierSkills");
    lv_magout = SoundLink("magout", -1);
    lv_magin = SoundLink("magin", -1);

    // Implementation
    if ((UnitGetType(lv_hero) == "GhostHero")) {
        lv_magin = SoundLink("maginplasma", -1);
        lv_magout = SoundLink("magoutplasma", -1);
        lv_empty = false;
    }

    if ((PlayerGetPropertyInt(lp_player, c_playerPropVespene) >= lv_magsused)) {
        if (((UnitHasBehavior(lv_hero, "SoldierSkills1") == true) || (UnitHasBehavior(lv_hero, "SoldierSkills2") == true) || (UnitHasBehavior(lv_hero, "SoldierSkills3") == true) || (UnitHasBehavior(lv_hero, "SoldierSkills4") == true))) {
            lv_reloadbasetime = (lv_reloadbasetime * (0.85 - (lv_sSlevel * 0.15)));
        }

        if ((UnitHasBehavior(lv_hero, "QuickThinking") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.75);
        }

        if ((UnitHasBehavior(lv_hero, "SOFAR") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.85);
        }

        if ((UnitHasBehavior(lv_hero, "InstructorTarget") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.8);
        }

        if ((UnitHasBehavior(lv_hero, "Leadership4T") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.8);
        }
        else {
            if ((UnitHasBehavior(lv_hero, "Leadership3T") == true)) {
                lv_reloadbasetime = (lv_reloadbasetime * 0.85);
            }
            else {
                if ((UnitHasBehavior(lv_hero, "Leadership2T") == true)) {
                    lv_reloadbasetime = (lv_reloadbasetime * 0.9);
                }
                else {
                    if ((UnitHasBehavior(lv_hero, "Leadership1T") == true)) {
                        lv_reloadbasetime = (lv_reloadbasetime * 0.95);
                    }

                }
            }
        }
        UnitGroupAdd(gv_reloading, lv_hero);
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSubtract, lv_magsused);
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        TextTagCreate((TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/7E3C5CC8")), 16, UnitGetPosition(lv_hero), 1.0, true, true, PlayerGroupAll());
        lv_texttag = TextTagLastCreated();
        TextTagSetTime(lv_texttag, c_textTagTimeDuration, 4.0);
        TextTagAttachToUnit(lv_texttag, lv_hero, 1.0);
        SoundPlayOnUnit(lv_magout, PlayerGroupAll(), lv_hero, 0.0, 100.0, 0.0);
        Wait(RandomFixed((lv_reloadbasetime - 0.2), (lv_reloadbasetime + 0.2)), c_timeGame);
        SoundPlayOnUnit(lv_magin, PlayerGroupAll(), lv_hero, 0.0, 100.0, 0.0);
        if ((lv_empty == true)) {
            Wait(1.0, c_timeGame);
            SoundPlayOnUnit(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_hero, 0.0, 100.0, 0.0);
        }

        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lp_player]);
        TextTagDestroy(lv_texttag);
        UnitGroupRemove(gv_reloading, lv_hero);
        UnitGroupRemove(gv_jammed, lv_hero);
        UnitBehaviorRemove(lv_hero, "Jammed", 1);
        PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperSetTo, 99999);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lp_controler), StringExternal("Param/Value/53C6D3FF"), SoundLink("UI_GenericError", -1));
        SoundPlayOnUnit(SoundLink("noammo", -1), PlayerGroupAll(), lv_hero, 0.0, 100.0, 0.0);
    }
}

void gf_Reinforcements () {
    // Variable Declarations
    unit lv_heli;
    int lv_lz;
    int lv_loopint;
    bool lv_someonedead;

    // Variable Initialization
    lv_lz = RandomInt(1, 5);

    // Implementation
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == false) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (gv_mod_1life == false)) {
            lv_someonedead = true;
        }

    }
    PlayerGroupLoopEnd();
    if ((lv_someonedead == true)) {
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_lZs[lv_lz]), -12.0, 0.0), RegionGetCenter(gv_lZs[lv_lz]));
        lv_heli = UnitLastCreated();
        UnitIssueOrder(lv_heli, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_lZs[lv_lz])), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_lZs[lv_lz]), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 8.0, 270.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F801E9E9"));
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == false) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                UnitCreate(1, gf_randomminitype(), 0, PlayerGroupLoopCurrent(), RegionGetCenter(gv_lZs[lv_lz]), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(gv_lZs[lv_lz]), 4.0, (30.0 * IntToFixed(PlayerGroupLoopCurrent())))), c_orderQueueReplace);
                UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
                CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.5, -1, 10.0, true);
            }

        }
        PlayerGroupLoopEnd();
        Wait(15.0, c_timeGame);
        UnitIssueOrder(lv_heli, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(lv_heli, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(15.0, c_timeGame);
        UnitRemove(lv_heli);
    }

}

void gf_LandPhantom (point lp_lZ) {
    // Variable Declarations
    unit lv_heli;

    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 13, PointWithOffset(lp_lZ, -12.0, RandomFixed(-4.0, 4.0)), lp_lZ);
    lv_heli = UnitLastCreated();
    gv_lastlandedphantom = UnitLastCreated();
    UnitIssueOrder(lv_heli, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), lp_lZ), c_orderQueueReplace);
}

void gf_TakeoffPhantom (unit lp_phantom) {
    // Implementation
    UnitIssueOrder(lp_phantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(lp_phantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    UnitRemove(lp_phantom);
}

void gf_SpawnUndead (int lp_count, string lp_type, int lp_chance) {
    int autoBAC15B88_n;
    int autoBAC15B88_i;

    // Variable Declarations
    int lv_randomTCP;
    unitgroup lv_spawngroup;
    point lv_spawnpoint;

    // Variable Initialization
    lv_randomTCP = RandomInt(1, 4);
    lv_spawngroup = UnitGroupEmpty();
    lv_spawnpoint = RegionRandomPoint(gv_spawnRegion);

    // Implementation
    while (!((gv_pauseSpawning == false))) {
        Wait(1.0, c_timeGame);
    }
    if ((RandomInt(1, lp_chance) == 1) && ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) <= 170) || (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true))) {
        if ((UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true)) {
            gv_infestationLevel += (lp_count * 2);
            if ((gv_tCPspawning == true) && (RandomInt(0, 4) >= 2)) {
                lv_spawnpoint = RegionRandomPoint(gv_tCPSpawns[lv_randomTCP]);
                libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_spawnpoint);
                UnitGroupAddUnitGroup(gv_tCPhostiles, UnitLastCreatedGroup());
            }
            else {
                lv_spawnpoint = RegionRandomPoint(gv_bossSpawnRegion);
                libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_spawnpoint);
            }
        }
        else {
            Wait(RandomFixed(0.05, 5.0), c_timeGame);
            if ((gv_tCPspawning == true) && (RandomInt(0, 4) >= 2)) {
                lv_spawnpoint = RegionRandomPoint(gv_tCPSpawns[lv_randomTCP]);
                libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_spawnpoint);
                UnitGroupAddUnitGroup(gv_tCPhostiles, UnitLastCreatedGroup());
            }
            else {
                autoBAC15B88_n = lp_count;
                for (autoBAC15B88_i = 1; autoBAC15B88_i <= autoBAC15B88_n; autoBAC15B88_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_type, 0, 14, lv_spawnpoint);
                    UnitGroupAdd(lv_spawngroup, UnitLastCreated());
                    Wait(RandomFixed(0.03, 0.1), c_timeGame);
                }
                UnitGroupAddUnitGroup(UnitLastCreatedGroup(), lv_spawngroup);
            }
        }
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1)) {
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }

        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_RegisterUnitBecomesIdleEvent(gt_UndeadIdles, UnitGroupLoopCurrent(), true);
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "PlayerHandicap", UnitGroupLoopCurrent(), (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "PlayerModifier", UnitGroupLoopCurrent(), PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 5)) {
                if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifierBoss", UnitGroupLoopCurrent(), (gv_gamemode - 0));
                    gf_RegisterUnitDiesEvent(gt_UndeadMassiveDeath, UnitGroupLoopCurrent());
                }
                else {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifier", UnitGroupLoopCurrent(), (gv_gamemode - 0));
                }
            }

            if ((gv_gamemode == 1) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "RecruitModifier", UnitGroupLoopCurrent(), 1);
                gf_RegisterUnitDiesEvent(gt_UndeadMassiveDeath, UnitGroupLoopCurrent());
            }

            if ((gv_gamemode >= 7)) {
                if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifierBoss", UnitGroupLoopCurrent(), 3);
                    gf_RegisterUnitDiesEvent(gt_UndeadMassiveDeath, UnitGroupLoopCurrent());
                }
                else {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifier", UnitGroupLoopCurrent(), 3);
                }
            }

        }
        UnitGroupLoopEnd();
    }

}

void gf_SpawnUndeadImmediate (int lp_count, string lp_type, int lp_chance) {
    int auto4070CCFB_n;
    int auto4070CCFB_i;

    // Variable Declarations
    int lv_randomTCP;
    point lv_point;
    region lv_movementregion;

    // Variable Initialization
    lv_randomTCP = RandomInt(1, 4);
    lv_movementregion = RegionEmpty();

    // Implementation
    while (!((gv_pauseSpawning == false) && (UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) > 0))) {
        Wait(1.0, c_timeGame);
    }
    if ((RandomInt(1, lp_chance) == 1) && ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) <= 170) || (UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true))) {
        lv_movementregion = RegionEmpty();
        UnitGroupLoopBegin(gv_undeadTargetGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            RegionAddCircle(lv_movementregion, true, UnitGetPosition(UnitGroupLoopCurrent()), 40.0);
            RegionAddCircle(lv_movementregion, false, UnitGetPosition(UnitGroupLoopCurrent()), 25.0);
        }
        UnitGroupLoopEnd();
        auto4070CCFB_n = 15;
        for (auto4070CCFB_i = 1; auto4070CCFB_i <= auto4070CCFB_n; auto4070CCFB_i += 1) {
            lv_point = RegionRandomPoint(lv_movementregion);
            if ((PointPathingPassable(lv_point) == true) && (RegionContainsPoint(RegionFromId(112), lv_point) == false)) {
                break;
            }

        }
        if ((UnitTypeTestAttribute(lp_type, c_unitAttributeMassive) == true)) {
            gv_infestationLevel = (gv_infestationLevel + 2);
        }
        else {
            Wait(RandomFixed(0.05, 5.0), c_timeGame);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(lp_count, lp_type, 0, 14, lv_point);
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", UnitGroupCenterOfGroup(UnitLastCreatedGroup()));
        SoundPlayAtPoint(SoundLink("Zerg_BurrowLarge", -1), PlayerGroupAll(), UnitGroupCenterOfGroup(UnitLastCreatedGroup()), 0.0, 100.0, 0.0);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_RegisterUnitBecomesIdleEvent(gt_UndeadIdles, UnitGroupLoopCurrent(), true);
            if ((PlayerGroupCount(gv_players) <= 3)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "PlayerHandicap", UnitGroupLoopCurrent(), (4 - PlayerGroupCount(gv_players)));
            }
            else {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "PlayerModifier", UnitGroupLoopCurrent(), PlayerGroupCount(gv_players));
            }
            if ((gv_gamemode > 1) && (gv_gamemode <= 5)) {
                if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifierBoss", UnitGroupLoopCurrent(), (gv_gamemode - 1));
                }
                else {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifier", UnitGroupLoopCurrent(), (gv_gamemode - 1));
                }
            }

            if ((gv_gamemode == 1) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "RecruitModifier", UnitGroupLoopCurrent(), 1);
            }

            if ((gv_gamemode >= 7)) {
                if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeMassive) == true)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifierBoss", UnitGroupLoopCurrent(), 2);
                }
                else {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "DifficultyModifier", UnitGroupLoopCurrent(), 2);
                }
            }

        }
        UnitGroupLoopEnd();
    }

}

trigger auto_gf_MutateUndead_Trigger = null;

void gf_MutateUndead () {
    if (auto_gf_MutateUndead_Trigger == null) {
        auto_gf_MutateUndead_Trigger = TriggerCreate("auto_gf_MutateUndead_TriggerFunc");
    }

    TriggerExecute(auto_gf_MutateUndead_Trigger, false, false);
}

bool auto_gf_MutateUndead_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unfortunate;

    // Variable Initialization

    // Implementation
    while ((gv_undeadMutations == true)) {
        lv_unfortunate = null;
        if ((gv_infestationLevel > 40)) {
            lv_unfortunate = UnitGroupRandomUnit(gv_undeadGroup, c_unitCountAlive);
            UnitBehaviorAdd(lv_unfortunate, "Mutation", lv_unfortunate, 1);
            if ((gv_infestationLevel > 50)) {
                lv_unfortunate = UnitGroupRandomUnit(gv_undeadGroup, c_unitCountAlive);
                UnitBehaviorAdd(lv_unfortunate, "Mutation", lv_unfortunate, 1);
                if ((gv_infestationLevel > 80) && (RandomInt(1, 606) == 1)) {
                    lv_unfortunate = UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Gourmand", c_unitCreateIgnorePlacement, 14, UnitGetPosition(lv_unfortunate));
                    UnitKill(lv_unfortunate);
                    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
                    gv_infestationLevel += 2;
                }

            }

        }

        Wait(45.0, c_timeReal);
    }
    return true;
}

void gf_ResetAllAbilityCooldownsForUnit (unit lp_unit) {
    // Variable Declarations
    string lv_ability;
    int lv_abilities;
    int lv_abilitiesmax;
    int lv_commands;
    int lv_commandsmax;

    // Variable Initialization
    lv_abilities = 1;
    lv_abilitiesmax = UnitAbilityCount(lp_unit);
    lv_commandsmax = 16;

    // Implementation
    while ((lv_abilities < lv_abilitiesmax)) {
        lv_ability = UnitAbilityGet(lp_unit, lv_abilities);
        lv_commands = 0;
        if ((CatalogFieldExists(CatalogEntryScope(c_gameCatalogAbil, lv_ability), "CmdButtonArray") == true)) {
            lv_commandsmax = CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "CmdButtonArray", UnitGetOwner(lp_unit));
        }
        else {
            lv_commandsmax = 1;
        }
        while ((lv_commands < lv_commandsmax)) {
            UnitAbilityReset(lp_unit, AbilityCommand(lv_ability, lv_commands), c_spendLocationAll);
            lv_commands += 1;
        }
        lv_abilities += 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Visor Text Timer Expire
//--------------------------------------------------------------------------------------------------
bool gt_VisorTextTimerExpire_Func (bool testConds, bool runActions) {
    int auto8B9020BD_ae;
    int auto8B9020BD_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B9020BD_ae = 12;
    auto8B9020BD_ai = 1;
    lv_int = 1;
    for ( ; ( (auto8B9020BD_ai >= 0 && lv_int <= auto8B9020BD_ae) || (auto8B9020BD_ai <= 0 && lv_int >= auto8B9020BD_ae) ) ; lv_int += auto8B9020BD_ai ) {
        if ((EventTimer() == gv_visorTextTimer[lv_int])) {
            DialogControlFadeTransparency(gv_visorText[lv_int], PlayerGroupSingle(lv_int), 3.0, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VisorTextTimerExpire_Init () {
    gt_VisorTextTimerExpire = TriggerCreate("gt_VisorTextTimerExpire_Func");
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[1]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[2]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[3]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[4]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[5]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[6]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[7]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[8]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[9]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[10]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[11]);
    TriggerAddEventTimer(gt_VisorTextTimerExpire, gv_visorTextTimer[12]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Mode Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitModeDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gamemodename[1] = StringExternal("Param/Value/4B2EDF8D");
    gv_gamemodename[2] = StringExternal("Param/Value/D969D835");
    gv_gamemodename[3] = StringExternal("Param/Value/CCAC383B");
    gv_gamemodename[4] = StringExternal("Param/Value/A1060A4B");
    gv_gamemodename[5] = StringExternal("Param/Value/CDFCA602");
    gv_gamemodename[6] = StringExternal("Param/Value/096BC083");
    gv_gamemodename[7] = StringExternal("Param/Value/E8B09D0F");
    gv_gamemodename[8] = StringExternal("Param/Value/00AC2C53");
    DialogCreate(760, 900, c_anchorTop, 0, 0, false);
    gv_modedialog = DialogLastCreated();
    DialogSetTitle(gv_modedialog, StringExternal("Param/Value/171C44BC"));
    gf_CreateDifficultyButtonLeft(1, "Images\\difficulties\\diff_recruit.dds");
    gf_CreateDifficultyButtonLeft(2, "Images\\difficulties\\diff_normal.dds");
    gf_CreateDifficultyButtonLeft(3, "Images\\difficulties\\diff_hard.dds");
    gf_CreateDifficultyButtonLeft(4, "Images\\difficulties\\diff_insane.dds");
    gf_CreateDifficultyButtonRight(5, "Images\\difficulties\\diff_nightmare.dds");
    gf_CreateDifficultyButtonRight(6, "Images\\difficulties\\diff_COMP.dds");
    gf_CreateDifficultyButtonRight(7, "Images\\difficulties\\diff_survival.dds");
    gf_CreateDifficultyButtonRight(8, "Images\\difficulties\\diff_PMC.dds");
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[1], StringExternal("Param/Value/A69547C3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[2], StringExternal("Param/Value/4CEA5546"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[3], StringExternal("Param/Value/A85A1487"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[4], StringExternal("Param/Value/C1BDCEBA"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[5], StringExternal("Param/Value/8D9FB8B0"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[6], StringExternal("Param/Value/F3D344F0"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[7], StringExternal("Param/Value/D14033FE"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_modeitem[8], StringExternal("Param/Value/1A0A8090"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemCheckBox(gv_modedialog, 25, 25, c_anchorTop, -320, 125, StringExternal("Param/Value/685DAF61"), false);
    gv_dialogmodifier[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_modedialog, 25, 25, c_anchorTop, -145, 125, StringExternal("Param/Value/C17A8581"), false);
    gv_dialogmodifier[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_modedialog, 25, 25, c_anchorTop, -320, 175, StringExternal("Param/Value/65EB9D3D"), false);
    gv_dialogmodifier[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_modedialog, 25, 25, c_anchorTop, -145, 175, StringExternal("Param/Value/B9DF94A2"), false);
    gv_dialogmodifier[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_modedialog, 125, 25, c_anchorTop, -200, 75, StringExternal("Param/Value/A8E0A37C"), Color(22*100/255,128*100/255,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_modedialog, 130, 25, c_anchorTop, -230, 125, StringExternal("Param/Value/BAF8529A"), Color(100.00, 0.00, 0.00), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_modedialog, 100, 25, c_anchorTop, -70, 125, StringExternal("Param/Value/C6E97EAE"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_modedialog, 100, 25, c_anchorTop, -245, 175, StringExternal("Param/Value/69A7CBAD"), Color(84*100/255,0,129*100/255), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_modedialog, 100, 25, c_anchorTop, -70, 175, StringExternal("Param/Value/CC71CC51"), Color(0,66*100/255,100), false, 2.0);
    if ((PlayerGroupCount(gv_players) < 4)) {
        DialogControlSetEnabled(gv_dialogmodifier[4], PlayerGroupAll(), false);
    }

    if ((PlayerGroupCount(gv_players) < 5)) {
        DialogControlSetEnabled(gv_modeitem[6], PlayerGroupAll(), false);
        DialogControlFadeTransparency(gv_modeitem[6], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_competivemodeimage, PlayerGroupAll(), 0.0, 45.0);
    }

    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_dialogrankset[0] = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/238F2560"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/47691BF0"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0EA8C8A1"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/AB94F0E5"), PlayerGroupAll());
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 200, 100);
    DialogControlSetVisible(gv_dialogrankset[0], PlayerGroupAll(), false);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerExperience[2][PlayerGroupLoopCurrent()] >= 1)) {
            DialogControlSetVisible(gv_dialogrankset[0], PlayerGroupAll(), true);
        }

    }
    PlayerGroupLoopEnd();
    libNtve_gf_CreateDialogItemLabel(gv_modedialog, 125, 25, c_anchorTop, 200, 75, StringExternal("Param/Value/2775D343"), Color(22*100/255,128*100/255,0), false, 2.0);
    TriggerSendEvent("Start Tips");
    Wait(0.1, c_timeGame);
    DialogSetVisible(gv_modedialog, PlayerGroupAll(), true);
    TimerStart(gv_modetimer, 60.0, false, c_timeGame);
    TimerWindowCreate(gv_modetimer, StringExternal("Param/Value/93D86234"), true, false);
    gv_modetimeoutwindow = TimerWindowLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitModeDialog_Init () {
    gt_InitModeDialog = TriggerCreate("gt_InitModeDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitModeDialog, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Mode
//--------------------------------------------------------------------------------------------------
bool gt_SetMode_Func (bool testConds, bool runActions) {
    int auto9B0EC1B2_ae;
    int auto9B0EC1B2_ai;
    int auto987E62DB_ae;
    int auto987E62DB_ai;
    int autoF75ED666_ae;
    int autoF75ED666_ai;
    playergroup autoF57C870F_g;
    int autoF57C870F_p;
    playergroup autoACF6B686_g;
    int autoACF6B686_p;

    // Variable Declarations
    int lv_loopint;
    text lv_modifiers;
    int lv_totalxp;
    int lv_totalpoints;
    int lv_totalvotes;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playermodevote[PlayerGroupLoopCurrent()] == 0)) {
            gf_SetupRankSet(PlayerGroupLoopCurrent(), DialogControlGetSelectedItem(gv_dialogrankset[0], PlayerGroupLoopCurrent()));
        }

    }
    PlayerGroupLoopEnd();
    DialogSetVisible(gv_modedialog, PlayerGroupAll(), false);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_UpdateSIDialogforPlayer(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    auto9B0EC1B2_ae = 12;
    auto9B0EC1B2_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto9B0EC1B2_ai >= 0 && lv_loopint <= auto9B0EC1B2_ae) || (auto9B0EC1B2_ai <= 0 && lv_loopint >= auto9B0EC1B2_ae) ) ; lv_loopint += auto9B0EC1B2_ai ) {
        gv_modevote[gv_playermodevote[lv_loopint]] = (gv_modevote[gv_playermodevote[lv_loopint]] + 1);
    }
    auto987E62DB_ae = gv_modetotal;
    auto987E62DB_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto987E62DB_ai >= 0 && lv_loopint <= auto987E62DB_ae) || (auto987E62DB_ai <= 0 && lv_loopint >= auto987E62DB_ae) ) ; lv_loopint += auto987E62DB_ai ) {
        if ((gf_CheckVotes(lv_loopint) == true)) {
            gv_gamemode = lv_loopint;
            break;
        }

    }
    if ((gv_gamemode == 0)) {
        autoF75ED666_ae = 5;
        autoF75ED666_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoF75ED666_ai >= 0 && lv_loopint <= autoF75ED666_ae) || (autoF75ED666_ai <= 0 && lv_loopint >= autoF75ED666_ae) ) ; lv_loopint += autoF75ED666_ai ) {
            lv_totalpoints = (lv_totalpoints + (lv_loopint * gv_modevote[lv_loopint]));
            lv_totalvotes = (lv_totalvotes + gv_modevote[lv_loopint]);
        }
        lv_totalpoints = (lv_totalpoints / lv_totalvotes);
        gv_gamemode = lv_totalpoints;
    }

    if ((gv_gamemode == 0)) {
        gv_gamemode = 2;
    }

    if ((gv_modifiervote[1] >= (PlayerGroupCount(gv_players) / 2)) && (gv_modifiervote[1] > 0)) {
        gv_mod_outbreak = true;
        if ((gv_gamemode == 6)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FB96ACDD"));
        }
        else {
            gv_xpmodifier = (gv_xpmodifier + 0.1);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2ECF3841"));
        }
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/CBD18A9C"));
    }
    else {
        if ((gv_modifiervote[3] >= (PlayerGroupCount(gv_players) / 2)) && (gv_modifiervote[3] > 0)) {
            gv_mod_tier1 = true;
            if ((gv_gamemode == 6)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5AA01B70"));
            }
            else {
                gv_xpmodifier = (gv_xpmodifier + 0.1);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3C6CF8BE"));
            }
            lv_modifiers = (lv_modifiers + StringExternal("Param/Value/FD5ADAB9"));
        }

    }
    if ((gv_modifiervote[2] >= (PlayerGroupCount(gv_players) / 2)) && (gv_modifiervote[2] > 0)) {
        gv_mod_rifle = true;
        if ((gv_gamemode != 6)) {
            gv_xpmodifier = (gv_xpmodifier + 0.25);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9D286AAA"));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6B870ABB"));
        }
        lv_modifiers = (lv_modifiers + StringExternal("Param/Value/9DD90619"));
        autoF57C870F_g = gv_players; 
        autoF57C870F_p = 1;
        for ( ; autoF57C870F_p <= PlayerGroupCount(autoF57C870F_g) ; autoF57C870F_p += BoolToInt(lv_loopint == PlayerGroupPlayer(autoF57C870F_g, autoF57C870F_p)) ) {
            lv_loopint = PlayerGroupPlayer(autoF57C870F_g, autoF57C870F_p);
            TechTreeUpgradeAddLevel(lv_loopint, "RifleMode", 1);
        }
    }

    if ((gv_modifiervote[4] >= (PlayerGroupCount(gv_players) / 2)) && (gv_modifiervote[4] > 0)) {
        gv_mod_1life = true;
        if ((gv_gamemode != 6)) {
            gv_xpmodifier = (gv_xpmodifier + 0.15);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CFE75EC6"));
            lv_modifiers = (lv_modifiers + StringExternal("Param/Value/ACB836BD"));
            autoACF6B686_g = gv_players; 
            autoACF6B686_p = 1;
            for ( ; autoACF6B686_p <= PlayerGroupCount(autoACF6B686_g) ; autoACF6B686_p += BoolToInt(lv_loopint == PlayerGroupPlayer(autoACF6B686_g, autoACF6B686_p)) ) {
                lv_loopint = PlayerGroupPlayer(autoACF6B686_g, autoACF6B686_p);
                TechTreeUpgradeAddLevel(lv_loopint, "1Life", 1);
            }
        }

    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/FA5ABFFE") + gv_gamemodename[gv_gamemode] + lv_modifiers));
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle((gv_gamemodename[gv_gamemode] + lv_modifiers), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/68A1F698"), gv_gamemodename[gv_gamemode], "Assets\\Textures\\btn-tips-hacking.dds");
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] >= 400)) {
            TipAlertPanelClear(PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }

        lv_totalxp = gv_playerExperience[1][PlayerGroupLoopCurrent()];
        lv_totalxp = (lv_totalxp + gv_playerExperience[2][PlayerGroupLoopCurrent()]);
        lv_totalxp = (lv_totalxp + gv_playerExperience[3][PlayerGroupLoopCurrent()]);
    }
    PlayerGroupLoopEnd();
    gv_spawnCount = (gv_spawnCount + gv_modespawnmodifier[gv_gamemode]);
    if ((gv_gamemode <= 5)) {
        gv_ailmentChance = (11 - gv_gamemode);
        gv_xpmodifier = (gv_xpmodifier - 0.5);
        gv_xpmodifier = (gv_xpmodifier + (0.25 * IntToFixed(gv_gamemode)));
    }

    if ((gv_gamemode == 6)) {
        gv_ailmentChance = 9;
    }

    if ((gv_gamemode == 7)) {
        gv_ailmentChance = 7;
    }

    if ((gv_gamemode == 8)) {
        gv_ailmentChance = 9;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetMode_Init () {
    gt_SetMode = TriggerCreate("gt_SetMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mode Select
//--------------------------------------------------------------------------------------------------
bool gt_ModeSelect_Func (bool testConds, bool runActions) {
    int auto24959C73_ae;
    int auto24959C73_ai;
    int auto5F6DCC79_ae;
    int auto5F6DCC79_ai;

    // Variable Declarations
    int lv_modevoted;
    text lv_modifiersvoted;
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_playermodevote[EventPlayer()] == 0))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_modeitem[1]) || (EventDialogControl() == gv_modeitem[2]) || (EventDialogControl() == gv_modeitem[3]) || (EventDialogControl() == gv_modeitem[4]) || (EventDialogControl() == gv_modeitem[5]) || (EventDialogControl() == gv_modeitem[6]) || (EventDialogControl() == gv_modeitem[7]) || (EventDialogControl() == gv_modeitem[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(gv_players) <= 3) && (EventDialogControl() == gv_modeitem[6])) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5102F1A7"));
        return true;
    }

    gf_SetupRankSet(EventPlayer(), DialogControlGetSelectedItem(gv_dialogrankset[0], EventPlayer()));
    auto24959C73_ae = gv_modetotal;
    auto24959C73_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto24959C73_ai >= 0 && lv_loopint <= auto24959C73_ae) || (auto24959C73_ai <= 0 && lv_loopint >= auto24959C73_ae) ) ; lv_loopint += auto24959C73_ai ) {
        if ((EventDialogControl() == gv_modeitem[lv_loopint])) {
            lv_modevoted = lv_loopint;
            gv_playermodevote[EventPlayer()] = lv_loopint;
        }
        else {
            libNtve_gf_SetDialogItemDesaturated(gv_modeitem[lv_loopint], true, PlayerGroupSingle(EventPlayer()));
        }
    }
    if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[1], EventPlayer()) == true)) {
        gv_modifiervote[1] = (gv_modifiervote[1] + 1);
        lv_modifiersvoted = (lv_modifiersvoted + StringExternal("Param/Value/0F27EF2D"));
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[2], EventPlayer()) == true)) {
        gv_modifiervote[2] = (gv_modifiervote[2] + 1);
        lv_modifiersvoted = (lv_modifiersvoted + StringExternal("Param/Value/DB46EB11"));
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[3], EventPlayer()) == true) && (libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[1], EventPlayer()) == false)) {
        gv_modifiervote[3] = (gv_modifiervote[3] + 1);
        lv_modifiersvoted = (lv_modifiersvoted + StringExternal("Param/Value/DB9CA9C1"));
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_dialogmodifier[4], EventPlayer()) == true) && (PlayerGroupCount(gv_players) >= 3)) {
        gv_modifiervote[4] = (gv_modifiervote[4] + 1);
        lv_modifiersvoted = (lv_modifiersvoted + StringExternal("Param/Value/49E4213D"));
    }

    gv_votestotal = 0;
    auto5F6DCC79_ae = 12;
    auto5F6DCC79_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto5F6DCC79_ai >= 0 && lv_loopint <= auto5F6DCC79_ae) || (auto5F6DCC79_ai <= 0 && lv_loopint >= auto5F6DCC79_ae) ) ; lv_loopint += auto5F6DCC79_ai ) {
        if ((gv_playermodevote[lv_loopint] != 0)) {
            gv_votestotal = (gv_votestotal + 1);
        }

    }
    gf_UpdateSIDialogforPlayer(EventPlayer());
    DialogSetVisible(gv_modedialog, PlayerGroupSingle(EventPlayer()), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/F5E07D96") + gv_gamemodename[lv_modevoted] + lv_modifiersvoted));
    if ((gv_votestotal == PlayerGroupCount(gv_players))) {
        DialogSetVisible(gv_modedialog, PlayerGroupAll(), false);
        TriggerExecute(gt_GameStart, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModeSelect_Init () {
    gt_ModeSelect = TriggerCreate("gt_ModeSelect_Func");
    TriggerAddEventDialogControl(gt_ModeSelect, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Start
//--------------------------------------------------------------------------------------------------
bool gt_GameStart_Func (bool testConds, bool runActions) {
    playergroup autoAF790D12_g;
    int autoAF790D12_p;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization
    lv_loopint = 1;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerPause(gv_modetimer, true);
    TimerWindowDestroy(gv_modetimeoutwindow);
    TriggerExecute(gt_SetMode, true, true);
    TriggerSendEvent("Init Weapon Cache");
    if ((gv_mod_outbreak == true)) {
        TriggerEnable(gt_UndeadSpawningOutbreak, true);
    }
    else {
        if ((gv_mod_tier1 == true)) {
            TriggerEnable(gt_UndeadSpawningTier1, true);
        }
        else {
            TriggerEnable(gt_UndeadSpawningPrologue, true);
        }
    }
    if ((gv_gamemode == 6)) {
        TriggerExecute(gt_CompetitiveMode, true, false);
    }
    else {
        UnitCreate(1, "ColonistShipFlying", 0, 13, PointFromId(370), 0.0);
        gv_phantombeginning = UnitLastCreated();
        CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(6)), 0.0, -1, 10, false);
            CameraLockInput(PlayerGroupLoopCurrent(), true);
        }
        PlayerGroupLoopEnd();
        UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(6))), c_orderQueueReplace);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2D05AEFF"));
        Wait(13.0, c_timeGame);
        autoAF790D12_g = gv_players; 
        autoAF790D12_p = 1;
        for ( ; autoAF790D12_p <= PlayerGroupCount(autoAF790D12_g) ; autoAF790D12_p += BoolToInt(lv_loopint == PlayerGroupPlayer(autoAF790D12_g, autoAF790D12_p)) ) {
            lv_loopint = PlayerGroupPlayer(autoAF790D12_g, autoAF790D12_p);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroSelector", 0, lv_loopint, RegionGetCenter(RegionFromId(154)));
            gv_heroselector[lv_loopint] = UnitLastCreated();
            UnitClearSelection(lv_loopint);
            UnitSelect(UnitLastCreated(), lv_loopint, true);
            UnitGroupAdd(gv_heroselectors, UnitLastCreated());
        }
    }
    if ((gv_averageXP >= 60000)) {
        gv_spawnCount = (gv_spawnCount + 1);
    }

    if ((gv_averageXP >= 120000)) {
        gv_spawnCount = (gv_spawnCount + 1);
    }

    if ((gv_gamemode <= 5)) {
        TriggerExecute(gt_Prologue, true, false);
    }

    if ((gv_gamemode == 7)) {
        TriggerExecute(gt_SurvivalMode, true, false);
    }

    if ((gv_gamemode == 8)) {
        TriggerExecute(gt_PMCMode, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameStart_Init () {
    gt_GameStart = TriggerCreate("gt_GameStart_Func");
    TriggerAddEventTimer(gt_GameStart, gv_modetimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Selection
//--------------------------------------------------------------------------------------------------
bool gt_HeroSelection_Func (bool testConds, bool runActions) {
    string autoDB5DA669_val;

    // Variable Declarations
    int lv_pindex;

    // Variable Initialization
    lv_pindex = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnitCreatedUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((gv_playerHeroes[lv_pindex] == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerHeroes[lv_pindex] != null)) {
        UnitRemove(EventUnitCreatedUnit());
        return true;
    }

    if ((gv_playerRankSet[lv_pindex] == 1)) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "RankModifier", EventUnitCreatedUnit(), (gf_GetPlayerRank(lv_pindex) - 1));
    }
    else {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "RankModifier", EventUnitCreatedUnit(), (gf_GetPlayerRank(lv_pindex) + 4));
    }
    UnitGroupRemove(gv_heroselectors, gv_heroselector[lv_pindex]);
    UnitRemove(gv_heroselector[lv_pindex]);
    libNtve_gf_ShareVisionofUnit(gv_phantombeginning, false, lv_pindex);
    CameraLockInput(lv_pindex, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/C05FB49B") + UnitTypeGetName(UnitGetType(EventUnitCreatedUnit())))));
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    UnitGroupAdd(gv_heroesGroup, EventUnitCreatedUnit());
    UnitGroupAdd(gv_undeadTargetGroup, EventUnitCreatedUnit());
    UnitControlGroupAddUnit(UnitGetOwner(EventUnitCreatedUnit()), 1, EventUnitCreatedUnit());
    UnitSelect(EventUnitCreatedUnit(), lv_pindex, true);
    gv_playerHeroes[lv_pindex] = EventUnitCreatedUnit();
    UnitSetCustomValue(EventUnitCreatedUnit(), 2, 16.0);
    libNtve_gf_SetDialogItemUnitLink(gv_unlockDialogItems[lv_pindex], UnitGetType(EventUnitCreatedUnit()), PlayerGroupAll());
    ActorSend(ActorFromDialogControl(gv_unlockDialogItems[lv_pindex]), gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    if ((PlayerGroupCount(gv_players) <= 2)) {
        UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, lv_pindex, RegionRandomPoint(RegionFromId(154)), libNtve_gf_RandomAngle());
        UnitSelect(UnitLastCreated(), lv_pindex, true);
    }

    autoDB5DA669_val = UnitGetType(EventUnitCreatedUnit());
    if (autoDB5DA669_val == "Rifleman") {
        gv_allowRifles = true;
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Marine_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Buttons\\BTNSoldier.dds";
        if ((TechTreeUpgradeCount(lv_pindex, "MGEN", c_techCountCompleteOnly) == 1)) {
            UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, lv_pindex, RegionRandomPoint(RegionFromId(154)), libNtve_gf_RandomAngle());
            UnitSelect(UnitLastCreated(), lv_pindex, true);
        }

    }
    else if (autoDB5DA669_val == "GhostHero") {
        gv_allowPlasmaRifles = true;
        gv_magsize[lv_pindex] = 80;
        gv_reloadbasetime[lv_pindex] = 3.9;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Ghost_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Assets\\Textures\\ghostportrait_static.dds";
    }
    else if (autoDB5DA669_val == "CombatMedic") {
        gv_allowRifles = true;
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Medic_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Assets\\Textures\\medicportrait_static.dds";
        if ((TechTreeUpgradeCount(lv_pindex, "MGEN", c_techCountCompleteOnly) == 1)) {
            UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, lv_pindex, RegionRandomPoint(RegionFromId(154)), libNtve_gf_RandomAngle());
            UnitSelect(UnitLastCreated(), lv_pindex, true);
        }

    }
    else if (autoDB5DA669_val == "FireSupportSpecialist") {
        gv_allowRifles = true;
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Hercules_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Assets\\Textures\\herculesportrait_static.dds";
    }
    else if (autoDB5DA669_val == "PlatoonLeader") {
        gv_allowRifles = true;
        gv_magsize[lv_pindex] = 60;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Tosh_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Assets\\Textures\\ui-heroicon-tosh.dds";
    }
    else if (autoDB5DA669_val == "SFAAT") {
        gv_allowShotguns = true;
        gv_magsize[lv_pindex] = 25;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Raynor_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Buttons\\Portraits\\BTNSFAAT.dds";
    }
    else if (autoDB5DA669_val == "CombatEngineer") {
        gv_allowShotguns = true;
        gv_magsize[lv_pindex] = 25;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Swann_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Assets\\Textures\\kachinskyportrait_static.dds";
    }
    else if (autoDB5DA669_val == "AutomaticRifleman") {
        gv_allowMachineGuns = true;
        gv_magsize[lv_pindex] = 100;
        gv_reloadbasetime[lv_pindex] = 6.0;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 10);
        SoundPlayOnUnit(SoundLink("Tychus_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Buttons\\BTNAutoRifle.dds";
    }
    else if (autoDB5DA669_val == "Cyborg") {
        gv_allowMachineGuns = true;
        gv_magsize[lv_pindex] = 150;
        gv_reloadbasetime[lv_pindex] = 4.9;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 10);
        SoundPlayOnUnit(SoundLink("Marauder_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Assets\\Textures\\marinemercenaryportrait_static.dds";
    }
    else if (autoDB5DA669_val == "Flamethrower") {
        gv_allowFlamethrowers = true;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 700);
        UISetResourceVisible(PlayerGroupSingle(UnitGetOwner(EventUnitCreatedUnit())), c_resourceTypeTerrazine, true);
        UISetResourceVisible(PlayerGroupSingle(UnitGetOwner(EventUnitCreatedUnit())), c_resourceTypeVespene, false);
        UISetResourceVisible(PlayerGroupSingle(UnitGetOwner(EventUnitCreatedUnit())), c_resourceTypeMinerals, false);
        gv_playerEncumbrance[UnitGetOwner(EventUnitCreatedUnit())] = 1500;
        DialogControlSetVisible(gv_ammoDialogueItems[1], PlayerGroupSingle(lv_pindex), false);
        DialogControlSetVisible(gv_ammoDialogueItems[2], PlayerGroupSingle(lv_pindex), false);
        libNtve_gf_SetDialogItemImage(gv_ammoDialogueItems[3], "Assets\\Textures\\fireball_10.dds", PlayerGroupSingle(lv_pindex));
        libNtve_gf_SetDialogItemTooltip(gv_ammoDialogueItems[3], StringExternal("Param/Value/61920E18"), PlayerGroupSingle(lv_pindex));
        SoundPlayOnUnit(SoundLink("Firebat_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "firebat.dds";
    }
    else if (autoDB5DA669_val == "CavalryScout") {
        gv_allowRifles = true;
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 4.0;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Diamondback_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Buttons\\Portraits\\BTNCavalryScout.dds";
    }
    else if (autoDB5DA669_val == "SquadDesignatedMarksman") {
        gv_allowDMR = true;
        gv_magsize[lv_pindex] = 35;
        gv_reloadbasetime[lv_pindex] = 5.0;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Spectre_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Buttons\\Portraits\\BTNMarksman.dds";
    }
    else if (autoDB5DA669_val == "JavelinGunner2") {
        gv_allowRifles = true;
        gv_magsize[lv_pindex] = 60;
        gv_reloadbasetime[lv_pindex] = 4.0;
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropMinerals, c_playerPropOperSetTo, gv_magsize[lv_pindex]);
        PlayerModifyPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropVespene, c_playerPropOperSetTo, 9);
        SoundPlayOnUnit(SoundLink("Hill_Ready", -1), PlayerGroupAll(), EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
        gv_playerHeroImage[UnitGetOwner(EventUnitCreatedUnit())] = "Assets\\Textures\\hillportrait_static.dds";
    }
    else {
    }
    gf_RegisterUnitTakesDamageEvent(gt_PlayerHit, gv_playerHeroes[lv_pindex], c_unitDamageEither, c_unitDamageTypeAny, null);
    gf_RegisterUnitDiesEvent(gt_GameOver, gv_playerHeroes[lv_pindex]);
    gf_RegisterUnitDiesEvent(gt_HeroDeath, gv_playerHeroes[lv_pindex]);
    gf_RegisterUnitEntersLeavesRegion(gt_MissChance, gv_playerHeroes[lv_pindex], RegionEntireMap(), true);
    if ((gv_playerCurrentDecal[lv_pindex] == 0)) {
        libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lv_pindex], gv_rankActorMsg[gv_playerRankSet[lv_pindex]][gf_GetPlayerRank(lv_pindex)]);
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lv_pindex], gv_playerdecalactormsg[gv_playerCurrentDecal[lv_pindex]]);
    }
    libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lv_pindex], gv_playercamoactormsg[gv_playerCurrentCamo[lv_pindex]]);
    if ((UnitGroupCount(gv_heroselectors, c_unitCountAll) == 0)) {
        TriggerEnable(gt_SelectHeroSelector, false);
        TriggerEnable(gt_HeroSelection, false);
        TriggerEnable(gt_AutoselectHero, false);
        if ((GameIsTestMap(false) == false)) {
            TriggerEnable(gt_GameOver, true);
        }

        Wait(5.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/313C3410"));
        UnitIssueOrder(gv_phantombeginning, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_phantombeginning, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        UnitRemove(gv_phantombeginning);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroSelection_Init () {
    gt_HeroSelection = TriggerCreate("gt_HeroSelection_Func");
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseAutomaticRifleman", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCavalryScout", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCombatMedic", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseFlamethrower", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseRifleman", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseSFAAT", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseSDM", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChoosePlatoonLeader", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseJavelinGunner", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCombatEngineer", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseGhost", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseFireSupportSpecialist", null);
    TriggerAddEventUnitCreated(gt_HeroSelection, null, "ChooseCyborg", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autoselect Hero
//--------------------------------------------------------------------------------------------------
bool gt_AutoselectHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopplayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FBFCC273"));
    Wait(15.0, c_timeGame);
    TriggerEnable(gt_SelectHeroSelector, false);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerHeroes[PlayerGroupLoopCurrent()] == null)) {
            if ((UnitAbilityChargeInfo(gv_heroselector[PlayerGroupLoopCurrent()], AbilityCommand("ChooseCombatMedic", 0), c_unitAbilChargeCountLeft) >= 1)) {
                UnitIssueOrder(gv_heroselector[PlayerGroupLoopCurrent()], Order(AbilityCommand("ChooseCombatMedic", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_heroselector[PlayerGroupLoopCurrent()], Order(AbilityCommand("ChooseRifleman", 0)), c_orderQueueReplace);
            }
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoselectHero_Init () {
    gt_AutoselectHero = TriggerCreate("gt_AutoselectHero_Func");
    TriggerAddEventTimeElapsed(gt_AutoselectHero, 105.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Hero Selector
//--------------------------------------------------------------------------------------------------
bool gt_SelectHeroSelector_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerHeroes[PlayerGroupLoopCurrent()] == null)) {
            UnitClearSelection(PlayerGroupLoopCurrent());
            UnitSelect(gv_heroselector[PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent(), true);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectHeroSelector_Init () {
    gt_SelectHeroSelector = TriggerCreate("gt_SelectHeroSelector_Func");
    TriggerAddEventTimePeriodic(gt_SelectHeroSelector, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miss Chance
//--------------------------------------------------------------------------------------------------
bool gt_MissChance_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_gamemode == 8) || (gv_gamemode == 6)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((EventPlayer() != 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Evasion30", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissChance_Init () {
    gt_MissChance = TriggerCreate("gt_MissChance_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miss
//--------------------------------------------------------------------------------------------------
bool gt_Miss_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/40BC78A1"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), EventPlayerEffectUsedUnit(c_effectUnitTarget), 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.25);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.5);
    TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Miss_Init () {
    gt_Miss = TriggerCreate("gt_Miss_Func");
    TriggerAddEventPlayerEffectUsed(gt_Miss, c_playerAny, "Miss");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Use Abil
//--------------------------------------------------------------------------------------------------
bool gt_PMCUseAbil_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "FlareGunAIHero", 1);
    UnitBehaviorRemove(EventUnit(), "GroundFlareAIHero", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCUseAbil_Init () {
    gt_PMCUseAbil = TriggerCreate("gt_PMCUseAbil_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Loop
//--------------------------------------------------------------------------------------------------
bool gt_SquadLoop_Func (bool testConds, bool runActions) {
    int auto6F74CF0C_ae;
    int auto6F74CF0C_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RefreshSquads();
    auto6F74CF0C_ae = gv_pMCsquadcnt;
    auto6F74CF0C_ai = 1;
    lv_int = 1;
    for ( ; ( (auto6F74CF0C_ai >= 0 && lv_int <= auto6F74CF0C_ae) || (auto6F74CF0C_ai <= 0 && lv_int >= auto6F74CF0C_ae) ) ; lv_int += auto6F74CF0C_ai ) {
        if ((gv_phantomDownLZ == 0)) {
            if ((gv_pMCSquads[lv_int].lv_extracting == true) && (libNtve_gf_UnitGroupIsDead(gv_phantomCrew) == false)) {
                UnitGroupLoopBegin(gv_pMCSquads[lv_int].lv_group);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_phantomCrew), RandomFixed(1.0, 5.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
            }
            else {
                if ((libNtve_gf_UnitGroupIsDead(gv_phantomCrew) == false)) {
                    if ((UnitGetOwner(UnitGroupRandomUnit(gv_phantomCrew, c_unitCountAlive)) == 15)) {
                        UnitGroupIssueOrder(gv_pMCSquads[lv_int].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_phantomCrew), RandomFixed(8.0, 25.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    }
                    else {
                        gf_SquadAttackPosition(lv_int, UnitGetPosition(UnitGroupRandomUnit(gv_phantomCrew, c_unitCountAlive)));
                    }
                }
                else {
                    if ((gv_pMCAlert == true) && (RandomInt(0, 2) != 0)) {
                        gf_SquadAttackPosition(lv_int, UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)));
                    }
                    else {
                        UnitGroupIssueOrder(gv_pMCSquads[lv_int].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
                    }
                }
            }
        }
        else {
            if ((gv_pMCAlert == true) && (RandomInt(0, 2) != 0)) {
                gf_SquadAttackPosition(lv_int, UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive)));
            }
            else {
                UnitGroupIssueOrder(gv_pMCSquads[lv_int].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_lZs[gv_phantomDownLZ])), c_orderQueueReplace);
            }
        }
        Wait(0.5, c_timeGame);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_phantomCrew) == false)) {
        UnitGroupIssueOrder(gv_phantomCrew, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_tCPSpawns[gv_phantomCrewExtraction])), c_orderQueueReplace);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGroupCenterOfGroup(gv_phantomCrew), ColorWithAlpha(100.00, 0.00, 0.00, 49.41), 4.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CDF35FA6"));
        PingSetUnit(PingLastCreated(), UnitGroupRandomUnit(gv_phantomCrew, c_unitCountAlive));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SquadLoop_Init () {
    gt_SquadLoop = TriggerCreate("gt_SquadLoop_Func");
    TriggerEnable(gt_SquadLoop, false);
    TriggerAddEventTimePeriodic(gt_SquadLoop, 14.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Contact
//--------------------------------------------------------------------------------------------------
bool gt_SquadContact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pMC;
    unit lv_player;
    int lv_squad;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser) || (PlayerType(UnitGetOwner(EventUnitTarget())) == c_playerTypeUser) || (EventPlayer() == 13) || (UnitGetOwner(EventUnitTarget()) == 13)))) {
            return false;
        }

        if (!(((EventPlayer() == 15) || (UnitGetOwner(EventUnitTarget()) == 15)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 15)) {
        lv_pMC = EventUnit();
        lv_player = EventUnitTarget();
    }
    else {
        lv_pMC = EventUnitTarget();
        lv_player = EventUnit();
    }
    gv_pMCAlert = true;
    TimerStart(gv_pMCAlertTimer, 60.0, false, c_timeGame);
    lv_squad = FixedToInt(UnitGetCustomValue(lv_pMC, 4));
    if ((lv_squad != 0)) {
        gf_SquadAttackPosition(lv_squad, UnitGetPosition(lv_player));
    }

    TriggerExecute(gt_SquadLoop, true, false);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(8.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SquadContact_Init () {
    gt_SquadContact = TriggerCreate("gt_SquadContact_Func");
    TriggerEnable(gt_SquadContact, false);
    TriggerAddEventUnitAttacked(gt_SquadContact, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Alert Expire
//--------------------------------------------------------------------------------------------------
bool gt_PMCAlertExpire_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_pMCAlert = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCAlertExpire_Init () {
    gt_PMCAlertExpire = TriggerCreate("gt_PMCAlertExpire_Func");
    TriggerEnable(gt_PMCAlertExpire, false);
    TriggerAddEventTimer(gt_PMCAlertExpire, gv_pMCAlertTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Periodic Spawn
//--------------------------------------------------------------------------------------------------
bool gt_PMCPeriodicSpawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 2) == 1)) {
        if ((RandomInt(0, 3) == 1)) {
            gf_SpawnPMCSquad(15, 0);
        }
        else {
            gf_SpawnPMCSquad(RandomInt(1, 5), 0);
        }
    }
    else {
        gf_SpawnPMCSquad(1, 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCPeriodicSpawn_Init () {
    gt_PMCPeriodicSpawn = TriggerCreate("gt_PMCPeriodicSpawn_Func");
    TriggerEnable(gt_PMCPeriodicSpawn, false);
    TriggerAddEventTimePeriodic(gt_PMCPeriodicSpawn, 190.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC Mode
//--------------------------------------------------------------------------------------------------
bool gt_PMCMode_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/A1514C25"), StringExternal("Param/Value/47BBF90D"), c_objectiveStateActive, false);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_optionalObj = ObjectiveLastCreated();
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/1F19C6C5"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    ObjectiveCreate(StringToText(""), StringToText(""), c_objectiveStateHidden, true);
    gv_mainObj = ObjectiveLastCreated();
    TriggerExecute(gt_PCommissioner, true, false);
    TriggerExecute(gt_PolicePatrols, true, false);
    TriggerEnable(gt_SquadContact, true);
    TriggerEnable(gt_SquadLoop, true);
    TriggerEnable(gt_PMCAlertExpire, true);
    UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_Enemy);
    }
    PlayerGroupLoopEnd();
    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(122)), 315.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[1] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(123)), 270.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[2] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(125)), 180.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[3] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    gv_tCPregion[1] = RegionFromId(114);
    gv_tCPregion[2] = RegionFromId(115);
    gv_tCPregion[3] = RegionFromId(116);
    gv_tCPregion[4] = RegionFromId(117);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCMode_Init () {
    gt_PMCMode = TriggerCreate("gt_PMCMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Commissioner
//--------------------------------------------------------------------------------------------------
bool gt_PCommissioner_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/46C8E166"));
    Wait(5.0, c_timeGame);
    UnitCreate(1, "Commander", c_unitCreateIgnorePlacement, 0, PointFromId(382), 180.0);
    gv_policeCommissioner = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(382), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0CF3E609"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    gv_missionping = PingLastCreated();
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/2BD8002D"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/9D907F22"));
    TimerStart(gv_missiontimer, RandomFixed(150.0, 180.0), false, c_timeGame);
    TriggerEnable(gt_PApproachCommissioner, true);
    TriggerEnable(gt_PCommissionerTimeout, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCommissioner_Init () {
    gt_PCommissioner = TriggerCreate("gt_PCommissioner_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Approach Commissioner
//--------------------------------------------------------------------------------------------------
bool gt_PApproachCommissioner_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_players, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PCommissionerTimeout, false);
    PingDestroy(gv_missionping);
    libNtve_gf_MakeUnitFacePoint(gv_policeCommissioner, UnitGetPosition(EventUnit()), 0.5);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_MissionText(StringExternal("Param/Value/57353ABA"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C5F0FF69"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/47741A9D"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B413026E"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/82D2710B"));
    Wait(7.0, c_timeGame);
    gf_SucceedMission(10, StringExternal("Param/Value/3EBCAA57"), 0);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_PPoliceCheckpoint, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PApproachCommissioner_Init () {
    gt_PApproachCommissioner = TriggerCreate("gt_PApproachCommissioner_Func");
    TriggerEnable(gt_PApproachCommissioner, false);
    TriggerAddEventUnitRegion(gt_PApproachCommissioner, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Commissioner Timeout
//--------------------------------------------------------------------------------------------------
bool gt_PCommissionerTimeout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PApproachCommissioner, false);
    gf_SkipifOver();
    PingDestroy(gv_missionping);
    gf_MissionText(StringExternal("Param/Value/E178981C"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    Wait(4.0, c_timeGame);
    gf_FailMission(12, StringExternal("Param/Value/F1D65C25"), 0);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_PPoliceCheckpoint, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCommissionerTimeout_Init () {
    gt_PCommissionerTimeout = TriggerCreate("gt_PCommissionerTimeout_Func");
    TriggerEnable(gt_PCommissionerTimeout, false);
    TriggerAddEventTimer(gt_PCommissionerTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PMC First Contact
//--------------------------------------------------------------------------------------------------
bool gt_PMCFirstContact_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 15) || (UnitGetOwner(EventUnitTarget()) == 15)))) {
            return false;
        }

        if (!(((PlayerGroupHasPlayer(gv_players, UnitGetOwner(EventUnitTarget())) == true) || (PlayerGroupHasPlayer(gv_players, UnitGetOwner(EventUnit())) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/03405ED6"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/63E9A469"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/701C1277"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F580ED2F"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/3B67F147"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PMCFirstContact_Init () {
    gt_PMCFirstContact = TriggerCreate("gt_PMCFirstContact_Func");
    TriggerEnable(gt_PMCFirstContact, false);
    TriggerAddEventUnitAttacked(gt_PMCFirstContact, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Police Checkpoint
//--------------------------------------------------------------------------------------------------
bool gt_PPoliceCheckpoint_Func (bool testConds, bool runActions) {
    int auto0AFB3BC2_ae;
    int auto0AFB3BC2_ai;
    int autoE4A8D6D5_n;
    int autoE4A8D6D5_i;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PMCFirstContact, true);
    if ((RandomInt(1, 2) == 1)) {
        gf_MissionText(StringExternal("Param/Value/365AB8ED"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/4A8034B7"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/9952BCA2"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/FA4AC73F"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/04300666"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/9E920C27"));
    }
    else {
        gf_MissionText(StringExternal("Param/Value/EE9494FE"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/2C6616CB"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/51E8AB9D"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/F2B7318C"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/0CE0B774"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/714E5AAC"));
        Wait(12.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/8E522139"));
    }
    Wait(15.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/0E423DC6"));
    Wait(15.0, c_timeGame);
    gv_sensorcount = 7;
    gv_silonextint = RandomInt(1, 7);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/9DC07233") + IntToText(gv_sensorcount) + StringExternal("Param/Value/3718A9F3")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/7A811B62"));
    Wait(7.0, c_timeGame);
    gv_policeTCPs[1] = RegionFromId(28);
    gv_policeTCPs[2] = RegionFromId(29);
    gv_policeTCPs[3] = RegionFromId(30);
    gv_policeTCPs[4] = RegionFromId(31);
    gv_policeTCPs[5] = RegionFromId(148);
    gv_policeTCPs[6] = RegionFromId(149);
    gv_policeTCPs[7] = RegionFromId(92);
    UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(148)), libNtve_gf_RandomAngle());
    UnitCreate(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(148)), libNtve_gf_RandomAngle());
    UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(92)), libNtve_gf_RandomAngle());
    UnitCreate(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(92)), libNtve_gf_RandomAngle());
    auto0AFB3BC2_ae = 7;
    auto0AFB3BC2_ai = 1;
    lv_int = 1;
    for ( ; ( (auto0AFB3BC2_ai >= 0 && lv_int <= auto0AFB3BC2_ae) || (auto0AFB3BC2_ai <= 0 && lv_int >= auto0AFB3BC2_ae) ) ; lv_int += auto0AFB3BC2_ai ) {
        if ((lv_int == gv_silonextint)) {
            autoE4A8D6D5_n = 3;
            for (autoE4A8D6D5_i = 1; autoE4A8D6D5_i <= autoE4A8D6D5_n; autoE4A8D6D5_i += 1) {
                UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(gv_policeTCPs[lv_int]), libNtve_gf_RandomAngle());
            }
        }

        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingnumeral[lv_int], RegionGetCenter(gv_policeTCPs[lv_int]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_sensorpings[lv_int] = PingLastCreated();
        UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(gv_policeTCPs[lv_int]), libNtve_gf_RandomAngle());
        UnitGroupLoopBegin(UnitGroup(null, 0, gv_policeTCPs[lv_int], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "PoliceOfficer") || (UnitGetType(UnitGroupLoopCurrent()) == "PoliceOfficerShotgun"))) {
                UnitGroupAdd(gv_policeTCPGroups[lv_int], UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
    }
    if ((PlayerGroupCount(gv_players) <= 2)) {
        TimerStart(gv_missiontimer, RandomFixed(700.0, 900.0), false, c_timeGame);
    }
    else {
        TimerStart(gv_missiontimer, RandomFixed(460.0, 600.0), false, c_timeGame);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_PEnterPoliceTCP, true);
    TriggerEnable(gt_PPoliceTCPTimeout, true);
    Wait(360.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PPoliceCheckpoint_Init () {
    gt_PPoliceCheckpoint = TriggerCreate("gt_PPoliceCheckpoint_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Enter Police TCP
//--------------------------------------------------------------------------------------------------
bool gt_PEnterPoliceTCP_Func (bool testConds, bool runActions) {
    int autoED65024F_ae;
    int autoED65024F_ai;

    // Variable Declarations
    int lv_int;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_players, EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoED65024F_ae = 7;
    autoED65024F_ai = 1;
    lv_int = 1;
    for ( ; ( (autoED65024F_ai >= 0 && lv_int <= autoED65024F_ae) || (autoED65024F_ai <= 0 && lv_int >= autoED65024F_ae) ) ; lv_int += autoED65024F_ai ) {
        if ((EventUnitRegion() == gv_policeTCPs[lv_int])) {
            lv_index = lv_int;
            break;
        }

    }
    if ((gv_tCPRelieved[lv_index] == true)) {
        return true;
    }

    gv_tCPRelieved[lv_index] = true;
    PingDestroy(gv_sensorpings[lv_index]);
    gv_sensorcount = (gv_sensorcount - 1);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/CE3587D0") + IntToText(gv_sensorcount) + StringExternal("Param/Value/9BCF6174")));
    if ((libNtve_gf_UnitGroupIsDead(gv_policeTCPGroups[lv_index]) == true)) {
        gf_MissionText(StringExternal("Param/Value/59A431B5"));
        Wait(3.0, c_timeGame);
        gf_FailMission(2, StringExternal("Param/Value/4EF13B77"), 0);
        Wait(3.0, c_timeGame);
        TriggerExecute(gt_PRAPhantomDown, true, false);
    }
    else {
        gf_MissionText(StringExternal("Param/Value/310A6F0A"));
        Wait(5.0, c_timeGame);
        gf_TextChat(UnitGroupRandomUnit(gv_policeTCPGroups[lv_index], c_unitCountAlive), StringExternal("Param/Value/0C7EF49E"));
        libNtve_gf_CreateUnitsWithDefaultFacing(15, "Zombie", 0, 14, AIRandomSpawnPoint(14, RegionPlayableMap(), 20.0, 50.0, 0.0));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(EventUnitRegion())), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(5, "Creeper", 0, 14, AIRandomSpawnPoint(14, RegionPlayableMap(), 20.0, 50.0, 0.0));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(EventUnitRegion())), c_orderQueueReplace);
        lv_int = 0;
        while (true) {
            lv_int = (lv_int + 1);
            if ((libNtve_gf_UnitGroupIsDead(gv_policeTCPGroups[lv_index]) == true)) {
                gf_FailMission(2, StringExternal("Param/Value/1978593A"), 0);
                break;
            }

            if ((lv_int == 30)) {
                gf_SucceedMission(9, StringExternal("Param/Value/BDE494F0"), 0);
                if ((RandomInt(0, 1) == 1)) {
                    UnitGroupLoopBegin(gv_policeTCPGroups[lv_index]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_MoveToGuardPos(UnitGroupLoopCurrent(), RegionFromId(24));
                    }
                    UnitGroupLoopEnd();
                }
                else {
                    UnitGroupLoopBegin(gv_policeTCPGroups[lv_index]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_MoveToGuardPos(UnitGroupLoopCurrent(), RegionFromId(26));
                    }
                    UnitGroupLoopEnd();
                }
                break;
            }

            Wait(1.0, c_timeGame);
        }
        Wait(3.0, c_timeGame);
        TriggerExecute(gt_PRAPhantomDown, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PEnterPoliceTCP_Init () {
    gt_PEnterPoliceTCP = TriggerCreate("gt_PEnterPoliceTCP_Func");
    TriggerEnable(gt_PEnterPoliceTCP, false);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(28), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(29), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(148), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(149), true);
    TriggerAddEventUnitRegion(gt_PEnterPoliceTCP, null, RegionFromId(92), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Police TCP Timeout
//--------------------------------------------------------------------------------------------------
bool gt_PPoliceTCPTimeout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PEnterPoliceTCP, false);
    gf_SkipifOver();
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroy(gv_missionping);
    gf_MissionText(StringExternal("Param/Value/33ECCFA0"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    Wait(4.0, c_timeGame);
    gf_FailMission(5, StringExternal("Param/Value/015F9BED"), 0);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_PRAPhantomDown, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PPoliceTCPTimeout_Init () {
    gt_PPoliceTCPTimeout = TriggerCreate("gt_PPoliceTCPTimeout_Func");
    TriggerEnable(gt_PPoliceTCPTimeout, false);
    TriggerAddEventTimer(gt_PPoliceTCPTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P RA Phantom Down
//--------------------------------------------------------------------------------------------------
bool gt_PRAPhantomDown_Func (bool testConds, bool runActions) {
    int auto06F5EA09_n;
    int auto06F5EA09_i;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!(((gv_sensorcount == 0) || (TimerWindowVisible(gv_missiontimerwindow, 1) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PEnterPoliceTCP, false);
    TriggerEnable(gt_PPoliceTCPTimeout, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gv_phantomDownLZ = RandomInt(1, 5);
    libNtve_gf_CreateModelAtPoint("ColonistShipWrecked", RegionGetCenter(gv_lZs[gv_phantomDownLZ]));
    gv_rAPhantom = libNtve_gf_ActorLastCreated();
    SoundPlay(SoundLink("Terran_ExplosionMedium", -1), PlayerGroupAll(), 100.0, 0.0);
    auto06F5EA09_n = 4;
    for (auto06F5EA09_i = 1; auto06F5EA09_i <= auto06F5EA09_n; auto06F5EA09_i += 1) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_lZs[gv_phantomDownLZ]), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_phantomCrew, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/01248864"));
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_PEnterPhantomLZ, true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/3D9A19C1"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/107564C0"));
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    Wait(5.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(1, 0);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PRAPhantomDown_Init () {
    gt_PRAPhantomDown = TriggerCreate("gt_PRAPhantomDown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Enter Phantom LZ
//--------------------------------------------------------------------------------------------------
bool gt_PEnterPhantomLZ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_lZs[gv_phantomDownLZ]))) {
            return false;
        }

        if (!(((PlayerGroupHasPlayer(gv_players, EventPlayer()) == true) || ((EventPlayer() == 15) && (UnitGetCustomValue(EventUnit(), 4) != 0.0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PKillCrew, true);
    TriggerEnable(gt_PExtractCrew, true);
    gv_tCPSpawns[1] = RegionFromId(118);
    gv_tCPSpawns[2] = RegionFromId(121);
    gv_tCPSpawns[3] = RegionFromId(119);
    gv_tCPSpawns[4] = RegionFromId(120);
    if ((EventPlayer() == 15)) {
        gv_pMCSquads[FixedToInt(UnitGetCustomValue(EventUnit(), 4))].lv_extracting = true;
        gv_phantomDownLZ = 0;
        gv_phantomCrewExtraction = RandomInt(1, 4);
        UnitGroupLoopBegin(gv_phantomCrew);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), 15, true);
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        }
        UnitGroupLoopEnd();
        UnitGroupIssueOrder(gv_phantomCrew, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_tCPSpawns[gv_phantomCrewExtraction])), c_orderQueueReplace);
        gf_MissionText(StringExternal("Param/Value/4C048964"));
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/0946642E"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/761010A0"));
        gf_SpawnPMCSquad(1, 0);
    }
    else {
        gv_phantomDownLZ = 0;
        gv_phantomCrewExtraction = RandomInt(1, 4);
        UnitGroupLoopBegin(gv_phantomCrew);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), EventPlayer(), true);
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        }
        UnitGroupLoopEnd();
        gf_MissionText(StringExternal("Param/Value/7BBAA040"));
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/BF2B0566"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/533B3E37"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_tCPSpawns[gv_phantomCrewExtraction]), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/AD5C59E4"));
        gv_missionping = PingLastCreated();
    }
    Wait(30.0, c_timeGame);
    ActorSend(gv_rAPhantom, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PEnterPhantomLZ_Init () {
    gt_PEnterPhantomLZ = TriggerCreate("gt_PEnterPhantomLZ_Func");
    TriggerEnable(gt_PEnterPhantomLZ, false);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_PEnterPhantomLZ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Kill Crew
//--------------------------------------------------------------------------------------------------
bool gt_PKillCrew_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_phantomCrew, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 15)) {
        gf_SucceedMission(8, StringExternal("Param/Value/FD197D38"), 0);
    }
    else {
        gf_FailMission(2, StringExternal("Param/Value/ECFCCCDD"), 0);
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_phantomCrew) == true)) {
        TriggerEnable(gt_PKillCrew, false);
        TriggerEnable(gt_PExtractCrew, false);
        PingDestroy(gv_missionping);
        TriggerExecute(gt_PChapter1ElFantasmadelaSelva, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PKillCrew_Init () {
    gt_PKillCrew = TriggerCreate("gt_PKillCrew_Func");
    TriggerEnable(gt_PKillCrew, false);
    TriggerAddEventUnitDied(gt_PKillCrew, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Extract Crew
//--------------------------------------------------------------------------------------------------
bool gt_PExtractCrew_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_phantomCrew, EventUnit()) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_tCPSpawns[gv_phantomCrewExtraction]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == 15)) {
        gf_FailMission(3, StringExternal("Param/Value/BAAB90CF"), 0);
    }
    else {
        gf_SucceedMission(12, StringExternal("Param/Value/77BB61E3"), 0);
    }
    UnitGroupRemove(gv_phantomCrew, EventUnit());
    UnitRemove(EventUnit());
    if ((libNtve_gf_UnitGroupIsDead(gv_phantomCrew) == true)) {
        TriggerEnable(gt_PKillCrew, false);
        TriggerEnable(gt_PExtractCrew, false);
        PingDestroy(gv_missionping);
        TriggerExecute(gt_PChapter1ElFantasmadelaSelva, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PExtractCrew_Init () {
    gt_PExtractCrew = TriggerCreate("gt_PExtractCrew_Func");
    TriggerEnable(gt_PExtractCrew, false);
    TriggerAddEventUnitRegion(gt_PExtractCrew, null, RegionFromId(118), true);
    TriggerAddEventUnitRegion(gt_PExtractCrew, null, RegionFromId(121), true);
    TriggerAddEventUnitRegion(gt_PExtractCrew, null, RegionFromId(119), true);
    TriggerAddEventUnitRegion(gt_PExtractCrew, null, RegionFromId(120), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Chapter 1 - El Fantasma de la Selva
//--------------------------------------------------------------------------------------------------
bool gt_PChapter1ElFantasmadelaSelva_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    gv_pauseSpawning = true;
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/7BB6BDD0"));
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/F9A4AEED"));
    Wait(4.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gv_pauseSpawning = false;
    UnitPauseAll(false);
    TriggerExecute(gt_PConvoyRaid, true, false);
    gf_SetNewLighting("UA3Night", 600.0);
    TriggerEnable(gt_PMCPeriodicSpawn, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PChapter1ElFantasmadelaSelva_Init () {
    gt_PChapter1ElFantasmadelaSelva = TriggerCreate("gt_PChapter1ElFantasmadelaSelva_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaid_Func (bool testConds, bool runActions) {
    int auto4B50186B_val;
    int autoF2E1D6CA_ae;
    int autoF2E1D6CA_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_convoyset = RandomInt(1, 3);
    auto4B50186B_val = gv_convoyset;
    if (auto4B50186B_val == 1) {
        gv_convoystartend[1][1] = RegionFromId(17);
        gv_convoyroutes[1][1] = PointFromId(1776);
        gv_convoyroutes[1][2] = PointFromId(1777);
        gv_convoyroutes[1][3] = PointFromId(1778);
        gv_convoyroutes[1][4] = PointFromId(1779);
        gv_convoyroutes[1][5] = PointFromId(1780);
        gv_convoyroutes[1][6] = PointFromId(1781);
        gv_convoyroutes[1][7] = PointFromId(1782);
        gv_convoyroutes[1][8] = PointFromId(1783);
        gv_convoyroutes[1][9] = PointFromId(1784);
        gv_convoystartend[1][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    else if (auto4B50186B_val == 2) {
        gv_convoystartend[2][1] = RegionFromId(41);
        gv_convoyroutes[2][1] = PointFromId(1785);
        gv_convoyroutes[2][2] = PointFromId(1786);
        gv_convoyroutes[2][3] = PointFromId(1787);
        gv_convoyroutes[2][4] = PointFromId(1788);
        gv_convoyroutes[2][5] = PointFromId(1789);
        gv_convoyroutes[2][6] = PointFromId(1790);
        gv_convoyroutes[2][7] = PointFromId(1791);
        gv_convoyroutes[2][8] = PointFromId(1792);
        gv_convoyroutes[2][9] = PointFromId(1782);
        gv_convoyroutes[2][10] = PointFromId(1783);
        gv_convoyroutes[2][11] = PointFromId(1784);
        gv_convoystartend[2][2] = RegionFromId(18);
        gv_convoymax = 11;
    }
    else if (auto4B50186B_val == 3) {
        gv_convoystartend[3][1] = RegionFromId(19);
        gv_convoyroutes[3][1] = PointFromId(1793);
        gv_convoyroutes[3][2] = PointFromId(1788);
        gv_convoyroutes[3][3] = PointFromId(1789);
        gv_convoyroutes[3][4] = PointFromId(1790);
        gv_convoyroutes[3][5] = PointFromId(1791);
        gv_convoyroutes[3][6] = PointFromId(1792);
        gv_convoyroutes[3][7] = PointFromId(1782);
        gv_convoyroutes[3][8] = PointFromId(1783);
        gv_convoyroutes[3][9] = PointFromId(1784);
        gv_convoystartend[3][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    else {
    }
    if ((RandomInt(1, 2) == 1)) {
        gv_pConvoyReverse = true;
        gv_convoynext = gv_convoymax;
        gv_convoymax = 1;
        gv_convoystartend[gv_convoyset][0] = gv_convoystartend[gv_convoyset][2];
        gv_convoystartend[gv_convoyset][2] = gv_convoystartend[gv_convoyset][1];
        gv_convoystartend[gv_convoyset][1] = gv_convoystartend[gv_convoyset][0];
    }

    gf_MissionText(StringExternal("Param/Value/E85E4A47"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2FA622D1"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/C596B085"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/57A47DB2"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 7.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E784128E"));
    Wait(7.0, c_timeGame);
    TriggerEnable(gt_PConvoyRaidDies, true);
    TriggerEnable(gt_PConvoyRaidLeave, true);
    TriggerEnable(gt_PConvoyRaidLoop, true);
    gv_pauseSpawning = true;
    autoF2E1D6CA_ae = 5;
    autoF2E1D6CA_ai = 1;
    lv_int = 1;
    for ( ; ( (autoF2E1D6CA_ai >= 0 && lv_int <= autoF2E1D6CA_ae) || (autoF2E1D6CA_ai <= 0 && lv_int >= autoF2E1D6CA_ae) ) ; lv_int += autoF2E1D6CA_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistTransport", c_unitCreateIgnorePlacement, 15, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        UnitGroupAdd(gv_convoy, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
        if ((lv_int == 1)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A4D1E0A4"));
            gv_missionping = PingLastCreated();
        }

        Wait(3.0, c_timeGame);
    }
    gv_pauseSpawning = false;
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    SoundPlay(SoundLink("THanson03AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnPMCSquad(1, 0);
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    if ((RandomInt(0, 1) == 1)) {
        gf_SpawnPMCSquad(4, 0);
    }
    else {
        gf_SpawnPMCSquad(15, 0);
    }
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaid_Init () {
    gt_PConvoyRaid = TriggerCreate("gt_PConvoyRaid_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid Loop
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaidLoop_Func (bool testConds, bool runActions) {
    int auto60F68EA3_ae;
    int auto60F68EA3_ai;

    // Variable Declarations
    int lv_loopint;
    unit lv_tempunit;
    unit lv_nextunit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), gv_convoyroutes[gv_convoyset][gv_convoynext]) <= 2.0) && (gv_convoyfinal == false)) {
        Wait(2.0, c_timeGame);
        if ((gv_convoynext == gv_convoymax)) {
            gv_convoyfinal = true;
        }
        else {
            if ((gv_pConvoyReverse == false)) {
                gv_convoynext = (gv_convoynext + 1);
            }
            else {
                gv_convoynext = (gv_convoynext - 1);
            }
        }
    }

    auto60F68EA3_ae = UnitGroupCount(gv_convoy, c_unitCountAll);
    auto60F68EA3_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto60F68EA3_ai >= 0 && lv_loopint <= auto60F68EA3_ae) || (auto60F68EA3_ai <= 0 && lv_loopint >= auto60F68EA3_ae) ) ; lv_loopint += auto60F68EA3_ai ) {
        lv_tempunit = UnitGroupUnit(gv_convoy, lv_loopint);
        if ((gv_convoyfinal == true)) {
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_convoystartend[gv_convoyset][2])), c_orderQueueReplace);
        }
        else {
            if ((lv_loopint == 1)) {
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                lv_nextunit = UnitGroupUnit(gv_convoy, (lv_loopint - 1));
                if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), UnitGetPosition(lv_nextunit)) >= 15.0)) {
                    UnitBehaviorAdd(lv_tempunit, "CatchingUp", lv_tempunit, 1);
                }
                else {
                    UnitBehaviorRemove(lv_tempunit, "CatchingUp", 1);
                }
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_nextunit), 5.0, AngleBetweenPoints(UnitGetPosition(lv_nextunit), UnitGetPosition(lv_tempunit)))), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaidLoop_Init () {
    gt_PConvoyRaidLoop = TriggerCreate("gt_PConvoyRaidLoop_Func");
    TriggerEnable(gt_PConvoyRaidLoop, false);
    TriggerAddEventTimePeriodic(gt_PConvoyRaidLoop, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid Leave
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaidLeave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_convoystartend[gv_convoyset][2]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PConvoyRaidDies, false);
    UnitRemove(EventUnit());
    gf_FailMission(7, StringExternal("Param/Value/C598B1FE"), 0);
    gv_infestationLevel = (gv_infestationLevel + 4);
    gv_convoyvehiclessafe = (gv_convoyvehiclessafe + 1);
    TriggerEnable(gt_PConvoyRaidDies, true);
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_PConvoyRaidEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaidLeave_Init () {
    gt_PConvoyRaidLeave = TriggerCreate("gt_PConvoyRaidLeave_Func");
    TriggerEnable(gt_PConvoyRaidLeave, false);
    TriggerAddEventUnitRegion(gt_PConvoyRaidLeave, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_PConvoyRaidLeave, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_PConvoyRaidLeave, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_PConvoyRaidLeave, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid Dies
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaidDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_convoy, EventUnit());
    gf_SucceedMission(15, StringExternal("Param/Value/87E5C719"), 0);
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_PConvoyRaidEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaidDies_Init () {
    gt_PConvoyRaidDies = TriggerCreate("gt_PConvoyRaidDies_Func");
    TriggerEnable(gt_PConvoyRaidDies, false);
    TriggerAddEventUnitDied(gt_PConvoyRaidDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Convoy Raid End
//--------------------------------------------------------------------------------------------------
bool gt_PConvoyRaidEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PConvoyRaidLoop, false);
    TriggerEnable(gt_PConvoyRaidDies, false);
    TriggerEnable(gt_PConvoyRaidLeave, false);
    gf_SkipifOver();
    PingDestroy(gv_missionping);
    if ((gv_convoyvehiclessafe >= 2)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_MissionText(StringExternal("Param/Value/B567C092"));
        SoundPlay(SoundLink("TValerian02AMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_MissionText(StringExternal("Param/Value/A4EACB12"));
        SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_infestationLevel = (gv_infestationLevel - 4);
    }
    Wait(7.0, c_timeGame);
    TriggerExecute(gt_PIgnis, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PConvoyRaidEnd_Init () {
    gt_PConvoyRaidEnd = TriggerCreate("gt_PConvoyRaidEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ignis
//--------------------------------------------------------------------------------------------------
bool gt_PIgnis_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/EDF8179F"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C7C44DFA"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BA5CBA3C"));
    Wait(9.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_MissionText(StringExternal("Param/Value/CA5ECC50"));
    Wait(9.0, c_timeGame);
    SoundPlay(SoundLink("THanson03AMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnPMCSquad(2, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(15, 0);
    Wait(3.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/262E49B6"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/63436E19"));
    gf_SpawnPMCSquad(12, 0);
    while (!((libNtve_gf_UnitGroupIsDead(UnitGroup("Ignis", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(55, StringExternal("Param/Value/70181715"), 0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(9.0, c_timeGame);
    TriggerExecute(gt_PGuardPosts, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PIgnis_Init () {
    gt_PIgnis = TriggerCreate("gt_PIgnis_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Guard Posts
//--------------------------------------------------------------------------------------------------
bool gt_PGuardPosts_Func (bool testConds, bool runActions) {
    int autoC62178A5_ae;
    int autoC62178A5_ai;
    int autoB51510D1_n;
    int autoB51510D1_i;
    int auto164358E7_ae;
    int auto164358E7_ai;

    // Variable Declarations
    int lv_int;
    region[7] lv_heliportdockingbays;
    region[7] lv_guslaniguards;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heliportdockingbays[1] = RegionFromId(67);
    lv_heliportdockingbays[2] = RegionFromId(68);
    lv_heliportdockingbays[3] = RegionFromId(69);
    lv_heliportdockingbays[4] = RegionFromId(70);
    lv_heliportdockingbays[5] = RegionFromId(71);
    lv_heliportdockingbays[6] = RegionFromId(72);
    lv_guslaniguards[1] = RegionFromId(137);
    lv_guslaniguards[2] = RegionFromId(138);
    lv_guslaniguards[3] = RegionFromId(12);
    lv_guslaniguards[4] = RegionFromId(135);
    lv_guslaniguards[5] = RegionFromId(136);
    lv_guslaniguards[6] = RegionFromId(133);
    gv_policeTCPs[1] = RegionFromId(28);
    gv_policeTCPs[2] = RegionFromId(29);
    gv_policeTCPs[3] = RegionFromId(30);
    gv_policeTCPs[4] = RegionFromId(31);
    gv_policeTCPs[5] = RegionFromId(148);
    gv_policeTCPs[6] = RegionFromId(149);
    gv_policeTCPs[7] = RegionFromId(92);
    gv_policeTCPs[8] = lv_heliportdockingbays[RandomInt(1, 6)];
    gv_policeTCPs[9] = gv_lZs[RandomInt(1, 5)];
    gv_policeTCPs[10] = lv_guslaniguards[RandomInt(1, 6)];
    gv_policeTCPs[11] = RegionFromId(140);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    autoC62178A5_ae = 11;
    autoC62178A5_ai = 1;
    lv_int = 1;
    for ( ; ( (autoC62178A5_ai >= 0 && lv_int <= autoC62178A5_ae) || (autoC62178A5_ai <= 0 && lv_int >= autoC62178A5_ae) ) ; lv_int += autoC62178A5_ai ) {
        UnitGroupClear(gv_policeTCPGroups[lv_int]);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_policeTCPs[lv_int]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_sensorpings[lv_int] = PingLastCreated();
        autoB51510D1_n = RandomInt(2, 3);
        for (autoB51510D1_i = 1; autoB51510D1_i <= autoB51510D1_n; autoB51510D1_i += 1) {
            UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(gv_policeTCPs[lv_int]), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "LiftBootsIn", UnitLastCreated(), 1);
            UnitGroupAdd(gv_policeTCPGroups[lv_int], UnitLastCreated());
            UnitSetCustomValue(UnitLastCreated(), 6, lv_int);
            Wait(RandomFixed(0.0, 1.0), c_timeGame);
        }
        UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(gv_mapEdges[RandomInt(1, 4)]), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_policeTCPGroups[lv_int], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 6, lv_int);
        gf_MoveToGuardPos(UnitLastCreated(), gv_policeTCPs[lv_int]);
        Wait(RandomFixed(0.0, 1.0), c_timeGame);
        UnitCreate(1, "InfantryAutomaticRifleman", 0, 15, RegionRandomPoint(gv_policeTCPs[lv_int]), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "LiftBootsIn", UnitLastCreated(), 1);
        UnitGroupAdd(gv_policeTCPGroups[lv_int], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 6, lv_int);
    }
    gv_sensorcount = 11;
    auto164358E7_ae = 11;
    auto164358E7_ai = 1;
    lv_int = 1;
    for ( ; ( (auto164358E7_ai >= 0 && lv_int <= auto164358E7_ae) || (auto164358E7_ai <= 0 && lv_int >= auto164358E7_ae) ) ; lv_int += auto164358E7_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(gv_policeTCPGroups[lv_int]) == true)) {
            gv_sensorcount = (gv_sensorcount - 1);
            PingDestroy(gv_sensorpings[lv_int]);
        }

    }
    TriggerEnable(gt_PDestroyGuardPost, true);
    TriggerEnable(gt_PGuardPostsTimeout, true);
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/28E37F58"));
    Wait(9.0, c_timeGame);
    if ((gv_sensorcount < 11)) {
        gf_MissionText(StringExternal("Param/Value/B2E59818"));
    }

    gf_SpawnPMCSquad(1, 0);
    gf_SkipifOver();
    if ((PlayerGroupCount(gv_players) <= 2)) {
        TimerStart(gv_missiontimer, RandomFixed(720.0, 780.0), false, c_timeGame);
    }
    else {
        TimerStart(gv_missiontimer, RandomFixed(480.0, 520.0), false, c_timeGame);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/A32E89D5") + IntToText(gv_sensorcount) + StringExternal("Param/Value/97DEC596")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/131B683B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGuardPosts_Init () {
    gt_PGuardPosts = TriggerCreate("gt_PGuardPosts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Destroy Guard Post
//--------------------------------------------------------------------------------------------------
bool gt_PDestroyGuardPost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time;
    int lv_index;

    // Variable Initialization
    lv_index = FixedToInt(UnitGetCustomValue(EventUnit(), 6));

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }

        if (!((lv_index > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitGroupIsDead(gv_policeTCPGroups[lv_index]) == true)) {
        if ((UnitGetOwner(libNtve_gf_KillingUnit()) == 14)) {
            gf_MissionText(StringExternal("Param/Value/ECFBB47D"));
        }
        else {
            gf_SucceedMission(6, StringExternal("Param/Value/AAA83958"), 0);
        }
        ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/2C51607E") + IntToText(gv_sensorcount) + StringExternal("Param/Value/D97E4698")));
        gv_sensorcount = (gv_sensorcount - 1);
        PingDestroy(gv_sensorpings[lv_index]);
        if ((gv_sensorcount == 0)) {
            TriggerExecute(gt_PUmbra, true, false);
            lv_time = TimerGetRemaining(gv_missiontimer);
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            Wait(2.0, c_timeGame);
            gf_SucceedMission(22, StringExternal("Param/Value/7260B851"), 0);
            Wait(2.0, c_timeGame);
            if ((lv_time >= 120.0)) {
                gf_SucceedMission(12, StringExternal("Param/Value/DCC3AD69"), 0);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PDestroyGuardPost_Init () {
    gt_PDestroyGuardPost = TriggerCreate("gt_PDestroyGuardPost_Func");
    TriggerEnable(gt_PDestroyGuardPost, false);
    TriggerAddEventUnitDied(gt_PDestroyGuardPost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Guard Posts Timeout
//--------------------------------------------------------------------------------------------------
bool gt_PGuardPostsTimeout_Func (bool testConds, bool runActions) {
    int auto193E24BB_ae;
    int auto193E24BB_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PDestroyGuardPost, false);
    gf_SkipifOver();
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    auto193E24BB_ae = 11;
    auto193E24BB_ai = 1;
    lv_int = 1;
    for ( ; ( (auto193E24BB_ai >= 0 && lv_int <= auto193E24BB_ae) || (auto193E24BB_ai <= 0 && lv_int >= auto193E24BB_ae) ) ; lv_int += auto193E24BB_ai ) {
        PingDestroy(gv_sensorpings[lv_int]);
    }
    gf_MissionText(StringExternal("Param/Value/2C75E612"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    Wait(4.0, c_timeGame);
    if ((gv_sensorcount <= 3)) {
        gf_MissionText(StringExternal("Param/Value/6D42874C"));
    }
    else {
        gf_MissionText(StringExternal("Param/Value/30715DC4"));
        gf_SpawnPMCSquad(1, 0);
    }
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_PUmbra, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGuardPostsTimeout_Init () {
    gt_PGuardPostsTimeout = TriggerCreate("gt_PGuardPostsTimeout_Func");
    TriggerEnable(gt_PGuardPostsTimeout, false);
    TriggerAddEventTimer(gt_PGuardPostsTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Umbra
//--------------------------------------------------------------------------------------------------
bool gt_PUmbra_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_umbra;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PDestroyGuardPost, false);
    TriggerEnable(gt_PGuardPostsTimeout, false);
    Wait(7.0, c_timeGame);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Umbra", 0, 15, RegionRandomPoint(gv_spawnRegion));
    lv_umbra = UnitLastCreated();
    gf_RegisterUnitEntersLeavesRegion(gt_UmbraAspectusLoop, lv_umbra, RegionEntireMap(), true);
    SoundPlay(SoundLink("TTosh03BMusicEventAAAA", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C3473B2E"));
    gf_SpawnPMCSquad(1, 0);
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/7F3079E9"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/7014302A"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/C4B86F51"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BD1574C4"));
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(1, 0);
    while (!((UnitIsAlive(lv_umbra) == false) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_MissionText(StringExternal("Param/Value/0930C1EC"));
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(37, StringExternal("Param/Value/E87AC859"), 0);
    Wait(9.0, c_timeGame);
    TriggerExecute(gt_PChapter2Miserere, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PUmbra_Init () {
    gt_PUmbra = TriggerCreate("gt_PUmbra_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Chapter 2 - Miserere
//--------------------------------------------------------------------------------------------------
bool gt_PChapter2Miserere_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    gv_pauseSpawning = true;
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/84499F8B"));
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/D68C53E7"));
    Wait(4.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gv_pauseSpawning = false;
    UnitPauseAll(false);
    TriggerExecute(gt_PTheBurrowed, true, false);
    TriggerEnable(gt_ItemSpawn2, true);
    TriggerExecute(gt_ItemSpawn2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PChapter2Miserere_Init () {
    gt_PChapter2Miserere = TriggerCreate("gt_PChapter2Miserere_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P The Burrowed
//--------------------------------------------------------------------------------------------------
bool gt_PTheBurrowed_Func (bool testConds, bool runActions) {
    int autoB2D6BE61_ae;
    int autoB2D6BE61_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    gf_SkipifOver();
    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/20AEE9CC"));
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CASOnStation", 1);
    }
    PlayerGroupLoopEnd();
    Wait(9.0, c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_MissionText(StringExternal("Param/Value/7E18B0A0"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2BA63766"));
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(5, 0);
    Wait(9.0, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    TriggerEnable(gt_PMCPeriodicSpawn, false);
    TriggerEnable(gt_UndeadSpawningBurrowed, true);
    TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/9E99A425"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/E9573F5C"));
    TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(300.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_SpawnItemLoc("SeismicResonator", 1, RegionRandomPoint(gv_lZs[RandomInt(1, 5)]));
    gf_SpawnItemLoc("SeismicResonator", 1, RegionRandomPoint(gv_weaponcacheregion[1]));
    gf_SpawnItemLoc("SeismicResonator", 1, RegionRandomPoint(gv_tCPregion[RandomInt(1, 4)]));
    TriggerEnable(gt_UseSeismicResonator, true);
    Wait(12.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("SeismicResonator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 66.67, 66.67, 0.00), 0.0, 270.0);
        gv_sensorpings[lv_int] = PingLastCreated();
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        UnitGroupAdd(gv_highlandercivilians, UnitGroupLoopCurrent());
        gv_missionUnit[lv_int] = UnitLastCreated();
        lv_int = (lv_int + 1);
    }
    UnitGroupLoopEnd();
    gf_MissionText(StringExternal("Param/Value/A07CC903"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/6842440F"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/4BE21D6A"));
    TimerStart(gv_missiontimer, 420.0, false, c_timeGame);
    while (!(((libNtve_gf_UnitGroupIsDead(gv_highlandercivilians) == true) || (TimerGetRemaining(gv_missiontimer) == 0.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((TimerGetRemaining(gv_missiontimer) == 0.0)) {
        TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
        TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
        TriggerExecute(gt_UndeadSpawningBurrowed, true, false);
        gf_SpawnPMCSquad(9, 0);
        gf_SpawnPMCSquad(4, 0);
        gf_SpawnPMCSquad(5, 0);
    }
    else {
        TriggerEnable(gt_UndeadSpawningBurrowed, false);
    }
    autoB2D6BE61_ae = 3;
    autoB2D6BE61_ai = 1;
    lv_int = 1;
    for ( ; ( (autoB2D6BE61_ai >= 0 && lv_int <= autoB2D6BE61_ae) || (autoB2D6BE61_ai <= 0 && lv_int >= autoB2D6BE61_ae) ) ; lv_int += autoB2D6BE61_ai ) {
        PingDestroy(gv_sensorpings[lv_int]);
        gv_missionUnit[lv_int] = null;
        UnitGroupClear(gv_highlandercivilians);
    }
    TriggerEnable(gt_UseSeismicResonator, false);
    TriggerExecute(gt_PGhostConvoy, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTheBurrowed_Init () {
    gt_PTheBurrowed = TriggerCreate("gt_PTheBurrowed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Seismic Resonator
//--------------------------------------------------------------------------------------------------
bool gt_UseSeismicResonator_Func (bool testConds, bool runActions) {
    int auto8296E965_ae;
    int auto8296E965_ai;

    // Variable Declarations
    int lv_int;
    fixed lv_magnitude;
    fixed lv_dist;
    point lv_epicenter;

    // Variable Initialization
    lv_epicenter = UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SeismicResonator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("EnergyNovaShockwave", UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())));
    SoundPlayOnUnit(SoundLink("Spectre_EMPImpact", -1), PlayerGroupAll(), UnitInventoryUnit(EventUnitInventoryItem()), 0.0, 100.0, 0.0);
    SoundPlay(SoundLink("CargoTruck_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
    auto8296E965_ae = 3;
    auto8296E965_ai = 1;
    lv_int = 1;
    for ( ; ( (auto8296E965_ai >= 0 && lv_int <= auto8296E965_ae) || (auto8296E965_ai <= 0 && lv_int >= auto8296E965_ae) ) ; lv_int += auto8296E965_ai ) {
        if ((EventUnitInventoryItem() == gv_missionUnit[lv_int])) {
            PingDestroy(gv_sensorpings[lv_int]);
        }

    }
    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_epicenter) <= 20.0)) {
            lv_magnitude = (3.1 - (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_epicenter) / 10.0));
            lv_dist = DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_epicenter);
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionXY, lv_magnitude, 20.0, 2.0, 1.5);
            SoundPlay(SoundLink("EarRinging", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), (100.0 - (lv_dist * 10.0)), 0.0);
        }

    }
    UnitGroupLoopEnd();
    UnitRemove(EventUnitInventoryItem());
    gf_SucceedMission(11, StringExternal("Param/Value/DF1BE62C"), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseSeismicResonator_Init () {
    gt_UseSeismicResonator = TriggerCreate("gt_UseSeismicResonator_Func");
    TriggerEnable(gt_UseSeismicResonator, false);
    TriggerAddEventUnitInventoryChange(gt_UseSeismicResonator, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoy_Func (bool testConds, bool runActions) {
    int auto661F7B42_val;
    int autoBBDD040E_ae;
    int autoBBDD040E_ai;
    int autoBECF7681_ae;
    int autoBECF7681_ai;
    int auto7A408D2C_n;
    int auto7A408D2C_i;

    // Variable Declarations
    int lv_int;
    int lv_convoyspawn;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PMCPeriodicSpawn, true);
    gv_convoyvehiclessafe = 0;
    gv_convoyset = RandomInt(1, 3);
    auto661F7B42_val = gv_convoyset;
    if (auto661F7B42_val == 1) {
        gv_convoyroutes[1][0] = RegionGetCenter(RegionFromId(17));
        gv_convoyroutes[1][1] = PointFromId(1776);
        gv_convoyroutes[1][2] = PointFromId(1777);
        gv_convoyroutes[1][3] = PointFromId(1778);
        gv_convoyroutes[1][4] = PointFromId(1779);
        gv_convoyroutes[1][5] = PointFromId(1780);
        gv_convoyroutes[1][6] = PointFromId(1781);
        gv_convoyroutes[1][7] = PointFromId(1782);
        gv_convoyroutes[1][8] = PointFromId(1783);
        gv_convoyroutes[1][9] = PointFromId(1784);
        gv_convoyroutes[1][10] = RegionGetCenter(RegionFromId(18));
        gv_convoymax = 10;
    }
    else if (auto661F7B42_val == 2) {
        gv_convoystartend[2][1] = RegionFromId(41);
        gv_convoyroutes[2][0] = RegionGetCenter(RegionFromId(41));
        gv_convoyroutes[2][1] = PointFromId(1785);
        gv_convoyroutes[2][2] = PointFromId(1786);
        gv_convoyroutes[2][3] = PointFromId(1787);
        gv_convoyroutes[2][4] = PointFromId(1788);
        gv_convoyroutes[2][5] = PointFromId(1789);
        gv_convoyroutes[2][6] = PointFromId(1790);
        gv_convoyroutes[2][7] = PointFromId(1791);
        gv_convoyroutes[2][8] = PointFromId(1792);
        gv_convoyroutes[2][9] = PointFromId(1782);
        gv_convoyroutes[2][10] = PointFromId(1783);
        gv_convoyroutes[2][11] = PointFromId(1784);
        gv_convoyroutes[2][12] = RegionGetCenter(RegionFromId(18));
        gv_convoymax = 12;
    }
    else if (auto661F7B42_val == 3) {
        gv_convoyroutes[3][0] = RegionGetCenter(RegionFromId(19));
        gv_convoyroutes[3][1] = PointFromId(1793);
        gv_convoyroutes[3][2] = PointFromId(1788);
        gv_convoyroutes[3][3] = PointFromId(1789);
        gv_convoyroutes[3][4] = PointFromId(1790);
        gv_convoyroutes[3][5] = PointFromId(1791);
        gv_convoyroutes[3][6] = PointFromId(1792);
        gv_convoyroutes[3][7] = PointFromId(1782);
        gv_convoyroutes[3][8] = PointFromId(1783);
        gv_convoyroutes[3][9] = PointFromId(1784);
        gv_convoyroutes[3][10] = RegionGetCenter(RegionFromId(18));
        gv_convoymax = 10;
    }
    else {
    }
    if ((RandomInt(1, 2) == 1)) {
        gv_pConvoyReverse = true;
        lv_convoyspawn = gv_convoymax;
        gv_convoynext = (gv_convoymax - 1);
        gv_convoymax = 0;
    }
    else {
        gv_pConvoyReverse = false;
    }
    gf_Reinforcements();
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5D2BB9B5"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/61954A6B"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/BEF3FDC4"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/C7E6414F"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 7.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EB9BC3D6"));
    Wait(7.0, c_timeGame);
    TriggerEnable(gt_PGhostConvoyDies, true);
    TriggerEnable(gt_PGhostConvoyLeave, true);
    TriggerEnable(gt_PGhostConvoyLoop, true);
    TriggerEnable(gt_PGhostConvoyContact, true);
    gv_pauseSpawning = true;
    autoBBDD040E_ae = 5;
    autoBBDD040E_ai = 1;
    lv_int = 1;
    for ( ; ( (autoBBDD040E_ai >= 0 && lv_int <= autoBBDD040E_ae) || (autoBBDD040E_ai <= 0 && lv_int >= autoBBDD040E_ae) ) ; lv_int += autoBBDD040E_ai ) {
        if ((lv_int >= 2) && (lv_int <= 4)) {
            libNtve_gf_UnitCreateFacingPoint(1, "LMTV", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][lv_convoyspawn], gv_convoyroutes[gv_convoyset][1]);
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "ColonistTransport", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][lv_convoyspawn], gv_convoyroutes[gv_convoyset][1]);
        }
        UnitGroupAdd(gv_convoy, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
        if ((lv_int == 1)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3254D25E"));
            gv_missionping = PingLastCreated();
        }

        libNtve_gf_UnitCreateFacingPoint(1, "GhostMini", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][lv_convoyspawn], gv_convoyroutes[gv_convoyset][1]);
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "FragAIGrouporHero", UnitLastCreated(), 1);
        }

        UnitGroupAdd(gv_patrol, UnitLastCreated());
        Wait(3.0, c_timeGame);
    }
    autoBECF7681_ae = 3;
    autoBECF7681_ai = 1;
    lv_int = 1;
    for ( ; ( (autoBECF7681_ai >= 0 && lv_int <= autoBECF7681_ae) || (autoBECF7681_ai <= 0 && lv_int >= autoBECF7681_ae) ) ; lv_int += autoBECF7681_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "GhostMini", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][lv_convoyspawn], gv_convoyroutes[gv_convoyset][1]);
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "FragAIGrouporHero", UnitLastCreated(), 1);
        }

        UnitGroupAdd(gv_patrol, UnitLastCreated());
        Wait(0.5, c_timeGame);
    }
    auto7A408D2C_n = 4;
    for (auto7A408D2C_i = 1; auto7A408D2C_i <= auto7A408D2C_n; auto7A408D2C_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "GhostMini", c_unitCreateIgnorePlacement, 13, gv_convoyroutes[gv_convoyset][lv_convoyspawn], gv_convoyroutes[gv_convoyset][1]);
        if ((RandomInt(0, 2) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "FragAIGrouporHero", UnitLastCreated(), 1);
        }

        UnitGroupAdd(gv_ghostSquad, UnitLastCreated());
    }
    gv_pauseSpawning = false;
    Wait(RandomFixed(15.0, 45.0), c_timeGame);
    SoundPlay(SoundLink("TTosh03BMusicEventCCCC", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    Wait(RandomFixed(15.0, 45.0), c_timeGame);
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(15, 1);
    Wait(RandomFixed(15.0, 45.0), c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(3, 0);
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(2, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoy_Init () {
    gt_PGhostConvoy = TriggerCreate("gt_PGhostConvoy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy Loop
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyLoop_Func (bool testConds, bool runActions) {
    int autoE42A65CD_ae;
    int autoE42A65CD_ai;
    int auto23F2BCD7_ae;
    int auto23F2BCD7_ai;

    // Variable Declarations
    int lv_loopint;
    unit lv_tempunit;
    unit lv_nextunit;
    unit lv_firstunit;
    abilcmd[4] lv_order;
    point lv_offset;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_order[1] = AbilityCommand("move", 0);
    lv_order[2] = AbilityCommand("attack", 0);
    lv_order[3] = AbilityCommand("attack", 0);
    lv_firstunit = UnitGroupUnit(gv_convoy, 1);
    PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), gv_convoyroutes[gv_convoyset][gv_convoynext]) <= 2.0) && (gv_convoyfinal == false)) {
        Wait(2.0, c_timeGame);
        if ((gv_convoynext == gv_convoymax)) {
            gv_convoyfinal = true;
        }
        else {
            if ((gv_pConvoyReverse == false)) {
                gv_convoynext = (gv_convoynext + 1);
            }
            else {
                gv_convoynext = (gv_convoynext - 1);
            }
            if ((gv_convoynext == gv_convoymax)) {
                gv_convoyfinal = true;
            }

        }
    }

    autoE42A65CD_ae = UnitGroupCount(gv_convoy, c_unitCountAll);
    autoE42A65CD_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoE42A65CD_ai >= 0 && lv_loopint <= autoE42A65CD_ae) || (autoE42A65CD_ai <= 0 && lv_loopint >= autoE42A65CD_ae) ) ; lv_loopint += autoE42A65CD_ai ) {
        lv_tempunit = UnitGroupUnit(gv_convoy, lv_loopint);
        if ((lv_loopint == 1)) {
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
        }
        else {
            lv_nextunit = UnitGroupUnit(gv_convoy, (lv_loopint - 1));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), UnitGetPosition(lv_nextunit)) >= 15.0)) {
                UnitBehaviorAdd(lv_tempunit, "CatchingUp", lv_tempunit, 1);
            }
            else {
                UnitBehaviorRemove(lv_tempunit, "CatchingUp", 1);
            }
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_nextunit), 5.0, AngleBetweenPoints(UnitGetPosition(lv_nextunit), UnitGetPosition(lv_tempunit)))), c_orderQueueReplace);
        }
    }
    if ((RandomInt(0, 3) == 1)) {
        lv_offset = UnitGetPosition(UnitGroupRandomUnit(gv_convoy, c_unitCountAlive));
        if (((RandomInt(0, 1) == 1) || (DistanceBetweenPoints(UnitGroupCenterOfGroup(gv_ghostSquad), UnitGetPosition(UnitGroupClosestToPoint(gv_convoy, UnitGroupCenterOfGroup(gv_ghostSquad)))) >= 19.0))) {
            lv_offset = PointWithOffsetPolar(lv_offset, RandomFixed(6.0, 12.0), (AngleBetweenPoints(lv_offset, UnitGetPosition(lv_firstunit)) + 90.0));
        }
        else {
            lv_offset = PointWithOffsetPolar(lv_offset, RandomFixed(6.0, 12.0), (AngleBetweenPoints(lv_offset, UnitGetPosition(lv_firstunit)) - 90.0));
        }
        UnitGroupIssueOrder(gv_ghostSquad, OrderTargetingPoint(AbilityCommand("attack", 0), lv_offset), c_orderQueueReplace);
    }

    lv_offset = PointWithOffsetPolar(UnitGetPosition(lv_firstunit), 2.0, AngleBetweenPoints(gv_convoyroutes[gv_convoyset][gv_convoynext], UnitGetPosition(lv_firstunit)));
    auto23F2BCD7_ae = UnitGroupCount(gv_patrol, c_unitCountAll);
    auto23F2BCD7_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto23F2BCD7_ai >= 0 && lv_loopint <= auto23F2BCD7_ae) || (auto23F2BCD7_ai <= 0 && lv_loopint >= auto23F2BCD7_ae) ) ; lv_loopint += auto23F2BCD7_ai ) {
        lv_tempunit = UnitGroupUnit(gv_patrol, lv_loopint);
        lv_offset = PointWithOffsetPolar(UnitGetPosition(lv_firstunit), ((IntToFixed(lv_loopint) - 1.0) * 3.2), AngleBetweenPoints(gv_convoyroutes[gv_convoyset][gv_convoynext], UnitGetPosition(lv_firstunit)));
        if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), lv_offset) >= 8.0)) {
            UnitIssueOrder(lv_tempunit, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), lv_offset), c_orderQueueReplace);
        }
        else {
            if ((gf_Parity(lv_loopint) == false)) {
                lv_offset = PointWithOffsetPolar(lv_offset, 3.0, (AngleBetweenPoints(lv_offset, UnitGetPosition(lv_firstunit)) + 90.0));
            }
            else {
                lv_offset = PointWithOffsetPolar(lv_offset, 3.0, (AngleBetweenPoints(lv_offset, UnitGetPosition(lv_firstunit)) - 90.0));
            }
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_offset), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyLoop_Init () {
    gt_PGhostConvoyLoop = TriggerCreate("gt_PGhostConvoyLoop_Func");
    TriggerEnable(gt_PGhostConvoyLoop, false);
    TriggerAddEventTimePeriodic(gt_PGhostConvoyLoop, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy Leave
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyLeave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_convoy, EventUnit()) == true) || (UnitGroupHasUnit(gv_patrol, EventUnit()) == true) || (UnitGroupHasUnit(gv_ghostSquad, EventUnit()) == true)))) {
            return false;
        }

        if (!((gv_convoyfinal == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_convoy, EventUnit()) == true)) {
        TriggerEnable(gt_PGhostConvoyDies, false);
        UnitRemove(EventUnit());
        gf_SucceedMission(17, StringExternal("Param/Value/54613663"), 0);
        gv_infestationLevel = (gv_infestationLevel - 4);
        gv_convoyvehiclessafe = (gv_convoyvehiclessafe + 1);
        if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
            TriggerExecute(gt_PGhostConvoyEnd, true, false);
        }

        TriggerEnable(gt_PGhostConvoyDies, true);
    }
    else {
        UnitRemove(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyLeave_Init () {
    gt_PGhostConvoyLeave = TriggerCreate("gt_PGhostConvoyLeave_Func");
    TriggerEnable(gt_PGhostConvoyLeave, false);
    TriggerAddEventUnitRegion(gt_PGhostConvoyLeave, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_PGhostConvoyLeave, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_PGhostConvoyLeave, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_PGhostConvoyLeave, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy Contact
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyContact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_fragging;
    text[6] lv_shadowcontactreport;

    // Variable Initialization
    lv_fragging = true;

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_patrol, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitTarget()) == 15))) {
            return false;
        }

        if (!(((UnitGroupHasUnit(gv_convoy, EventUnit()) == true) || (UnitGroupHasUnit(gv_patrol, EventUnit()) == true) || (UnitGroupHasUnit(gv_ghostSquad, EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_shadowcontactreport[1] = StringExternal("Param/Value/36A33191");
    lv_shadowcontactreport[2] = StringExternal("Param/Value/E92EC83E");
    lv_shadowcontactreport[3] = StringExternal("Param/Value/25075569");
    lv_shadowcontactreport[4] = StringExternal("Param/Value/6055D966");
    lv_shadowcontactreport[5] = StringExternal("Param/Value/98C32C45");
    UnitGroupIssueOrder(gv_ghostSquad, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_ghostSquad, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 13, RegionCircle(UnitGetPosition(EventUnit()), 14.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        if ((RandomInt(0, 3) == 1) && (lv_fragging == false)) {
            lv_fragging = true;
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("FragGrenadeMini", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnitTarget())), c_orderQueueReplace);
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupHasUnit(gv_patrol, EventUnit()) == true)) {
        gf_TextChat(EventUnit(), lv_shadowcontactreport[RandomInt(1, 5)]);
    }
    else {
        gf_TextChat(UnitGroupClosestToPoint(gv_patrol, UnitGetPosition(EventUnit())), lv_shadowcontactreport[RandomInt(1, 5)]);
    }
    Wait(12.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyContact_Init () {
    gt_PGhostConvoyContact = TriggerCreate("gt_PGhostConvoyContact_Func");
    TriggerEnable(gt_PGhostConvoyContact, false);
    TriggerAddEventUnitAttacked(gt_PGhostConvoyContact, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy Dies
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_convoy, EventUnit());
    gf_FailMission(7, StringExternal("Param/Value/19F7AA3C"), 0);
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_PGhostConvoyEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyDies_Init () {
    gt_PGhostConvoyDies = TriggerCreate("gt_PGhostConvoyDies_Func");
    TriggerEnable(gt_PGhostConvoyDies, false);
    TriggerAddEventUnitDied(gt_PGhostConvoyDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Ghost Convoy End
//--------------------------------------------------------------------------------------------------
bool gt_PGhostConvoyEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_PGhostConvoyLoop, false);
    TriggerEnable(gt_PGhostConvoyDies, false);
    TriggerEnable(gt_PGhostConvoyLeave, false);
    TriggerEnable(gt_PGhostConvoyContact, false);
    UnitGroupLoopBegin(gv_patrol);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_ghostSquad);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_SkipifOver();
    PingDestroy(gv_missionping);
    if ((gv_convoyvehiclessafe >= 2)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_MissionText(StringExternal("Param/Value/0544675B"));
        SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_infestationLevel = (gv_infestationLevel - 4);
    }
    else {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_MissionText(StringExternal("Param/Value/654FE286"));
        SoundPlay(SoundLink("TValerian02AMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    Wait(7.0, c_timeGame);
    TriggerExecute(gt_PCombatWalker, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PGhostConvoyEnd_Init () {
    gt_PGhostConvoyEnd = TriggerCreate("gt_PGhostConvoyEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Combat Walker
//--------------------------------------------------------------------------------------------------
bool gt_PCombatWalker_Func (bool testConds, bool runActions) {
    int init_i;

    int auto28943E59_ae;
    int auto28943E59_ai;
    int autoE68B5304_ae;
    int autoE68B5304_ai;

    // Variable Declarations
    region[4] lv_motorpool;
    int lv_int;
    unitgroup lv_combatengineers;
    int[4] lv_pings;
    region[4] lv_highlandguards;

    // Variable Initialization
    lv_int = 1;
    lv_combatengineers = UnitGroupEmpty();
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_pings[init_i] = c_invalidPingId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_motorpool[1] = RegionFromId(122);
    lv_motorpool[2] = RegionFromId(123);
    lv_motorpool[3] = RegionFromId(125);
    lv_highlandguards[1] = RegionFromId(143);
    lv_highlandguards[2] = RegionFromId(144);
    lv_highlandguards[3] = RegionFromId(146);
    gf_SetNewLighting("UA3Dawn", 600.0);
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/4323C52C"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/1F0B21EB"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/D73A467E"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/D3B94753"));
    gf_LandPhantom(PointFromId(2503));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/3BE00C43"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 12.0, 270.0);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitCreate(1, gf_randomminitype(), c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    }
    PlayerGroupLoopEnd();
    UnitCreate(1, "MRL", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    UnitCreate(1, "MRL", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    UnitCreate(1, "FlareGun", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    UnitCreate(1, "FlareGun", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(PointFromId(2503), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    UnitCreate(3, "CombatEngineerMini", c_unitCreateIgnorePlacement, 13, PointFromId(2503), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(lv_combatengineers, UnitLastCreatedGroup());
    UnitGroupLoopBegin(lv_combatengineers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_undeadTargetGroup, UnitGroupLoopCurrent());
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 0.0, 270.0);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A98185FA"));
        lv_pings[lv_int] = PingLastCreated();
        gf_MoveToGuardPos(UnitGroupLoopCurrent(), lv_motorpool[lv_int]);
        lv_int = (lv_int + 1);
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    gf_TakeoffPhantom(gv_lastlandedphantom);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/EA454EB7"));
    gf_SpawnUndead(3, "Spitter", 1);
    gf_SpawnUndead(2, "Spitter", 1);
    gf_SpawnUndead(2, "Spitter", 1);
    gf_SpawnUndead(2, "Morbus", 1);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(14, 0);
    gf_SpawnPMCSquad(15, 0);
    auto28943E59_ae = 300;
    auto28943E59_ai = 1;
    lv_int = 1;
    for ( ; ( (auto28943E59_ai >= 0 && lv_int <= auto28943E59_ae) || (auto28943E59_ai <= 0 && lv_int >= auto28943E59_ae) ) ; lv_int += auto28943E59_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(lv_combatengineers) == true)) {
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            gf_FailMission(15, StringExternal("Param/Value/5D1F52CA"), 0);
            TriggerExecute(gt_PTametheBeast, true, false);
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    autoE68B5304_ae = 3;
    autoE68B5304_ai = 1;
    lv_int = 1;
    for ( ; ( (autoE68B5304_ai >= 0 && lv_int <= autoE68B5304_ae) || (autoE68B5304_ai <= 0 && lv_int >= autoE68B5304_ae) ) ; lv_int += autoE68B5304_ai ) {
        PingDestroy(lv_pings[lv_int]);
    }
    lv_int = 1;
    UnitGroupLoopBegin(lv_combatengineers);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_SucceedMission(17, StringExternal("Param/Value/9522F429"), 0);
        UnitSetOwner(gv_sentryguns[lv_int], 13, false);
        UnitBehaviorRemove(gv_sentryguns[lv_int], "Unpowered", 1);
        UnitGroupAdd(gv_undeadTargetGroup, gv_sentryguns[lv_int]);
        SoundPlayOnUnit(SoundLink("Raynor_PenetratorRoundChargeUp", -1), PlayerGroupAll(), gv_sentryguns[lv_int], 1.0, 100.0, 0.0);
        gf_MoveToGuardPos(gv_sentryguns[lv_int], lv_highlandguards[lv_int]);
        UnitRemove(UnitGroupLoopCurrent());
        lv_int = (lv_int + 1);
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/CB5B176F"));
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_PTametheBeast, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCombatWalker_Init () {
    gt_PCombatWalker = TriggerCreate("gt_PCombatWalker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Tame the Beast
//--------------------------------------------------------------------------------------------------
bool gt_PTametheBeast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/047EB190"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/ECC05050"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/03E368D3"));
    Wait(60.0, c_timeGame);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(11, 0);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(10, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(15, 1);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(10, 0);
    gf_SpawnPMCSquad(6, 0);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(15, 1);
    TriggerEnable(gt_PMCPeriodicSpawn, false);
    while (!((UnitGroupCount(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(75, StringExternal("Param/Value/67B33A12"), 0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(9.0, c_timeGame);
    TriggerEnable(gt_PMCPeriodicSpawn, true);
    TriggerExecute(gt_PChapter3nihilmoderabile, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTametheBeast_Init () {
    gt_PTametheBeast = TriggerCreate("gt_PTametheBeast_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Chapter 3 - nihil moderabile
//--------------------------------------------------------------------------------------------------
bool gt_PChapter3nihilmoderabile_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    gv_pauseSpawning = true;
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/D320C10E"));
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/9FC3B634"));
    Wait(4.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gv_pauseSpawning = false;
    UnitPauseAll(false);
    TriggerExecute(gt_PBioSamples, true, false);
    gf_SetNewLighting("UA3Day", 600.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PChapter3nihilmoderabile_Init () {
    gt_PChapter3nihilmoderabile = TriggerCreate("gt_PChapter3nihilmoderabile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Bio Samples
//--------------------------------------------------------------------------------------------------
bool gt_PBioSamples_Func (bool testConds, bool runActions) {
    int autoD416991C_ae;
    int autoD416991C_ai;
    int autoAD104558_ae;
    int autoAD104558_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_silos[1] = RegionFromId(32);
    gv_silos[2] = RegionFromId(33);
    gv_silos[3] = RegionFromId(34);
    gv_silos[4] = RegionFromId(35);
    gv_silos[5] = RegionFromId(36);
    gv_silos[6] = RegionFromId(37);
    gv_silos[7] = RegionFromId(38);
    gv_silos[8] = RegionFromId(39);
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2AD5E22F"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/06BA3140"));
    Wait(9.0, c_timeGame);
    autoD416991C_ae = 8;
    autoD416991C_ai = 1;
    lv_int = 1;
    for ( ; ( (autoD416991C_ai >= 0 && lv_int <= autoD416991C_ae) || (autoD416991C_ai <= 0 && lv_int >= autoD416991C_ae) ) ; lv_int += autoD416991C_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_silos[lv_int]), ColorWithAlpha(0.00, 66.67, 66.67, 0.00), 0.0, 270.0);
        gv_highlanderpings[lv_int] = PingLastCreated();
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/9C3EA9DA"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/ADCBF34D"));
    TriggerEnable(gt_PCollectSample, true);
    TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(4, "Gargoyle", 1);
    gf_SpawnUndead(4, "Gargoyle", 1);
    gf_SpawnUndead(4, "Gargoyle", 1);
    gf_SpawnUndead(4, "Gargoyle", 1);
    gf_SpawnUndead(8, "Shredder", 1);
    gf_SpawnUndead(8, "Shredder", 1);
    gf_SpawnUndead(4, "Shredder", 1);
    gf_SpawnUndead(6, "Shredder", 1);
    TriggerExecute(gt_UndeadSpawning1, true, false);
    TriggerExecute(gt_UndeadSpawning2, true, false);
    TriggerExecute(gt_UndeadSpawning1, true, false);
    TriggerExecute(gt_UndeadSpawning2, true, false);
    Wait(300.0, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    gf_LandPhantom(RegionGetCenter(gv_medevacregion));
    Wait(12.0, c_timeGame);
    TriggerEnable(gt_PTurnInSample, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(0.00, 66.67, 66.67, 0.00), 30.0, 270.0);
    gf_MissionText(StringExternal("Param/Value/1DE4CDED"));
    TimerStart(gv_missiontimer, 120.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    UnitGroupLoopBegin(UnitGroupFilterRegion(gv_biosamples, gv_medevacregion, 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_PSampleHandover(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    while (!(((TimerGetRemaining(gv_missiontimer) == 0.0) || (gv_biosamplehanded == 8)))) {
        Wait(1.0, c_timeGame);
    }
    if ((TimerGetElapsed(gv_missiontimer) <= 30.0)) {
        gf_SucceedMission(10, StringExternal("Param/Value/DB3DFDF1"), 0);
    }

    UnitGroupLoopBegin(gv_biosamples);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    autoAD104558_ae = 8;
    autoAD104558_ai = 1;
    lv_int = 1;
    for ( ; ( (autoAD104558_ai >= 0 && lv_int <= autoAD104558_ae) || (autoAD104558_ai <= 0 && lv_int >= autoAD104558_ae) ) ; lv_int += autoAD104558_ai ) {
        PingDestroy(gv_highlanderpings[lv_int]);
    }
    gf_TakeoffPhantom(gv_lastlandedphantom);
    TriggerEnable(gt_PCollectSample, false);
    TriggerEnable(gt_PTurnInSample, false);
    TriggerEnable(gt_PBioSamples, false);
    Wait(7.0, c_timeGame);
    if ((gv_biosamplehanded == 8)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(24, StringExternal("Param/Value/BF124A65"), 0);
    }
    else if ((gv_biosamplehanded >= 5)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_MissionText(StringExternal("Param/Value/4E856855"));
    }
    else if (true) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_MissionText(StringExternal("Param/Value/461A912F"));
        Wait(5.0, c_timeGame);
        gf_FailMissionNew(StringExternal("Param/Value/67C7767C"), StringExternal("Param/Value/35659996"));
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
    }
    TriggerExecute(gt_PAspectus, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PBioSamples_Init () {
    gt_PBioSamples = TriggerCreate("gt_PBioSamples_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Turn In Sample
//--------------------------------------------------------------------------------------------------
bool gt_PTurnInSample_Func (bool testConds, bool runActions) {
    unitgroup autoF5314413_g;
    int autoF5314413_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }

        if (!((gf_CountItemType("BioSample", EventUnit()) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF5314413_g = UnitInventoryGroup(EventUnit());
    autoF5314413_u = 1;
    for ( ; autoF5314413_u <= UnitGroupCount(autoF5314413_g, c_unitCountAll) ; autoF5314413_u += BoolToInt(lv_unit == UnitGroupUnit(autoF5314413_g, autoF5314413_u)) ) {
        lv_unit = UnitGroupUnit(autoF5314413_g, autoF5314413_u);
        if ((UnitGetType(lv_unit) == "BioSample")) {
            gf_PSampleHandover(lv_unit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTurnInSample_Init () {
    gt_PTurnInSample = TriggerCreate("gt_PTurnInSample_Func");
    TriggerEnable(gt_PTurnInSample, false);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_PTurnInSample, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Collect Sample
//--------------------------------------------------------------------------------------------------
bool gt_PCollectSample_Func (bool testConds, bool runActions) {
    int auto759E2DD0_ae;
    int auto759E2DD0_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, c_playerAny, EventUnitRegion(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto759E2DD0_ae = 8;
    auto759E2DD0_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto759E2DD0_ai >= 0 && lv_loopint <= auto759E2DD0_ae) || (auto759E2DD0_ai <= 0 && lv_loopint >= auto759E2DD0_ae) ) ; lv_loopint += auto759E2DD0_ai ) {
        if ((EventUnitRegion() == gv_silos[lv_loopint])) {
            lv_silo = lv_loopint;
        }

    }
    if ((gv_silodisabled[lv_silo] == false)) {
    }
    else {
        return true;
    }
    gf_MissionText(StringExternal("Param/Value/F648695F"));
    UnitBehaviorAdd(EventUnit(), "CollectingSample", EventUnit(), 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(gv_silos[lv_silo]), Color(0.00, 100.00, 0.00), 10.0, 270.0);
    while (true) {
        if ((TriggerIsEnabled(gt_PCollectSample) == true) && (libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true)) {
        }
        else {
            gf_MissionText(StringExternal("Param/Value/F1F8F186"));
            UnitBehaviorRemove(EventUnit(), "CollectingSample", 1);
            lv_leftregion = true;
            break;
        }
        if ((UnitHasBehavior(EventUnit(), "CollectingSample") == false)) {
            break;
        }

        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BioSample", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), 2.0, UnitGetFacing(EventUnit())));
        UnitGroupAdd(gv_biosamples, UnitLastCreated());
        gv_silodisabled[lv_silo] = true;
        gf_MissionText(StringExternal("Param/Value/ED356FD5"));
        PingDestroy(gv_highlanderpings[lv_silo]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PCollectSample_Init () {
    gt_PCollectSample = TriggerCreate("gt_PCollectSample_Func");
    TriggerEnable(gt_PCollectSample, false);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(33), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(35), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(37), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(38), true);
    TriggerAddEventUnitRegion(gt_PCollectSample, null, RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Aspectus
//--------------------------------------------------------------------------------------------------
bool gt_PAspectus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boss;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Aspectus", 0, 15, RegionRandomPoint(gv_spawnRegion));
    lv_boss = UnitLastCreated();
    gf_RegisterUnitEntersLeavesRegion(gt_UmbraAspectusLoop, lv_boss, RegionEntireMap(), true);
    SoundPlay(SoundLink("TTosh03BMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9F784A4D"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/C48C0194"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/7AB7C00D"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E9188086"));
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(8, 0);
    while (!((UnitIsAlive(lv_boss) == false) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_MissionText(StringExternal("Param/Value/03C8C4FD"));
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(45, StringExternal("Param/Value/D2104637"), 0);
    Wait(9.0, c_timeGame);
    TriggerExecute(gt_PAntiAir, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PAspectus_Init () {
    gt_PAspectus = TriggerCreate("gt_PAspectus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Anti Air
//--------------------------------------------------------------------------------------------------
bool gt_PAntiAir_Func (bool testConds, bool runActions) {
    int auto7E927884_n;
    int auto7E927884_i;
    int auto8A55ABC6_n;
    int auto8A55ABC6_i;
    int auto2C8532F9_n;
    int auto2C8532F9_i;
    int autoE08EE51F_n;
    int autoE08EE51F_i;
    int auto026602A8_n;
    int auto026602A8_i;
    int autoA21023BC_n;
    int autoA21023BC_i;

    // Variable Declarations
    region[12] lv_guardpositions;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_guardpositions[1] = RegionFromId(84);
    lv_guardpositions[2] = RegionFromId(85);
    lv_guardpositions[3] = RegionFromId(137);
    lv_guardpositions[4] = RegionFromId(138);
    lv_guardpositions[5] = RegionFromId(12);
    lv_guardpositions[6] = RegionFromId(135);
    lv_guardpositions[7] = RegionFromId(136);
    lv_guardpositions[8] = RegionFromId(133);
    lv_guardpositions[9] = RegionFromId(15);
    lv_guardpositions[10] = RegionFromId(148);
    lv_guardpositions[11] = RegionFromId(26);
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2A785DE4"));
    Wait(9.0, c_timeGame);
    gf_SpawnItemLoc("SAMSitePacked", 1, RegionGetCenter(RegionFromId(43)));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(43)), ColorWithAlpha(50.20, 50.20, 100.00, 0.00), 30.0, 270.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/A236DD9F"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/34CF2C31"));
    Wait(60.0, c_timeGame);
    gf_SpawnPMCSquad(7, 0);
    gf_SpawnPMCSquad(7, 0);
    Wait(60.0, c_timeGame);
    gf_SpawnPMCSquad(7, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    Wait(9.0, c_timeGame);
    gf_SpawnPMCSquad(7, 0);
    Wait(60.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5EF1FDA7"));
    auto7E927884_n = 15;
    for (auto7E927884_i = 1; auto7E927884_i <= auto7E927884_n; auto7E927884_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(4)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(1, 2)]), 3.0));
    }
    auto8A55ABC6_n = 2;
    for (auto8A55ABC6_i = 1; auto8A55ABC6_i <= auto8A55ABC6_n; auto8A55ABC6_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M2BradleyIFV", 0, 13, RegionGetCenter(RegionFromId(4)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(1, 2)]), 3.0));
    }
    auto2C8532F9_n = 16;
    for (auto2C8532F9_i = 1; auto2C8532F9_i <= auto2C8532F9_n; auto2C8532F9_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(139)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(3, 8)]), 3.0));
    }
    autoE08EE51F_n = 2;
    for (autoE08EE51F_i = 1; autoE08EE51F_i <= autoE08EE51F_n; autoE08EE51F_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M1Abrams", 0, 13, RegionGetCenter(RegionFromId(139)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(3, 8)]), 3.0));
    }
    auto026602A8_n = 15;
    for (auto026602A8_i = 1; auto026602A8_i <= auto026602A8_n; auto026602A8_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_randomminitype(), 0, 13, RegionGetCenter(RegionFromId(79)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(9, 11)]), 3.0));
    }
    autoA21023BC_n = 2;
    for (autoA21023BC_i = 1; autoA21023BC_i <= autoA21023BC_n; autoA21023BC_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CombatWalker", 0, 13, RegionGetCenter(RegionFromId(79)));
        gf_MoveToGuardPos(UnitLastCreated(), RegionCircle(RegionRandomPoint(lv_guardpositions[RandomInt(9, 11)]), 3.0));
    }
    UnitGroupLoopBegin(UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_undeadTargetGroup, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(40.0, c_timeGame);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(11, 0);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(3, 0);
    while (!((libNtve_gf_UnitGroupIsDead(UnitGroup("AH25Hunter", 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(50, StringExternal("Param/Value/BFB05AB3"), 0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(9.0, c_timeGame);
    TriggerExecute(gt_PTimeStops, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PAntiAir_Init () {
    gt_PAntiAir = TriggerCreate("gt_PAntiAir_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Time Stops
//--------------------------------------------------------------------------------------------------
bool gt_PTimeStops_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lz;

    // Variable Initialization
    lv_lz = RandomInt(1, 5);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/76354AAF"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/DAF34414"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/905ACFD2"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/84ED7318"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/C460988E"));
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(5, 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Umbra", 0, 15, RegionRandomPoint(gv_spawnRegion));
    Wait(9.0, c_timeGame);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(12, 0);
    Wait(30.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SatchelCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_lZs[lv_lz]));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_lZs[lv_lz]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 20.0, 270.0);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIAlertPoint("Trigger", PlayerGroupLoopCurrent(), StringExternal("Param/Value/DB030052"), "Assets\\Textures\\btn-command-terran-buildstructure.dds", RegionGetCenter(gv_lZs[lv_lz]));
    }
    PlayerGroupLoopEnd();
    TriggerEnable(gt_PTSPlaceSatchel, true);
    TimerStart(gv_missiontimer, 240.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(120.0, c_timeGame);
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnPMCSquad(10, 0);
    Wait(30.0, c_timeGame);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(13, 0);
    Wait(60.0, c_timeGame);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(5, 0);
    Wait(30.0, c_timeGame);
    if ((TriggerIsEnabled(gt_PTSPlaceSatchel) == true)) {
        TriggerEnable(gt_PTSPlaceSatchel, false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        gf_FailMission(5, StringExternal("Param/Value/C648BBA8"), 0);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_PTSTimeStops, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTimeStops_Init () {
    gt_PTimeStops = TriggerCreate("gt_PTimeStops_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Place Satchel
//--------------------------------------------------------------------------------------------------
bool gt_PTSPlaceSatchel_Func (bool testConds, bool runActions) {
    int auto2038A276_ae;
    int auto2038A276_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SatchelCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), RegionFromId(151)) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_silos[1] = RegionFromId(95);
        gv_silos[2] = RegionFromId(96);
        gv_silos[3] = RegionFromId(97);
        gv_silos[4] = RegionFromId(98);
        gv_silos[5] = RegionFromId(99);
        gv_silos[6] = RegionFromId(100);
        UnitRemove(EventUnitInventoryItem());
        gf_MissionText(StringExternal("Param/Value/76B4661D"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(151)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 30.0, 270.0);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        Wait(30.0, c_timeGame);
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(6, 0);
        gf_SpawnPMCSquad(2, 0);
        gf_SpawnPMCSquad(2, 0);
        gf_SpawnPMCSquad(3, 0);
        gf_SpawnPMCSquad(11, 0);
        gf_SpawnPMCSquad(5, 0);
        PlayerCreateEffectPoint(15, "SatchelExplosionDamage", RegionGetCenter(RegionFromId(151)));
        UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/94ABFB5B"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/06EFD955"));
        TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
        UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2423), libNtve_gf_RandomAngle());
        UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2424), libNtve_gf_RandomAngle());
        UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2488), libNtve_gf_RandomAngle());
        auto2038A276_ae = 6;
        auto2038A276_ai = 1;
        lv_int = 1;
        for ( ; ( (auto2038A276_ai >= 0 && lv_int <= auto2038A276_ae) || (auto2038A276_ai <= 0 && lv_int >= auto2038A276_ae) ) ; lv_int += auto2038A276_ai ) {
            gv_silodisabled[lv_int] = false;
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_silos[lv_int]), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 0.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7E658E20"));
            gv_highlanderpings[lv_int] = PingLastCreated();
        }
        TriggerEnable(gt_PTSAbortCodes, true);
        Wait(300.0, c_timeGame);
        if ((TriggerIsEnabled(gt_PTSAbortCodes) == true)) {
            TriggerEnable(gt_PTSAbortCodes, false);
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            gf_FailMission(5, StringExternal("Param/Value/AE6BE73E"), 0);
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            Wait(2.0, c_timeGame);
            TriggerExecute(gt_PTSTimeStops, true, false);
        }

    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/D93B507C"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(151)), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 5.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/0E0D5766"));
        SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSPlaceSatchel_Init () {
    gt_PTSPlaceSatchel = TriggerCreate("gt_PTSPlaceSatchel_Func");
    TriggerEnable(gt_PTSPlaceSatchel, false);
    TriggerAddEventUnitInventoryChange(gt_PTSPlaceSatchel, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Abort Codes
//--------------------------------------------------------------------------------------------------
bool gt_PTSAbortCodes_Func (bool testConds, bool runActions) {
    int auto3716A38B_ae;
    int auto3716A38B_ai;
    int auto50103951_ae;
    int auto50103951_ai;
    int autoEFAED7E8_val;
    int autoB33C3757_ae;
    int autoB33C3757_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3716A38B_ae = 6;
    auto3716A38B_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto3716A38B_ai >= 0 && lv_loopint <= auto3716A38B_ae) || (auto3716A38B_ai <= 0 && lv_loopint >= auto3716A38B_ae) ) ; lv_loopint += auto3716A38B_ai ) {
        if ((EventUnitRegion() == gv_silos[lv_loopint])) {
            lv_silo = lv_loopint;
        }

    }
    if ((gv_silodisabled[lv_silo] == false)) {
    }
    else {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/95BB25EB"));
    auto50103951_ae = 10;
    auto50103951_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto50103951_ai >= 0 && lv_loopint <= auto50103951_ae) || (auto50103951_ai <= 0 && lv_loopint >= auto50103951_ae) ) ; lv_loopint += auto50103951_ai ) {
        autoEFAED7E8_val = lv_loopint;
        if (autoEFAED7E8_val == 2) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/40C4A8D3"));
        }
        else if (autoEFAED7E8_val == 5) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/18A1D1AA"));
        }
        else if (autoEFAED7E8_val == 6) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/DB995028"));
        }
        else if (autoEFAED7E8_val == 7) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/BCBD131A"));
        }
        else if (autoEFAED7E8_val == 8) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/CC6CD4D5"));
        }
        else if (autoEFAED7E8_val == 9) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/C8243D3B"));
        }
        else {
        }
        if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true) && (TriggerIsEnabled(TriggerGetCurrent()) == true)) {
        }
        else {
            SoundPlayOnUnit(SoundLink("TUIWarning", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/63C2CC96"));
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        gv_silodisabled[lv_silo] = true;
        SoundPlayOnUnit(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
        gf_MissionText(StringExternal("Param/Value/BE2F710A"));
        PingDestroy(gv_highlanderpings[lv_silo]);
        autoB33C3757_ae = 6;
        autoB33C3757_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoB33C3757_ai >= 0 && lv_loopint <= autoB33C3757_ae) || (autoB33C3757_ai <= 0 && lv_loopint >= autoB33C3757_ae) ) ; lv_loopint += autoB33C3757_ai ) {
            if ((gv_silodisabled[lv_loopint] == false)) {
                lv_leftregion = true;
            }

        }
        if ((lv_leftregion == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_SucceedMission(80, StringExternal("Param/Value/884BF6AE"), 0);
            TriggerExecute(gt_PTSTimeStops, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSAbortCodes_Init () {
    gt_PTSAbortCodes = TriggerCreate("gt_PTSAbortCodes_Func");
    TriggerEnable(gt_PTSAbortCodes, false);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(95), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(96), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(97), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(98), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(99), true);
    TriggerAddEventUnitRegion(gt_PTSAbortCodes, null, RegionFromId(100), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Time Stops
//--------------------------------------------------------------------------------------------------
bool gt_PTSTimeStops_Func (bool testConds, bool runActions) {
    int auto4F089359_ae;
    int auto4F089359_ai;
    int auto6A1BBABF_ae;
    int auto6A1BBABF_ai;

    // Variable Declarations
    int lv_int;
    bool lv_abortcodes;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    RegionSetCenter(RegionFromId(52), RegionRandomPoint(RegionFromId(62)));
    RegionSetCenter(RegionFromId(53), RegionRandomPoint(RegionFromId(63)));
    RegionSetCenter(RegionFromId(54), RegionRandomPoint(RegionFromId(62)));
    gv_silos[1] = RegionFromId(52);
    gv_silos[2] = RegionFromId(53);
    gv_silos[3] = RegionFromId(54);
    auto4F089359_ae = 3;
    auto4F089359_ai = 1;
    lv_int = 1;
    for ( ; ( (auto4F089359_ai >= 0 && lv_int <= auto4F089359_ae) || (auto4F089359_ai <= 0 && lv_int >= auto4F089359_ae) ) ; lv_int += auto4F089359_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TimeStop", c_unitCreateIgnorePlacement, 15, RegionGetCenter(gv_silos[lv_int]));
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        gv_infestedsilos[lv_int] = UnitLastCreated();
        gv_silodisabled[lv_int] = false;
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_silos[lv_int]), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C1EF65FA"));
        gv_highlanderpings[lv_int] = PingLastCreated();
    }
    if ((ObjectiveGetState(gv_mainObj) == c_objectiveStateFailed)) {
        gf_MissionText(StringExternal("Param/Value/3831CA33"));
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/FA9DA517"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/9DFBA144"));
    }
    else {
        lv_abortcodes = true;
        gf_MissionText(StringExternal("Param/Value/64EF781F"));
        Wait(5.0, c_timeGame);
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/AC60E7F3"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/25F36FDA"));
        Wait(5.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/D6D9948C"));
        TriggerEnable(gt_PTSTimeStopRevert, true);
    }
    gf_SpawnPMCSquad(8, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(3, 0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Aspectus", 0, 15, RegionRandomPoint(gv_spawnRegion));
    gf_SpawnPMCSquad(11, 0);
    TimerStart(gv_missiontimer, 280.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(260.0, c_timeGame);
    gf_SpawnPMCSquad(5, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(7, 0);
    gf_SpawnPMCSquad(13, 0);
    gf_SpawnPMCSquad(14, 0);
    Wait(20.0, c_timeGame);
    gf_SkipifOver();
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((TriggerIsEnabled(gt_PDestroytheRA) == true)) {
        if ((lv_abortcodes == false)) {
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        }
        else {
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        }
        TriggerExecute(gt_PDestroytheRA, true, false);
    }
    else {
        if ((UnitGroupCount(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
            return true;
        }

    }
    TriggerEnable(gt_PTSTimeStopRevert, false);
    gf_MissionText(StringExternal("Param/Value/8F5AE219"));
    gf_SetNewLighting("TimeStop", 3.0);
    SoundPlay(SoundLink("TValerian02BMusicEventBB", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("UI_ScoreScreenMissionTime", -1), PlayerGroupAll(), 100.0, 0.0);
    auto6A1BBABF_ae = 3;
    auto6A1BBABF_ai = 1;
    lv_int = 1;
    for ( ; ( (auto6A1BBABF_ai >= 0 && lv_int <= auto6A1BBABF_ae) || (auto6A1BBABF_ai <= 0 && lv_int >= auto6A1BBABF_ae) ) ; lv_int += auto6A1BBABF_ai ) {
        if ((gv_silodisabled[lv_int] == false)) {
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic), (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitGetOwner(UnitGroupLoopCurrent()) != 15) && (UnitGetOwner(UnitGroupLoopCurrent()) != 14) && (UnitGetOwner(UnitGroupLoopCurrent()) != 0)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "TimeStopped", UnitGroupLoopCurrent(), 1);
                }

            }
            UnitGroupLoopEnd();
        }
        else {
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "TimeStopped", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSTimeStops_Init () {
    gt_PTSTimeStops = TriggerCreate("gt_PTSTimeStops_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: P TS Time Stop Revert
//--------------------------------------------------------------------------------------------------
bool gt_PTSTimeStopRevert_Func (bool testConds, bool runActions) {
    int autoE167AC5D_ae;
    int autoE167AC5D_ai;
    int auto91E8B6F7_ae;
    int auto91E8B6F7_ai;
    int autoC824EE7E_ae;
    int autoC824EE7E_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE167AC5D_ae = 3;
    autoE167AC5D_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoE167AC5D_ai >= 0 && lv_loopint <= autoE167AC5D_ae) || (autoE167AC5D_ai <= 0 && lv_loopint >= autoE167AC5D_ae) ) ; lv_loopint += autoE167AC5D_ai ) {
        if ((EventUnitRegion() == gv_silos[lv_loopint])) {
            lv_silo = lv_loopint;
        }

    }
    if ((gv_silodisabled[lv_silo] == false)) {
    }
    else {
        return true;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B9303ED7"));
    auto91E8B6F7_ae = 10;
    auto91E8B6F7_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto91E8B6F7_ai >= 0 && lv_loopint <= auto91E8B6F7_ae) || (auto91E8B6F7_ai <= 0 && lv_loopint >= auto91E8B6F7_ae) ) ; lv_loopint += auto91E8B6F7_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true)) {
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/14EFDC87"));
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        gv_silodisabled[lv_silo] = true;
        SoundPlayOnUnit(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
        gf_MissionText(StringExternal("Param/Value/FFAA1EA4"));
        ActorSend(libNtve_gf_MainActorofUnit(gv_infestedsilos[lv_silo]), "SetTintColor 255,128,0 2.000000 OneShot t");
        PingDestroy(gv_highlanderpings[lv_silo]);
        autoC824EE7E_ae = 3;
        autoC824EE7E_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoC824EE7E_ai >= 0 && lv_loopint <= autoC824EE7E_ae) || (autoC824EE7E_ai <= 0 && lv_loopint >= autoC824EE7E_ae) ) ; lv_loopint += autoC824EE7E_ai ) {
            if ((gv_silodisabled[lv_loopint] == false)) {
                lv_leftregion = true;
            }

        }
        if ((lv_leftregion == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_SucceedMission(90, StringExternal("Param/Value/E2570AA1"), 0);
            TriggerExecute(gt_PDestroytheRA, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PTSTimeStopRevert_Init () {
    gt_PTSTimeStopRevert = TriggerCreate("gt_PTSTimeStopRevert_Func");
    TriggerEnable(gt_PTSTimeStopRevert, false);
    TriggerAddEventUnitRegion(gt_PTSTimeStopRevert, null, RegionFromId(52), true);
    TriggerAddEventUnitRegion(gt_PTSTimeStopRevert, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_PTSTimeStopRevert, null, RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: P Destroy the RA
//--------------------------------------------------------------------------------------------------
bool gt_PDestroytheRA_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkipifOver();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PTSTimeStopRevert, false);
    gf_SpawnPMCSquad(4, 0);
    gf_SpawnPMCSquad(9, 0);
    gf_SpawnPMCSquad(3, 0);
    gf_SpawnPMCSquad(2, 0);
    gf_SpawnPMCSquad(1, 0);
    gf_SpawnPMCSquad(15, 0);
    TriggerEnable(gt_PMCPeriodicSpawn, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/F0E0CACB"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/3773A70D"));
    while (!((UnitGroupCount(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_SkipifOver();
    gf_SucceedMission(100, StringExternal("Param/Value/51DE838A"), 0);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) != 15) && (UnitGetOwner(UnitGroupLoopCurrent()) != 14) && (UnitGetOwner(UnitGroupLoopCurrent()) != 0)) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "TimeStopped", 1);
        }

    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_GameEndCinematica, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PDestroytheRA_Init () {
    gt_PDestroytheRA = TriggerCreate("gt_PDestroytheRA_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Random Hero Init
//--------------------------------------------------------------------------------------------------
bool gt_RandomHeroInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_herotypes[1] = "Rifleman";
    gv_heroweights[1] = 3;
    gv_herotypes[2] = "CombatMedic";
    gv_heroweights[2] = 2;
    gv_herotypes[3] = "AutomaticRifleman";
    gv_heroweights[3] = 2;
    gv_herotypes[4] = "Flamethrower";
    gv_heroweights[4] = 2;
    gv_herotypes[5] = "CavalryScout";
    gv_heroweights[5] = 1;
    gv_herotypes[6] = "PlatoonLeader";
    gv_heroweights[6] = 1;
    gv_herotypes[7] = "SFAAT";
    gv_heroweights[7] = 1;
    gv_herotypes[8] = "SquadDesignatedMarksman";
    gv_heroweights[8] = 1;
    gv_herotypes[9] = "JavelinGunner2";
    gv_heroweights[9] = 1;
    gv_herotypes[10] = "CombatEngineer";
    gv_heroweights[10] = 1;
    gv_herotypes[11] = "FireSupportSpecialist";
    gv_heroweights[11] = 1;
    gv_herotypes[12] = "GhostHero";
    gv_heroweights[12] = 1;
    gv_herotypes[13] = "Cyborg";
    gv_heroweights[13] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomHeroInit_Init () {
    gt_RandomHeroInit = TriggerCreate("gt_RandomHeroInit_Func");
    TriggerAddEventGeneric(gt_RandomHeroInit, "Set Random Heroes");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill Hero
//--------------------------------------------------------------------------------------------------
bool gt_KillHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingplayer;
    int lv_killingplayer;
    unit lv_dyingunit;
    int lv_loopint;

    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_killingplayer = UnitGetOwner(libNtve_gf_KillingUnit());
    lv_dyingunit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnit(SoundLink("diebuzz", -1), PlayerGroupAll(), lv_dyingunit, 0.0, 100.0, 0.0);
    gv_playerDeaths[EventPlayer()] = (gv_playerDeaths[EventPlayer()] + 1);
    if ((lv_dyingplayer == libNtve_gf_KillingPlayer())) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/E7F1EB49")));
    }
    else {
        if ((PlayerGroupHasPlayer(gv_players, lv_killingplayer) == true)) {
            if ((libNtve_gf_PlayerIsEnemy(lv_killingplayer, lv_dyingplayer, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/95DECDFA") + TextWithColor(PlayerName(lv_killingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingplayer, false)))));
                gv_playerkickable[lv_killingplayer] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_killingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingplayer, false))) + StringExternal("Param/Value/CF714611") + IntToText(lv_killingplayer) + StringExternal("Param/Value/B3B89402")));
                UnitGroupAdd(gv_heroskilledbyplayer[lv_killingplayer], lv_dyingunit);
            }
            else {
                gf_AwardPlayerXP(8, StringExternal("Param/Value/6AB88147"), libNtve_gf_KillingPlayer());
                gv_cOMPPlayerKills[libNtve_gf_KillingPlayer()] = (gv_cOMPPlayerKills[libNtve_gf_KillingPlayer()] + 1);
                if ((gv_killingPoints == true)) {
                    gf_SetTeamScore(gv_playersTeam[libNtve_gf_KillingPlayer()], (gv_teamScores[gv_playersTeam[libNtve_gf_KillingPlayer()]] + 1));
                }

                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/5FBBAB59") + TextWithColor(PlayerName(lv_killingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingplayer, false)))));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/0EC73D8A")));
        }
    }
    Wait(2.0, c_timeGame);
    if ((gv_respawn == true)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/1C72ADEE") + StringExternal("Param/Value/C2E186E4") + FixedToText(gv_respawnTime, c_fixedPrecisionAny) + StringExternal("Param/Value/F21C6E9F")));
        Wait(gv_respawnTime, c_timeGame);
        if ((gv_gameOver == false)) {
            gf_SpawnPlayerHero(RegionRandomPoint(gv_teamspawnregions[gv_playersTeam[EventPlayer()]]), EventPlayer());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillHero_Init () {
    gt_KillHero = TriggerCreate("gt_KillHero_Func");
    TriggerEnable(gt_KillHero, false);
    TriggerAddEventUnitDied(gt_KillHero, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Heroes
//--------------------------------------------------------------------------------------------------
bool gt_PingHeroes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            PlayerGroupLoopBegin(gv_players);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                if ((libNtve_gf_PlayerIsEnemy(PlayerGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), Color(100.00, 0.00, 0.00), 2.0, 270.0);
                }
                else {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(UnitGroupLoopCurrent()), Color(50.20, 100.00, 0.00), 2.0, 270.0);
                }
            }
            PlayerGroupLoopEnd();
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PingHeroes_Init () {
    gt_PingHeroes = TriggerCreate("gt_PingHeroes_Func");
    TriggerEnable(gt_PingHeroes, false);
    TriggerAddEventTimePeriodic(gt_PingHeroes, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Competitive Mode
//--------------------------------------------------------------------------------------------------
bool gt_CompetitiveMode_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent("Set Random Heroes");
    UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    gv_teamColors[0] = 0;
    gv_teamColors[1] = 1;
    gv_teamColors[2] = 2;
    gv_teamColors[3] = 7;
    gv_teamColors[4] = 6;
    gv_cOMPRoundModes[1] = gt_COMPDeathmatch;
    gv_cOMPRoundModes[2] = gt_COMPBossBattle;
    gv_cOMPRoundModes[3] = gt_COMPSiloRush;
    gv_cOMPRoundModes[4] = gt_COMPInvasion;
    TriggerExecute(gt_COMPInitHudDialog, true, false);
    TriggerEnable(gt_Darkness, false);
    TriggerEnable(gt_AbdulsTruck, false);
    TriggerEnable(gt_MarchoftheDead, false);
    TriggerEnable(gt_InitialContact, false);
    TriggerEnable(gt_HeroDeath, false);
    TriggerEnable(gt_GameOver, false);
    TriggerEnable(gt_AutoselectHero, false);
    TriggerEnable(gt_SelectHeroSelector, false);
    TriggerEnable(gt_KillHero, true);
    TriggerEnable(gt_ItemSpawn2, true);
    TriggerEnable(gt_ItemSpawnCompetitive, true);
    TriggerExecute(gt_ItemSpawn1, true, false);
    TriggerExecute(gt_ItemSpawn1, true, false);
    TriggerExecute(gt_ItemSpawn2, true, false);
    TriggerExecute(gt_ItemSpawn2, true, false);
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/AAC64EEC"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/CAE5EC5B"), StringExternal("Param/Value/602F72EC"), c_objectiveStateHidden, true);
    gv_mainObj = ObjectiveLastCreated();
    TriggerExecute(gt_NextRound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CompetitiveMode_Init () {
    gt_CompetitiveMode = TriggerCreate("gt_CompetitiveMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Next Round
//--------------------------------------------------------------------------------------------------
bool gt_NextRound_Func (bool testConds, bool runActions) {
    int auto5410490F_ae;
    int auto5410490F_ai;

    // Variable Declarations
    int lv_loopint;
    text lv_scoreboard;
    int lv_scoredialog;

    // Variable Initialization
    lv_scoredialog = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_rounds = (gv_rounds + 1);
    gv_killingPoints = false;
    auto5410490F_ae = 12;
    auto5410490F_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto5410490F_ai >= 0 && lv_loopint <= auto5410490F_ae) || (auto5410490F_ai <= 0 && lv_loopint >= auto5410490F_ae) ) ; lv_loopint += auto5410490F_ai ) {
        gv_teamScores[lv_loopint] = 0;
    }
    TriggerEnable(gt_PingHeroes, false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if (((gv_rounds == 5) || (PlayerGroupCount(gv_players) <= 3))) {
        UnitPauseAll(true);
        gv_gameOver = true;
        gv_victory = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/9B760019"));
        DialogCreate(1200, 800, c_anchorCenter, 0, 0, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        lv_scoredialog = DialogLastCreated();
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_scoreboard = (lv_scoreboard + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))));
            lv_scoreboard = (lv_scoreboard + StringExternal("Param/Value/BAC460CF"));
            lv_scoreboard = (lv_scoreboard + IntToText(gv_playerRoundWins[PlayerGroupLoopCurrent()]));
            lv_scoreboard = (lv_scoreboard + StringExternal("Param/Value/6410F4D3"));
            lv_scoreboard = (lv_scoreboard + IntToText(gv_cOMPPlayerKills[PlayerGroupLoopCurrent()]));
            lv_scoreboard = (lv_scoreboard + StringExternal("Param/Value/08D1B176"));
            lv_scoreboard = (lv_scoreboard + IntToText(gv_playerDeaths[PlayerGroupLoopCurrent()]));
            lv_scoreboard = (lv_scoreboard + StringExternal("Param/Value/27693EC0"));
            if ((gv_playerRoundWins[PlayerGroupLoopCurrent()] == 4) && (gv_playercamounlocked[3][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/34144A3E"));
                gv_playercamounlocked[3][PlayerGroupLoopCurrent()] = true;
            }

            if ((gv_playerRoundWins[PlayerGroupLoopCurrent()] == 4) && (gv_medalsunlocked[7][PlayerGroupLoopCurrent()] == false)) {
                gv_medalsunlocked[7][PlayerGroupLoopCurrent()] = true;
                gf_AwardPlayerXP(325, StringExternal("Param/Value/E4787318"), PlayerGroupLoopCurrent());
            }

            PlayerGroupLoopBegin(gv_players);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gv_gamesWon[gv_gamemode][PlayerGroupLoopCurrent()] = (gv_gamesWon[gv_gamemode][PlayerGroupLoopCurrent()] + gv_playerRoundWins[PlayerGroupLoopCurrent()]);
            }
            PlayerGroupLoopEnd();
        }
        PlayerGroupLoopEnd();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 800, c_anchorLeft, 0, 0, lv_scoreboard, Color(100,100,100), true, 2.0);
        SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
        if ((gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()] >= gv_playerStartingXP[PlayerGroupLoopCurrent()])) {
            gf_SavePlayerProgress(PlayerGroupLoopCurrent());
        }
        else {
            gf_VisorTextDialog(StringExternal("Param/Value/7F310616"), PlayerGroupLoopCurrent());
        }
        Wait(2.0, c_timeGame);
        SoundStop(SoundLastPlayed(), true);
        Wait(13.0, c_timeGame);
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
    }
    else {
        if ((gv_rounds > 1)) {
            DialogCreate(1200, 800, c_anchorCenter, 0, 0, true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
            lv_scoredialog = DialogLastCreated();
            PlayerGroupLoopBegin(gv_players);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                lv_scoreboard = (lv_scoreboard + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))));
                lv_scoreboard = (lv_scoreboard + StringExternal("Param/Value/44C39B00"));
                lv_scoreboard = (lv_scoreboard + IntToText(gv_playerRoundWins[PlayerGroupLoopCurrent()]));
                lv_scoreboard = (lv_scoreboard + StringExternal("Param/Value/183EBBBC"));
                lv_scoreboard = (lv_scoreboard + IntToText(gv_cOMPPlayerKills[PlayerGroupLoopCurrent()]));
                lv_scoreboard = (lv_scoreboard + StringExternal("Param/Value/9FA459F3"));
                lv_scoreboard = (lv_scoreboard + IntToText(gv_playerDeaths[PlayerGroupLoopCurrent()]));
                lv_scoreboard = (lv_scoreboard + StringExternal("Param/Value/73507120"));
            }
            PlayerGroupLoopEnd();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 800, c_anchorLeft, 0, 0, lv_scoreboard, Color(100,100,100), true, 2.0);
            SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(2.0, c_timeGame);
            SoundStop(SoundLastPlayed(), true);
        }

        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/658E018E"));
        gv_pauseSpawning = true;
        Wait(5.0, c_timeGame);
        DialogDestroy(lv_scoredialog);
        UnitGroupLoopBegin(gv_heroesGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitPauseAll(false);
        gv_pauseSpawning = false;
        TriggerExecute(gv_cOMPRoundModes[RandomInt(1, 4)], true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NextRound_Init () {
    gt_NextRound = TriggerCreate("gt_NextRound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Deathmatch
//--------------------------------------------------------------------------------------------------
bool gt_COMPDeathmatch_Func (bool testConds, bool runActions) {
    int auto83F4C436_ae;
    int auto83F4C436_ai;
    int autoF2389764_ae;
    int autoF2389764_ai;
    int auto66148F09_ae;
    int auto66148F09_ai;
    int autoA280E301_ae;
    int autoA280E301_ai;
    int autoA3A8F398_ae;
    int autoA3A8F398_ai;
    int auto4FC2AFAC_ae;
    int auto4FC2AFAC_ai;

    // Variable Declarations
    int lv_arena;
    int lv_loopint;
    text lv_roundmodetext;
    bool lv_fFA;
    int lv_highestscore;
    int lv_teamsalive;
    bool lv_teamalive;

    // Variable Initialization
    lv_arena = RandomInt(1, 4);

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SetArena(lv_arena);
    gv_killingPoints = true;
    if ((RandomInt(0, 3) == 1)) {
        gv_respawn = false;
    }
    else {
        gv_respawn = true;
        gv_respawnTime = 15.0;
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    if ((RandomInt(0, 2) == 1)) {
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/01F5436B"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/5A7E579D"));
        lv_fFA = false;
        lv_roundmodetext = StringExternal("Param/Value/47F514DF");
        if ((gv_respawn == true)) {
            lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/D3F95F74"));
            lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/35C56624"));
        }
        else {
            lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/50A4EF69"));
        }
        if ((lv_arena == 1)) {
            gf_SetTeams(RandomInt(2, 4));
        }

    }
    else {
        TriggerEnable(gt_PingHeroes, true);
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/25E84047"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/5EEF4C04"));
        lv_fFA = true;
        lv_roundmodetext = StringExternal("Param/Value/532173EF");
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gv_teamspawnregions[PlayerGroupLoopCurrent()] = RegionEmpty();
            RegionAddRegion(gv_teamspawnregions[PlayerGroupLoopCurrent()], RegionPlayableMap());
            RegionAddCircle(gv_teamspawnregions[PlayerGroupLoopCurrent()], false, RegionGetCenter(gv_teamspawnregions[PlayerGroupLoopCurrent()]), ((libNtve_gf_WidthOfRegion(gv_teamspawnregions[PlayerGroupLoopCurrent()]) / 2.0) - 30.0));
        }
        PlayerGroupLoopEnd();
        if ((gv_respawn == true)) {
            TimerStart(gv_missiontimer, RandomFixed(300.0, 530.0), false, c_timeGame);
            lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/2B15A24E"));
            lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/7F7969A3"));
        }
        else {
            TimerStart(gv_missiontimer, RandomFixed(300.0, 360.0), false, c_timeGame);
            lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/9D15D5D1"));
        }
        gf_SetTeams(1);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, lv_roundmodetext);
    Wait(2.0, c_timeGame);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_SpawnPlayerHero(RegionRandomPoint(gv_teamspawnregions[gv_playersTeam[PlayerGroupLoopCurrent()]]), PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    if ((lv_fFA == false)) {
        while (true) {
            lv_roundmodetext = StringExternal("Param/Value/6E9AE2F3");
            auto66148F09_ae = gv_teamCount;
            auto66148F09_ai = 1;
            lv_loopint = 1;
            for ( ; ( (auto66148F09_ai >= 0 && lv_loopint <= auto66148F09_ae) || (auto66148F09_ai <= 0 && lv_loopint >= auto66148F09_ae) ) ; lv_loopint += auto66148F09_ai ) {
                lv_roundmodetext = (lv_roundmodetext + (TextWithColor((StringExternal("Param/Value/E3E59C2C") + IntToText(lv_loopint)), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_loopint])) + StringExternal("Param/Value/077195B0") + IntToText(gv_teamScores[lv_loopint])));
            }
            ObjectiveSetDescription(gv_mainObj, lv_roundmodetext);
            if ((TimerGetRemaining(gv_missiontimer) <= 0.5)) {
                break;
            }

            autoA280E301_ae = gv_teamCount;
            autoA280E301_ai = 1;
            lv_loopint = 1;
            for ( ; ( (autoA280E301_ai >= 0 && lv_loopint <= autoA280E301_ae) || (autoA280E301_ai <= 0 && lv_loopint >= autoA280E301_ae) ) ; lv_loopint += autoA280E301_ai ) {
                lv_teamalive = false;
                PlayerGroupLoopBegin(gv_teams[lv_loopint]);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == true) && (lv_teamalive == false)) {
                        lv_teamalive = true;
                        lv_teamsalive = (lv_teamsalive + 1);
                    }

                }
                PlayerGroupLoopEnd();
            }
            if ((lv_teamsalive <= 1) && (gv_respawn == false)) {
                break;
            }

            Wait(1.0, c_timeGame);
        }
        UnitPauseAll(true);
        gv_pauseSpawning = true;
        autoA3A8F398_ae = gv_teamCount;
        autoA3A8F398_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoA3A8F398_ai >= 0 && lv_loopint <= autoA3A8F398_ae) || (autoA3A8F398_ai <= 0 && lv_loopint >= autoA3A8F398_ae) ) ; lv_loopint += autoA3A8F398_ai ) {
            if ((gv_teamScores[lv_loopint] > lv_highestscore)) {
                lv_highestscore = gv_teamScores[lv_loopint];
            }

        }
        auto4FC2AFAC_ae = gv_teamCount;
        auto4FC2AFAC_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto4FC2AFAC_ai >= 0 && lv_loopint <= auto4FC2AFAC_ae) || (auto4FC2AFAC_ai <= 0 && lv_loopint >= auto4FC2AFAC_ae) ) ; lv_loopint += auto4FC2AFAC_ai ) {
            if ((gv_teamScores[lv_loopint] == lv_highestscore)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/3AF1655B") + IntToText(lv_loopint)) + StringExternal("Param/Value/FB9FF47B")));
                PlayerGroupLoopBegin(gv_teams[lv_loopint]);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_AwardPlayerXP(85, StringExternal("Param/Value/57CAB132"), PlayerGroupLoopCurrent());
                    gv_playerRoundWins[PlayerGroupLoopCurrent()] = (gv_playerRoundWins[PlayerGroupLoopCurrent()] + 1);
                }
                PlayerGroupLoopEnd();
            }
            else {
                PlayerGroupLoopBegin(gv_teams[lv_loopint]);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    gf_AwardPlayerXP(65, StringExternal("Param/Value/1AC4A120"), PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
            }
        }
    }
    else {
        if ((gv_respawn == true)) {
            while (true) {
                lv_roundmodetext = StringExternal("Param/Value/B7B2E02B");
                PlayerGroupLoopBegin(gv_players);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    lv_roundmodetext = (lv_roundmodetext + (TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))) + StringExternal("Param/Value/13F1BF73") + IntToText(gv_teamScores[PlayerGroupLoopCurrent()])));
                    lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/F53749CD"));
                }
                PlayerGroupLoopEnd();
                ObjectiveSetDescription(gv_mainObj, lv_roundmodetext);
                if ((TimerGetRemaining(gv_missiontimer) <= 0.5)) {
                    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
                    auto83F4C436_ae = 12;
                    auto83F4C436_ai = 1;
                    lv_loopint = 1;
                    for ( ; ( (auto83F4C436_ai >= 0 && lv_loopint <= auto83F4C436_ae) || (auto83F4C436_ai <= 0 && lv_loopint >= auto83F4C436_ae) ) ; lv_loopint += auto83F4C436_ai ) {
                        if ((gv_teamScores[lv_loopint] > lv_highestscore)) {
                            lv_highestscore = gv_teamScores[lv_loopint];
                        }

                    }
                    autoF2389764_ae = 12;
                    autoF2389764_ai = 1;
                    lv_loopint = 1;
                    for ( ; ( (autoF2389764_ai >= 0 && lv_loopint <= autoF2389764_ae) || (autoF2389764_ai <= 0 && lv_loopint >= autoF2389764_ae) ) ; lv_loopint += autoF2389764_ai ) {
                        if ((gv_teamScores[lv_loopint] == lv_highestscore)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(lv_loopint), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_loopint, false))) + StringExternal("Param/Value/8E4B45A2")));
                            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
                            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                                gf_AwardPlayerXP(85, StringExternal("Param/Value/6683C21E"), PlayerGroupLoopCurrent());
                                gv_playerRoundWins[PlayerGroupLoopCurrent()] = (gv_playerRoundWins[PlayerGroupLoopCurrent()] + 1);
                            }
                            PlayerGroupLoopEnd();
                        }
                        else {
                            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
                            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                                gf_AwardPlayerXP(65, StringExternal("Param/Value/53113EC1"), PlayerGroupLoopCurrent());
                            }
                            PlayerGroupLoopEnd();
                        }
                    }
                    break;
                }

                Wait(1.0, c_timeGame);
            }
        }
        else {
            while (true) {
                lv_roundmodetext = StringExternal("Param/Value/327BE524");
                UnitGroupLoopBegin(gv_heroesGroup);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                        lv_roundmodetext = (lv_roundmodetext + (TextWithColor(PlayerName(UnitGetOwner(UnitGroupLoopCurrent())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(UnitGroupLoopCurrent()), false))) + StringExternal("Param/Value/953D8822")));
                    }

                }
                UnitGroupLoopEnd();
                ObjectiveSetDescription(gv_mainObj, lv_roundmodetext);
                if ((UnitGroupCount(gv_heroesGroup, c_unitCountAlive) == 1)) {
                    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
                    UnitGroupLoopBegin(gv_heroesGroup);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(UnitGetOwner(UnitGroupLoopCurrent())) + StringExternal("Param/Value/3A31F507")));
                            gf_AwardPlayerXP(85, StringExternal("Param/Value/31318612"), UnitGetOwner(UnitGroupLoopCurrent()));
                            gv_playerRoundWins[UnitGetOwner(UnitGroupLoopCurrent())] = (gv_playerRoundWins[UnitGetOwner(UnitGroupLoopCurrent())] + 1);
                        }
                        else {
                            gf_AwardPlayerXP(65, StringExternal("Param/Value/907C39FA"), UnitGetOwner(UnitGroupLoopCurrent()));
                        }
                    }
                    UnitGroupLoopEnd();
                    break;
                }

                if ((UnitGroupCount(gv_heroesGroup, c_unitCountAlive) == 0)) {
                    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/6FA1C7F6"));
                    UnitGroupLoopBegin(gv_heroesGroup);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        gf_AwardPlayerXP(65, StringExternal("Param/Value/542FFFA7"), UnitGetOwner(UnitGroupLoopCurrent()));
                    }
                    UnitGroupLoopEnd();
                    break;
                }

                if ((TimerGetRemaining(gv_missiontimer) <= 0.5)) {
                    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/D562F3B9"));
                    UnitGroupLoopBegin(gv_heroesGroup);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                            gf_AwardPlayerXP(85, StringExternal("Param/Value/CA464DFD"), UnitGetOwner(UnitGroupLoopCurrent()));
                        }
                        else {
                            gf_AwardPlayerXP(65, StringExternal("Param/Value/95BD6FAA"), UnitGetOwner(UnitGroupLoopCurrent()));
                        }
                    }
                    UnitGroupLoopEnd();
                    break;
                }

                Wait(1.0, c_timeGame);
            }
        }
    }
    TriggerExecute(gt_NextRound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPDeathmatch_Init () {
    gt_COMPDeathmatch = TriggerCreate("gt_COMPDeathmatch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Boss Battle
//--------------------------------------------------------------------------------------------------
bool gt_COMPBossBattle_Func (bool testConds, bool runActions) {
    int auto29A1D0F7_ae;
    int auto29A1D0F7_ai;
    int auto94F4C641_ae;
    int auto94F4C641_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_highestscore;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1070F2C8"));
    gf_SetArena(RandomInt(1, 4));
    gf_SetTeams(RandomInt(2, 4));
    gv_respawn = true;
    gv_respawnTime = 30.0;
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/22F0ABF8"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/1B82305C"));
    TriggerEnable(gt_COMPClass1Death, true);
    TriggerEnable(gt_BBPingClass1s, true);
    TimerStart(gv_missiontimer, RandomFixed(440.0, 600.0), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_SpawnPlayerHero(RegionRandomPoint(gv_teamspawnregions[gv_playersTeam[PlayerGroupLoopCurrent()]]), PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(30.0, c_timeGame);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(30.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(90.0, c_timeGame);
    gf_SpawnUndead(1, "Immussilus", 1);
    Wait(90.0, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    Wait(30.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(90.0, c_timeGame);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(30.0, c_timeGame);
    while (!((TimerGetRemaining(gv_missiontimer) <= 0.5))) {
        Wait(1.0, c_timeGame);
    }
    UnitPauseAll(true);
    auto29A1D0F7_ae = gv_teamCount;
    auto29A1D0F7_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto29A1D0F7_ai >= 0 && lv_loopint <= auto29A1D0F7_ae) || (auto29A1D0F7_ai <= 0 && lv_loopint >= auto29A1D0F7_ae) ) ; lv_loopint += auto29A1D0F7_ai ) {
        if ((gv_teamScores[lv_loopint] > lv_highestscore)) {
            lv_highestscore = gv_teamScores[lv_loopint];
        }

    }
    if ((lv_highestscore == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/7C55A07E"));
    }

    auto94F4C641_ae = gv_teamCount;
    auto94F4C641_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto94F4C641_ai >= 0 && lv_loopint <= auto94F4C641_ae) || (auto94F4C641_ai <= 0 && lv_loopint >= auto94F4C641_ae) ) ; lv_loopint += auto94F4C641_ai ) {
        if ((gv_teamScores[lv_loopint] == lv_highestscore) && (lv_highestscore != 0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/655782FF") + IntToText(lv_loopint)) + StringExternal("Param/Value/F9A62D40")));
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_AwardPlayerXP(85, StringExternal("Param/Value/35B0390A"), PlayerGroupLoopCurrent());
                gv_playerRoundWins[PlayerGroupLoopCurrent()] = (gv_playerRoundWins[PlayerGroupLoopCurrent()] + 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_AwardPlayerXP(65, StringExternal("Param/Value/B11D25FE"), PlayerGroupLoopCurrent());
            }
            PlayerGroupLoopEnd();
        }
    }
    TriggerEnable(gt_COMPClass1Death, false);
    TriggerEnable(gt_BBPingClass1s, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_NextRound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPBossBattle_Init () {
    gt_COMPBossBattle = TriggerCreate("gt_COMPBossBattle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Class 1 Death
//--------------------------------------------------------------------------------------------------
bool gt_COMPClass1Death_Func (bool testConds, bool runActions) {
    int autoC702F524_ae;
    int autoC702F524_ai;

    // Variable Declarations
    int lv_loopint;
    text lv_roundmodetext;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/6A8847A1") + IntToText(gv_playersTeam[libNtve_gf_KillingPlayer()]) + StringExternal("Param/Value/C60D69E5")));
    gf_SetTeamScore(gv_playersTeam[libNtve_gf_KillingPlayer()], (gv_teamScores[gv_playersTeam[libNtve_gf_KillingPlayer()]] + 1));
    lv_roundmodetext = StringExternal("Param/Value/30C8B161");
    autoC702F524_ae = gv_teamCount;
    autoC702F524_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoC702F524_ai >= 0 && lv_loopint <= autoC702F524_ae) || (autoC702F524_ai <= 0 && lv_loopint >= autoC702F524_ae) ) ; lv_loopint += autoC702F524_ai ) {
        lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/6DCED7D1"));
        lv_roundmodetext = (lv_roundmodetext + (TextWithColor((StringExternal("Param/Value/F9A93325") + IntToText(lv_loopint)), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_loopint])) + StringExternal("Param/Value/3D8A7680") + IntToText(gv_teamScores[lv_loopint])));
    }
    PlayerGroupLoopBegin(gv_teams[gv_playersTeam[libNtve_gf_KillingPlayer()]]);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_AwardPlayerXP(6, StringExternal("Param/Value/7051E2BE"), PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    ObjectiveSetDescription(gv_mainObj, lv_roundmodetext);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPClass1Death_Init () {
    gt_COMPClass1Death = TriggerCreate("gt_COMPClass1Death_Func");
    TriggerEnable(gt_COMPClass1Death, false);
    TriggerAddEventUnitDied(gt_COMPClass1Death, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BB Ping Class 1s
//--------------------------------------------------------------------------------------------------
bool gt_BBPingClass1s_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 14, RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
        PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BBPingClass1s_Init () {
    gt_BBPingClass1s = TriggerCreate("gt_BBPingClass1s_Func");
    TriggerEnable(gt_BBPingClass1s, false);
    TriggerAddEventTimePeriodic(gt_BBPingClass1s, 8.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Silo Rush
//--------------------------------------------------------------------------------------------------
bool gt_COMPSiloRush_Func (bool testConds, bool runActions) {
    int auto7BEBEB03_ae;
    int auto7BEBEB03_ai;
    int auto94294737_ae;
    int auto94294737_ai;
    int autoAECC3175_ae;
    int autoAECC3175_ai;
    int autoA95CBBC6_ae;
    int autoA95CBBC6_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_highestscore;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A443E8ED"));
    gf_SetArena(RandomInt(1, 4));
    gf_SetTeams(RandomInt(2, 4));
    gv_respawn = true;
    gv_respawnTime = 15.0;
    gv_sRSiloRegions[1] = RegionFromId(52);
    gv_sRSiloRegions[2] = RegionFromId(53);
    gv_sRSiloRegions[3] = RegionFromId(54);
    gv_sRSiloRegions[4] = RegionFromId(102);
    TriggerEnable(gt_COMPSRPingSilos, true);
    TriggerEnable(gt_COMPSRCaptureSilo, true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/FD976B68"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/B01B78DE"));
    TimerStart(gv_missiontimer, RandomFixed(440.0, 600.0), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    auto7BEBEB03_ae = 4;
    auto7BEBEB03_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto7BEBEB03_ai >= 0 && lv_loopint <= auto7BEBEB03_ae) || (auto7BEBEB03_ai <= 0 && lv_loopint >= auto7BEBEB03_ae) ) ; lv_loopint += auto7BEBEB03_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSilo", 0, 0, RegionGetCenter(gv_sRSiloRegions[lv_loopint]));
        gv_sRSilos[lv_loopint] = UnitLastCreated();
    }
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_SpawnPlayerHero(RegionRandomPoint(gv_teamspawnregions[gv_playersTeam[PlayerGroupLoopCurrent()]]), PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    while (!((TimerGetRemaining(gv_missiontimer) <= 0.5))) {
        Wait(1.0, c_timeGame);
    }
    UnitPauseAll(true);
    auto94294737_ae = gv_teamCount;
    auto94294737_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto94294737_ai >= 0 && lv_loopint <= auto94294737_ae) || (auto94294737_ai <= 0 && lv_loopint >= auto94294737_ae) ) ; lv_loopint += auto94294737_ai ) {
        if ((gv_teamScores[lv_loopint] > lv_highestscore)) {
            lv_highestscore = gv_teamScores[lv_loopint];
        }

    }
    if ((lv_highestscore == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F133FCC9"));
    }

    autoAECC3175_ae = gv_teamCount;
    autoAECC3175_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoAECC3175_ai >= 0 && lv_loopint <= autoAECC3175_ae) || (autoAECC3175_ai <= 0 && lv_loopint >= autoAECC3175_ae) ) ; lv_loopint += autoAECC3175_ai ) {
        if ((gv_teamScores[lv_loopint] == lv_highestscore) && (lv_highestscore != 0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/410C9E23") + IntToText(lv_loopint)) + StringExternal("Param/Value/E92AFB0F")));
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_AwardPlayerXP(85, StringExternal("Param/Value/2E6ECA87"), PlayerGroupLoopCurrent());
                gv_playerRoundWins[PlayerGroupLoopCurrent()] = (gv_playerRoundWins[PlayerGroupLoopCurrent()] + 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_AwardPlayerXP(65, StringExternal("Param/Value/7120392C"), PlayerGroupLoopCurrent());
            }
            PlayerGroupLoopEnd();
        }
    }
    TriggerEnable(gt_COMPSRPingSilos, false);
    TriggerEnable(gt_COMPSRCaptureSilo, false);
    autoA95CBBC6_ae = 4;
    autoA95CBBC6_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoA95CBBC6_ai >= 0 && lv_loopint <= autoA95CBBC6_ae) || (autoA95CBBC6_ai <= 0 && lv_loopint >= autoA95CBBC6_ae) ) ; lv_loopint += autoA95CBBC6_ai ) {
        UnitRemove(gv_sRSilos[lv_loopint]);
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_NextRound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPSiloRush_Init () {
    gt_COMPSiloRush = TriggerCreate("gt_COMPSiloRush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP SR Ping Silos
//--------------------------------------------------------------------------------------------------
bool gt_COMPSRPingSilos_Func (bool testConds, bool runActions) {
    int autoF2296A97_ae;
    int autoF2296A97_ai;
    int auto25FC359D_ae;
    int auto25FC359D_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_teamowner;
    text lv_roundmodetext;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF2296A97_ae = 4;
    autoF2296A97_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoF2296A97_ai >= 0 && lv_loopint <= autoF2296A97_ae) || (autoF2296A97_ai <= 0 && lv_loopint >= autoF2296A97_ae) ) ; lv_loopint += autoF2296A97_ai ) {
        if ((UnitGetCustomValue(gv_sRSilos[lv_loopint], 0) != 0.0)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingnumeral[FixedToInt(UnitGetCustomValue(gv_sRSilos[lv_loopint], 0))], UnitGetPosition(gv_sRSilos[lv_loopint]), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[FixedToInt(UnitGetCustomValue(gv_sRSilos[lv_loopint], 0))]), 3.0, 270.0);
            PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/E8A87EB6") + TextWithColor((StringExternal("Param/Value/945EECCB") + FixedToText(UnitGetCustomValue(gv_sRSilos[lv_loopint], 0), c_fixedPrecisionAny)), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[FixedToInt(UnitGetCustomValue(gv_sRSilos[lv_loopint], 0))]))));
            lv_teamowner = FixedToInt(UnitGetCustomValue(gv_sRSilos[lv_loopint], 0));
            gf_SetTeamScore(lv_teamowner, (gv_teamScores[lv_teamowner] + 1));
        }
        else {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_sRSilos[lv_loopint]), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[FixedToInt(UnitGetCustomValue(gv_sRSilos[lv_loopint], 0))]), 3.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/41905C40"));
        }
    }
    lv_roundmodetext = StringExternal("Param/Value/2D830EE6");
    auto25FC359D_ae = gv_teamCount;
    auto25FC359D_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto25FC359D_ai >= 0 && lv_loopint <= auto25FC359D_ae) || (auto25FC359D_ai <= 0 && lv_loopint >= auto25FC359D_ae) ) ; lv_loopint += auto25FC359D_ai ) {
        lv_roundmodetext = (lv_roundmodetext + (TextWithColor((StringExternal("Param/Value/DADADCFC") + IntToText(lv_loopint)), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_loopint])) + StringExternal("Param/Value/D4B37190") + IntToText(gv_teamScores[lv_loopint])));
        lv_roundmodetext = (lv_roundmodetext + StringExternal("Param/Value/6CDBEF97"));
    }
    ObjectiveSetDescription(gv_mainObj, lv_roundmodetext);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPSRPingSilos_Init () {
    gt_COMPSRPingSilos = TriggerCreate("gt_COMPSRPingSilos_Func");
    TriggerEnable(gt_COMPSRPingSilos, false);
    TriggerAddEventTimePeriodic(gt_COMPSRPingSilos, 8.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP SR Capture Silo
//--------------------------------------------------------------------------------------------------
bool gt_COMPSRCaptureSilo_Func (bool testConds, bool runActions) {
    int auto5A374A48_ae;
    int auto5A374A48_ai;
    int auto5EA6ADB3_ae;
    int auto5EA6ADB3_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;
    int lv_teamint;

    // Variable Initialization
    lv_teamint = gv_playersTeam[UnitGetOwner(EventUnit())];

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, c_playerAny, EventUnitRegion(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5A374A48_ae = 4;
    auto5A374A48_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto5A374A48_ai >= 0 && lv_loopint <= auto5A374A48_ae) || (auto5A374A48_ai <= 0 && lv_loopint >= auto5A374A48_ae) ) ; lv_loopint += auto5A374A48_ai ) {
        if ((EventUnitRegion() == gv_sRSiloRegions[lv_loopint])) {
            lv_silo = lv_loopint;
        }

    }
    if ((UnitGetCustomValue(gv_sRSilos[lv_silo], 0) == IntToFixed(lv_teamint))) {
        return true;
    }

    UIDisplayMessage(gv_teams[lv_teamint], c_messageAreaSubtitle, StringExternal("Param/Value/9A6B36AA"));
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_sRSilos[lv_silo]), Color(0.00, 100.00, 0.00), 8.0, 270.0);
    auto5EA6ADB3_ae = 8;
    auto5EA6ADB3_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto5EA6ADB3_ai >= 0 && lv_loopint <= auto5EA6ADB3_ae) || (auto5EA6ADB3_ai <= 0 && lv_loopint >= auto5EA6ADB3_ae) ) ; lv_loopint += auto5EA6ADB3_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true)) {
        }
        else {
            UIDisplayMessage(gv_teams[lv_teamint], c_messageAreaSubtitle, StringExternal("Param/Value/48BA8BBC"));
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        UnitSetCustomValue(gv_sRSilos[lv_silo], 0, IntToFixed(lv_teamint));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_sRSilos[lv_silo]), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_teamint]), 5.0, 270.0);
        UIDisplayMessage(gv_teams[lv_teamint], c_messageAreaSubtitle, StringExternal("Param/Value/5AF77DBD"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((StringExternal("Param/Value/F63EA427") + IntToText(lv_teamint)), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_teamint])) + StringExternal("Param/Value/1D74F995")));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPSRCaptureSilo_Init () {
    gt_COMPSRCaptureSilo = TriggerCreate("gt_COMPSRCaptureSilo_Func");
    TriggerEnable(gt_COMPSRCaptureSilo, false);
    TriggerAddEventUnitRegion(gt_COMPSRCaptureSilo, null, RegionFromId(52), true);
    TriggerAddEventUnitRegion(gt_COMPSRCaptureSilo, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_COMPSRCaptureSilo, null, RegionFromId(54), true);
    TriggerAddEventUnitRegion(gt_COMPSRCaptureSilo, null, RegionFromId(102), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Invasion
//--------------------------------------------------------------------------------------------------
bool gt_COMPInvasion_Func (bool testConds, bool runActions) {
    int autoA3BDA6C5_ae;
    int autoA3BDA6C5_ai;
    int autoBC7B6713_ae;
    int autoBC7B6713_ai;
    int auto97370A6B_ae;
    int auto97370A6B_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_highestscore;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/78C8FE4D"));
    gf_SetArena(RandomInt(1, 4));
    gf_SetTeams(RandomInt(2, 3));
    gv_respawn = false;
    TriggerEnable(gt_COMPInvasionPlayerDies, true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/563DF7CA"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/AFE12367"));
    TimerStart(gv_missiontimer, RandomFixed(500.0, 600.0), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_Enemy);
        gf_SpawnPlayerHero(RegionRandomPoint(gv_teamspawnregions[gv_playersTeam[PlayerGroupLoopCurrent()]]), PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    gf_SetTeamScore(0, 2);
    autoA3BDA6C5_ae = gv_teamCount;
    autoA3BDA6C5_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoA3BDA6C5_ai >= 0 && lv_loopint <= autoA3BDA6C5_ae) || (autoA3BDA6C5_ai <= 0 && lv_loopint >= autoA3BDA6C5_ae) ) ; lv_loopint += autoA3BDA6C5_ai ) {
        gf_SetTeamScore(lv_loopint, 0);
    }
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == true)) {
            gf_SetTeamScore(gv_playersTeam[PlayerGroupLoopCurrent()], (gv_teamScores[gv_playersTeam[PlayerGroupLoopCurrent()]] + 1));
        }

    }
    PlayerGroupLoopEnd();
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(5, "InfantryRifleman", 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(1, "Vesania", 1);
    while (!(((TimerGetElapsed(gv_missiontimer) >= 120.0) || (gv_teamScores[0] <= 1)))) {
        Wait(1.0, c_timeGame);
    }
    gf_SpawnPMC(1, "M2BradleyIFV", 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(1, "Ignis", 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    gf_SpawnPMC(1, gf_randomminitype(), 1);
    gf_SpawnPMC(1, gf_randomminitype(), 1);
    while (!(((TimerGetElapsed(gv_missiontimer) >= 240.0) || (gv_teamScores[0] <= 1)))) {
        Wait(1.0, c_timeGame);
    }
    gf_SpawnPMC(1, "Vesania", 1);
    gf_SpawnPMC(1, "Umbra", 1);
    gf_SpawnPMC(5, "InfantryRifleman", 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    while (!(((TimerGetElapsed(gv_missiontimer) >= 360.0) || (gv_teamScores[0] <= 1)))) {
        Wait(1.0, c_timeGame);
    }
    gf_SpawnPMC(1, "M2BradleyIFV", 1);
    gf_SpawnPMC(1, "Vesania", 1);
    gf_SpawnPMC(1, "Vesania", 1);
    gf_SpawnPMC(5, "InfantryRifleman", 1);
    gf_SpawnPMC(1, "Ignis", 1);
    gf_SpawnPMC(5, "InfantryRifleman", 1);
    gf_SpawnPMC(2, gf_randomminitype(), 1);
    while (!(((TimerGetRemaining(gv_missiontimer) <= 0.5) || (gv_teamScores[0] <= 1)))) {
        Wait(1.0, c_timeGame);
    }
    UnitPauseAll(true);
    if ((PlayerGroupCount(gv_players) == 1)) {
        TriggerEnable(gt_COMPInvasionPlayerDies, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_NextRound, true, false);
        return true;
    }

    autoBC7B6713_ae = gv_teamCount;
    autoBC7B6713_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoBC7B6713_ai >= 0 && lv_loopint <= autoBC7B6713_ae) || (autoBC7B6713_ai <= 0 && lv_loopint >= autoBC7B6713_ae) ) ; lv_loopint += autoBC7B6713_ai ) {
        if ((gv_teamScores[lv_loopint] > lv_highestscore)) {
            lv_highestscore = gv_teamScores[lv_loopint];
        }

    }
    if ((lv_highestscore == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/31FE9A2F"));
    }

    auto97370A6B_ae = gv_teamCount;
    auto97370A6B_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto97370A6B_ai >= 0 && lv_loopint <= auto97370A6B_ae) || (auto97370A6B_ai <= 0 && lv_loopint >= auto97370A6B_ae) ) ; lv_loopint += auto97370A6B_ai ) {
        if ((gv_teamScores[lv_loopint] == lv_highestscore) && (lv_highestscore != 0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/A4E57CD7") + IntToText(lv_loopint)) + StringExternal("Param/Value/2896CAAB")));
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_AwardPlayerXP(85, StringExternal("Param/Value/0D57F8D5"), PlayerGroupLoopCurrent());
                gv_playerRoundWins[PlayerGroupLoopCurrent()] = (gv_playerRoundWins[PlayerGroupLoopCurrent()] + 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_AwardPlayerXP(65, StringExternal("Param/Value/A5D7E753"), PlayerGroupLoopCurrent());
            }
            PlayerGroupLoopEnd();
        }
    }
    TriggerEnable(gt_COMPInvasionPlayerDies, false);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_NextRound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPInvasion_Init () {
    gt_COMPInvasion = TriggerCreate("gt_COMPInvasion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Invasion Player Dies
//--------------------------------------------------------------------------------------------------
bool gt_COMPInvasionPlayerDies_Func (bool testConds, bool runActions) {
    int auto071A5E2F_ae;
    int auto071A5E2F_ai;
    int auto20B64E84_ae;
    int auto20B64E84_ai;
    int autoDD49D90F_ae;
    int autoDD49D90F_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_player;
    bool lv_alldead;
    text lv_roundmodetext;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_alldead = true;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_teams[gv_playersTeam[lv_player]]);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == true)) {
            lv_alldead = false;
        }

    }
    PlayerGroupLoopEnd();
    if ((lv_alldead == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((StringExternal("Param/Value/FE55FAA9") + IntToText(gv_playersTeam[lv_player])), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[gv_playersTeam[lv_player]])) + StringExternal("Param/Value/1FEE9149")));
    }

    auto071A5E2F_ae = gv_teamCount;
    auto071A5E2F_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto071A5E2F_ai >= 0 && lv_loopint <= auto071A5E2F_ae) || (auto071A5E2F_ai <= 0 && lv_loopint >= auto071A5E2F_ae) ) ; lv_loopint += auto071A5E2F_ai ) {
        gf_SetTeamScore(lv_loopint, 0);
    }
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == true)) {
            gf_SetTeamScore(gv_playersTeam[PlayerGroupLoopCurrent()], (gv_teamScores[gv_playersTeam[PlayerGroupLoopCurrent()]] + 1));
        }

    }
    PlayerGroupLoopEnd();
    gf_SetTeamScore(0, 0);
    auto20B64E84_ae = gv_teamCount;
    auto20B64E84_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto20B64E84_ai >= 0 && lv_loopint <= auto20B64E84_ae) || (auto20B64E84_ai <= 0 && lv_loopint >= auto20B64E84_ae) ) ; lv_loopint += auto20B64E84_ai ) {
        if ((gv_teamScores[lv_loopint] > 0)) {
            gf_SetTeamScore(0, (gv_teamScores[0] + 1));
        }

    }
    lv_roundmodetext = StringExternal("Param/Value/592533CB");
    autoDD49D90F_ae = gv_teamCount;
    autoDD49D90F_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoDD49D90F_ai >= 0 && lv_loopint <= autoDD49D90F_ae) || (autoDD49D90F_ai <= 0 && lv_loopint >= autoDD49D90F_ae) ) ; lv_loopint += autoDD49D90F_ai ) {
        lv_roundmodetext = (lv_roundmodetext + (TextWithColor((StringExternal("Param/Value/D9F7ADF6") + IntToText(lv_loopint)), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_loopint])) + StringExternal("Param/Value/80E85908") + IntToText(gv_teamScores[lv_loopint])));
    }
    ObjectiveSetDescription(gv_mainObj, lv_roundmodetext);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPInvasionPlayerDies_Init () {
    gt_COMPInvasionPlayerDies = TriggerCreate("gt_COMPInvasionPlayerDies_Func");
    TriggerEnable(gt_COMPInvasionPlayerDies, false);
    TriggerAddEventUnitDied(gt_COMPInvasionPlayerDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Convoy
//--------------------------------------------------------------------------------------------------
bool gt_COMPConvoy_Func (bool testConds, bool runActions) {
    int autoFDF612EB_ae;
    int autoFDF612EB_ai;
    int auto5E14FD06_ae;
    int auto5E14FD06_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_highestscore;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/668FD9EA"));
    gf_SetArena(RandomInt(1, 4));
    gf_SetTeams(2);
    gv_respawn = false;
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/74D68F4C"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/59A559ED"));
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_Enemy);
        gf_SpawnPlayerHero(RegionRandomPoint(gv_teamspawnregions[gv_playersTeam[PlayerGroupLoopCurrent()]]), PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_teams[1]);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_teams[2]);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_Enemy);
    }
    PlayerGroupLoopEnd();
    while (!(((TimerGetRemaining(gv_missiontimer) <= 0.5) || (gv_teamScores[0] <= 1)))) {
        Wait(1.0, c_timeGame);
    }
    UnitPauseAll(true);
    if ((PlayerGroupCount(gv_players) == 1)) {
        TriggerEnable(gt_COMPInvasionPlayerDies, false);
        Wait(2.0, c_timeGame);
        TriggerExecute(gt_NextRound, true, false);
        return true;
    }

    autoFDF612EB_ae = gv_teamCount;
    autoFDF612EB_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoFDF612EB_ai >= 0 && lv_loopint <= autoFDF612EB_ae) || (autoFDF612EB_ai <= 0 && lv_loopint >= autoFDF612EB_ae) ) ; lv_loopint += autoFDF612EB_ai ) {
        if ((gv_teamScores[lv_loopint] > lv_highestscore)) {
            lv_highestscore = gv_teamScores[lv_loopint];
        }

    }
    if ((lv_highestscore == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/D455FB8D"));
    }

    auto5E14FD06_ae = gv_teamCount;
    auto5E14FD06_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto5E14FD06_ai >= 0 && lv_loopint <= auto5E14FD06_ae) || (auto5E14FD06_ai <= 0 && lv_loopint >= auto5E14FD06_ae) ) ; lv_loopint += auto5E14FD06_ai ) {
        if ((gv_teamScores[lv_loopint] == lv_highestscore) && (lv_highestscore != 0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/2EB38D5F") + IntToText(lv_loopint)) + StringExternal("Param/Value/DDCB2342")));
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_AwardPlayerXP(85, StringExternal("Param/Value/EF6F549A"), PlayerGroupLoopCurrent());
                gv_playerRoundWins[PlayerGroupLoopCurrent()] = (gv_playerRoundWins[PlayerGroupLoopCurrent()] + 1);
            }
            PlayerGroupLoopEnd();
        }
        else {
            PlayerGroupLoopBegin(gv_teams[lv_loopint]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                gf_AwardPlayerXP(65, StringExternal("Param/Value/0CF128C9"), PlayerGroupLoopCurrent());
            }
            PlayerGroupLoopEnd();
        }
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_NextRound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPConvoy_Init () {
    gt_COMPConvoy = TriggerCreate("gt_COMPConvoy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalMode_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_Enemy);
    }
    PlayerGroupLoopEnd();
    ObjectiveCreate(StringExternal("Param/Value/65100448"), StringExternal("Param/Value/03B74353"), c_objectiveStateHidden, false);
    gv_optionalObj = ObjectiveLastCreated();
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/29EC89A4"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    if ((gv_mod_outbreak == false)) {
        TriggerEnable(gt_UndeadSpawning1, true);
    }

    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/4AC28B1A"));
    Wait(8.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/143378FA"), StringExternal("Param/Value/8DED321E"), c_objectiveStateActive, true);
    gv_mainObj = ObjectiveLastCreated();
    TriggerEnable(gt_SurvivalModeTimeout, true);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    TriggerEnable(gt_Survival10Min, true);
    TriggerEnable(gt_Survival20Min, true);
    TriggerEnable(gt_Survival30Min, true);
    TriggerEnable(gt_Survival40Min, true);
    Wait(120.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(1, "Raisuli", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalMode_Init () {
    gt_SurvivalMode = TriggerCreate("gt_SurvivalMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Periodic XP
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalPeriodicXP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(55, StringExternal("Param/Value/7B51CD43"), 0);
    gv_infestationLevel = (gv_infestationLevel + 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalPeriodicXP_Init () {
    gt_SurvivalPeriodicXP = TriggerCreate("gt_SurvivalPeriodicXP_Func");
    TriggerEnable(gt_SurvivalPeriodicXP, false);
    TriggerAddEventTimePeriodic(gt_SurvivalPeriodicXP, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 10 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival10Min_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    if ((gv_mod_outbreak == false)) {
        TriggerEnable(gt_UndeadSpawning2, true);
    }

    TriggerEnable(gt_SurvivalPeriodicXP, true);
    SoundPlay(SoundLink("Event_Hanson02ZombieHowl", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Vesania", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(1, "Bruchus", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    if ((RandomInt(0, 2) == 1)) {
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    }

    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival10Min_Init () {
    gt_Survival10Min = TriggerCreate("gt_Survival10Min_Func");
    TriggerEnable(gt_Survival10Min, false);
    TriggerAddEventTimeElapsed(gt_Survival10Min, 600.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 20 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival20Min_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    SoundPlay(SoundLink("TTosh03BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(4, "Bruchus", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    Wait(20.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Aspectus", c_unitCreateIgnorePlacement, 15, RegionRandomPoint(gv_spawnRegion));
    gf_RegisterUnitEntersLeavesRegion(gt_UmbraAspectusLoop, UnitLastCreated(), RegionEntireMap(), true);
    gf_SpawnUndead(1, "Arachnathid", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(3, "Raisuli", 1);
    gf_SpawnUndead(3, "Gourmand", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(1, "Gargantuan", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival20Min_Init () {
    gt_Survival20Min = TriggerCreate("gt_Survival20Min_Func");
    TriggerEnable(gt_Survival20Min, false);
    TriggerAddEventTimeElapsed(gt_Survival20Min, 1200.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 30 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival30Min_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    if ((gv_mod_outbreak == false)) {
        TriggerEnable(gt_UndeadSpawning3, true);
    }

    TriggerEnable(gt_ItemSpawn2, true);
    SoundPlay(SoundLink("THorner04MusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Umbra", 0, 15, RegionRandomPoint(gv_spawnRegion));
    gf_RegisterUnitEntersLeavesRegion(gt_UmbraAspectusLoop, UnitLastCreated(), RegionEntireMap(), true);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(3, "Gourmand", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival30Min_Init () {
    gt_Survival30Min = TriggerCreate("gt_Survival30Min_Func");
    TriggerEnable(gt_Survival30Min, false);
    TriggerAddEventTimeElapsed(gt_Survival30Min, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 40 Min
//--------------------------------------------------------------------------------------------------
bool gt_Survival40Min_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_UndeadSpawning3, true);
    SoundPlay(SoundLink("THanson02MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Ignis", 1);
    gf_MissionText(StringExternal("Param/Value/43331203"));
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CASOnStation", 1);
    }
    PlayerGroupLoopEnd();
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(1, "Sniper", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(3, "Gourmand", 1);
    gf_SpawnUndead(1, "Cacumen", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(6, "Cursed", 1);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    Wait(20.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    if ((gv_averageXP >= 40000)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival40Min_Init () {
    gt_Survival40Min = TriggerCreate("gt_Survival40Min_Func");
    TriggerEnable(gt_Survival40Min, false);
    TriggerAddEventTimeElapsed(gt_Survival40Min, 2400.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode Timeout
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalModeTimeout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), -15.0, 0.0), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_medevacregion)), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 20.0, 270.0);
    gf_MissionText(StringExternal("Param/Value/8EED4160"));
    Wait(4.0, c_timeGame);
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/CCA84F3E"));
    TimerStart(gv_missiontimer, (150.0 - (IntToFixed(gv_gamemode) * 7.5)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SurvivalEvacPlayerEnter, true);
    TriggerEnable(gt_SurvivalEnd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalModeTimeout_Init () {
    gt_SurvivalModeTimeout = TriggerCreate("gt_SurvivalModeTimeout_Func");
    TriggerEnable(gt_SurvivalModeTimeout, false);
    TriggerAddEventTimeElapsed(gt_SurvivalModeTimeout, 3000.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Evac Player Enter
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalEvacPlayerEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_survivalCompleted = true;
    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            lv_allextracted = false;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_allextracted == true)) {
        TriggerExecute(gt_SurvivalEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalEvacPlayerEnter_Init () {
    gt_SurvivalEvacPlayerEnter = TriggerCreate("gt_SurvivalEvacPlayerEnter_Func");
    TriggerEnable(gt_SurvivalEvacPlayerEnter, false);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_SurvivalEvacPlayerEnter, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival End
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalEnd_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SurvivalEvacPlayerEnter, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    UnitPauseAll(true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    gv_pauseSpawning = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/7B58403B"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_gamesWon[gv_gamemode][PlayerGroupLoopCurrent()] = (gv_gamesWon[gv_gamemode][PlayerGroupLoopCurrent()] + 1);
    }
    PlayerGroupLoopEnd();
    if ((gv_mod_rifle == true)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/AEA741AE"));
            gv_playercamounlocked[8][PlayerGroupLoopCurrent()] = true;
        }
        PlayerGroupLoopEnd();
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/B988440F"));
        gv_playerdecalunlocked[2][PlayerGroupLoopCurrent()] = true;
        if ((gv_playerhits[PlayerGroupLoopCurrent()] <= 4) && (gv_medalsunlocked[8][PlayerGroupLoopCurrent()] == false)) {
            gv_medalsunlocked[8][PlayerGroupLoopCurrent()] = true;
            gf_AwardPlayerXP(600, StringExternal("Param/Value/DE3376A2"), PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    if ((gv_startingplayers <= 4) && (gv_startingplayers >= 2) && (gv_mod_outbreak == false)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/D21EE43C"));
            gv_playercamounlocked[14][PlayerGroupLoopCurrent()] = true;
        }
        PlayerGroupLoopEnd();
    }

    if ((gv_mod_outbreak == false)) {
        if ((gv_survivalCompleted == true)) {
            gf_SucceedMission(700, StringExternal("Param/Value/0C0DE698"), 0);
        }
        else {
            gf_SucceedMission(600, StringExternal("Param/Value/239C324F"), 0);
        }
    }
    else {
        if ((gv_survivalCompleted == true)) {
            gf_SucceedMission(500, StringExternal("Param/Value/FEFF1C2F"), 0);
        }
        else {
            gf_SucceedMission(400, StringExternal("Param/Value/C19F87F2"), 0);
        }
    }
    gv_gameOver = true;
    gv_victory = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalEnd_Init () {
    gt_SurvivalEnd = TriggerCreate("gt_SurvivalEnd_Func");
    TriggerEnable(gt_SurvivalEnd, false);
    TriggerAddEventTimer(gt_SurvivalEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abdul's Truck
//--------------------------------------------------------------------------------------------------
bool gt_AbdulsTruck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_truckpoint;
    bool lv_continue;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((RandomInt(1, 4) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((ObjectiveGetState(gv_optionalObj) != c_objectiveStateActive))) {
        Wait(5.0, c_timeGame);
    }
    lv_truckpoint = libNtve_gf_RandomPointBetweenPoints(PointFromId(1788), PointFromId(1793));
    if ((RandomInt(0, 3) == 1)) {
        lv_truckpoint = libNtve_gf_RandomPointBetweenPoints(PointFromId(1785), PointFromId(1777));
    }

    if ((RandomInt(0, 3) == 1)) {
        lv_truckpoint = libNtve_gf_RandomPointBetweenPoints(PointFromId(1785), RegionGetCenter(RegionFromId(41)));
    }

    if ((RandomInt(0, 3) == 1)) {
        lv_truckpoint = libNtve_gf_RandomPointBetweenPoints(PointFromId(2321), PointFromId(2320));
    }

    if ((RandomInt(0, 3) == 1)) {
        lv_truckpoint = libNtve_gf_RandomPointBetweenPoints(PointFromId(1793), PointFromId(2326));
    }

    RegionSetCenter(RegionFromId(113), lv_truckpoint);
    while (true) {
        UnitGroupLoopBegin(gv_heroesGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_continue = true;
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_truckpoint) < 32.0)) {
                lv_continue = false;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_continue == true)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    libNtve_gf_CreateActorAtPoint("WreckedCargoTruck", lv_truckpoint);
    UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(RegionFromId(113)), libNtve_gf_RandomAngle());
    gv_abdul = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_abdul, true);
    UnitBehaviorAdd(gv_abdul, "Abdul", gv_abdul, 1);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3E7CA443"));
    Wait(7.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6F777381"));
    Wait(7.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/37C21AA7"));
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    ObjectiveSetName(gv_optionalObj, StringExternal("Param/Value/A5299C4C"));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/A246756D"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", lv_truckpoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/14D274C0"));
    PingSetUnit(PingLastCreated(), gv_abdul);
    gv_optionalObjPings[0] = PingLastCreated();
    TriggerEnable(gt_AbdulDies, true);
    TriggerEnable(gt_ApproachAbdul, true);
    Wait(90.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_abdul, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbdulsTruck_Init () {
    gt_AbdulsTruck = TriggerCreate("gt_AbdulsTruck_Func");
    TriggerAddEventTimeElapsed(gt_AbdulsTruck, RandomFixed(420.0, 2000.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach Abdul
//--------------------------------------------------------------------------------------------------
bool gt_ApproachAbdul_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(gv_abdul) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_optionalObjPings[0]);
    libNtve_gf_MakeUnitInvulnerable(gv_abdul, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9D9CB64E"));
    UnitSetOwner(gv_abdul, EventPlayer(), true);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_abdul, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    TriggerEnable(gt_AbdulEnterThalim, true);
    Wait(7.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FF9A33FB"));
    UnitSelect(gv_abdul, EventPlayer(), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(24)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_optionalObjPings[0] = PingLastCreated();
    Wait(10.0, c_timeGame);
    gf_SucceedMission(6, StringExternal("Param/Value/18D2CBC1"), 0);
    Wait(290.0, c_timeGame);
    if ((UnitGetOwner(gv_abdul) != 0) && (UnitIsAlive(gv_abdul) == true)) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_abdul));
        UnitCreate(1, "Zombie", 0, 14, UnitGetPosition(gv_abdul), UnitGetFacing(gv_abdul));
        UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
        UnitKill(gv_abdul);
        TriggerEnable(gt_AbdulEnterThalim, false);
        TriggerEnable(gt_AbdulDies, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/093352C8"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachAbdul_Init () {
    gt_ApproachAbdul = TriggerCreate("gt_ApproachAbdul_Func");
    TriggerEnable(gt_ApproachAbdul, false);
    TriggerAddEventUnitRegion(gt_ApproachAbdul, null, RegionFromId(113), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abdul Dies
//--------------------------------------------------------------------------------------------------
bool gt_AbdulDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_abdul))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_AbdulEnterThalim, false);
    TriggerEnable(gt_ApproachAbdul, false);
    PingDestroy(gv_optionalObjPings[0]);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8A478CD0"));
    ObjectiveSetState(gv_optionalObj, c_objectiveStateFailed);
    Wait(15.0, c_timeGame);
    if ((ObjectiveGetState(gv_optionalObj) == c_objectiveStateFailed)) {
        ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbdulDies_Init () {
    gt_AbdulDies = TriggerCreate("gt_AbdulDies_Func");
    TriggerEnable(gt_AbdulDies, false);
    TriggerAddEventUnitDied(gt_AbdulDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abdul Enter Thalim
//--------------------------------------------------------------------------------------------------
bool gt_AbdulEnterThalim_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_abdul))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_AbdulDies, false);
    PingDestroy(gv_optionalObjPings[0]);
    UnitSetOwner(EventUnit(), 0, true);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_abdul, false, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    gf_SucceedMission(24, StringExternal("Param/Value/66BACF47"), -1);
    ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
    UnitIssueOrder(gv_abdul, OrderTargetingPoint(AbilityCommand("move", 0), Point(94.0, 233.0)), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    if ((ObjectiveGetState(gv_optionalObj) == c_objectiveStateCompleted)) {
        ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
    }

    if ((UnitIsAlive(gv_abdul) == true)) {
        gf_TextChat(gv_abdul, StringExternal("Param/Value/868A4FBE"));
        UnitBehaviorRemove(gv_abdul, "Abdul", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbdulEnterThalim_Init () {
    gt_AbdulEnterThalim = TriggerCreate("gt_AbdulEnterThalim_Func");
    TriggerEnable(gt_AbdulEnterThalim, false);
    TriggerAddEventUnitRegion(gt_AbdulEnterThalim, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: March of the Dead
//--------------------------------------------------------------------------------------------------
bool gt_MarchoftheDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((RandomInt(1, 4) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_darreuspoints[0] = PointFromId(1788);
    gv_darreuspoints[1] = PointFromId(1791);
    gv_darreuspoints[2] = PointFromId(1792);
    gv_darreuspoints[3] = PointFromId(2320);
    gv_darreuspoints[4] = PointFromId(2507);
    while (!((ObjectiveGetState(gv_optionalObj) != c_objectiveStateActive))) {
        Wait(5.0, c_timeGame);
    }
    SoundPlay(SoundLink("TValerian02BMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreate(1, "Darreus", 0, 14, RegionRandomPoint(RegionFromId(1)), 0.0);
    gv_darreus = UnitLastCreated();
    UnitBehaviorAdd(gv_darreus, "Darreus", gv_darreus, 1);
    if ((PlayerGroupCount(gv_players) <= 3)) {
        UnitBehaviorAdd(gv_darreus, "PlayerHandicap", gv_darreus, (4 - PlayerGroupCount(gv_players)));
    }
    else {
        UnitBehaviorAdd(gv_darreus, "PlayerModifier", gv_darreus, PlayerGroupCount(gv_players));
    }
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_darreus, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_darreus), ColorWithAlpha(50.20, 0.00, 100.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1DC73A0E"));
    PingSetUnit(PingLastCreated(), gv_darreus);
    gv_optionalObjPings[0] = PingLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0F090162"));
    Wait(7.0, c_timeGame);
    TriggerEnable(gt_DarreusLoop, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D67F5DD7"));
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    ObjectiveSetName(gv_optionalObj, StringExternal("Param/Value/BE65BBAC"));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/3FA8933F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MarchoftheDead_Init () {
    gt_MarchoftheDead = TriggerCreate("gt_MarchoftheDead_Func");
    TriggerAddEventTimeElapsed(gt_MarchoftheDead, RandomFixed(1080.0, 5000.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Darreus Loop
//--------------------------------------------------------------------------------------------------
bool gt_DarreusLoop_Func (bool testConds, bool runActions) {
    int auto6A67BCE2_n;
    int auto6A67BCE2_i;
    int autoB9E53CD3_n;
    int autoB9E53CD3_i;
    int autoF3161F66_n;
    int autoF3161F66_i;

    // Variable Declarations
    fixed lv_darreuslife;
    region lv_darreusradius;
    point lv_temppoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_darreus) == true)) {
        if ((RandomInt(0, 4) == 4)) {
            UnitIssueOrder(gv_darreus, OrderTargetingPoint(AbilityCommand("move", 0), gv_darreuspoints[gv_darreusnext]), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_darreus, OrderTargetingPoint(AbilityCommand("attack", 0), gv_darreuspoints[gv_darreusnext]), c_orderQueueReplace);
        }
        if ((DistanceBetweenPoints(UnitGetPosition(gv_darreus), gv_darreuspoints[gv_darreusnext]) < 7.0)) {
            if ((gv_darreusnext == 4)) {
                TriggerEnable(TriggerGetCurrent(), false);
                lv_darreuslife = UnitGetPropertyFixed(gv_darreus, c_unitPropLifePercent, c_unitPropCurrent);
                PingDestroy(gv_optionalObjPings[0]);
                UnitRemove(gv_darreus);
                ObjectiveSetState(gv_optionalObj, c_objectiveStateFailed);
                if ((lv_darreuslife <= 10.0)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D5E9C8D6"));
                    Wait(10.0, c_timeGame);
                    gf_SucceedMission(20, StringExternal("Param/Value/C2D7B72B"), 0);
                }
                else if ((lv_darreuslife <= 33.0)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7D4BEB72"));
                    Wait(10.0, c_timeGame);
                    gf_SucceedMission(10, StringExternal("Param/Value/E2EDC190"), 0);
                }
                else if ((lv_darreuslife <= 66.0)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E3C594FC"));
                    Wait(10.0, c_timeGame);
                    gf_SucceedMission(5, StringExternal("Param/Value/1DCF7FE3"), 0);
                }
                else if (true) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/36E618CA"));
                    Wait(10.0, c_timeGame);
                }
                Wait(5.0, c_timeGame);
                if ((ObjectiveGetState(gv_optionalObj) == c_objectiveStateFailed)) {
                    ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
                }

            }
            else {
                gv_darreusnext = (gv_darreusnext + 1);
                lv_darreusradius = RegionCircle(UnitGetPosition(gv_darreus), 10.0);
                auto6A67BCE2_n = RandomInt(8, 12);
                for (auto6A67BCE2_i = 1; auto6A67BCE2_i <= auto6A67BCE2_n; auto6A67BCE2_i += 1) {
                    lv_temppoint = RegionRandomPoint(lv_darreusradius);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_temppoint);
                    UnitCreate(1, "Eel", 0, 14, lv_temppoint, libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
                }
                autoB9E53CD3_n = RandomInt(1, 2);
                for (autoB9E53CD3_i = 1; autoB9E53CD3_i <= autoB9E53CD3_n; autoB9E53CD3_i += 1) {
                    lv_temppoint = RegionRandomPoint(lv_darreusradius);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_temppoint);
                    UnitCreate(1, "Charger", 0, 14, lv_temppoint, libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
                }
                autoF3161F66_n = RandomInt(4, 8);
                for (autoF3161F66_i = 1; autoF3161F66_i <= autoF3161F66_n; autoF3161F66_i += 1) {
                    lv_temppoint = RegionRandomPoint(lv_darreusradius);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_temppoint);
                    UnitCreate(1, "Crab", 0, 14, lv_temppoint, libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
                }
            }
        }

    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
        gf_SucceedMission(38, StringExternal("Param/Value/01F9940F"), -1);
        ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
        PingDestroy(gv_optionalObjPings[0]);
        Wait(10.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/25F2D35E"));
        Wait(5.0, c_timeGame);
        if ((ObjectiveGetState(gv_optionalObj) == c_objectiveStateCompleted)) {
            ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarreusLoop_Init () {
    gt_DarreusLoop = TriggerCreate("gt_DarreusLoop_Func");
    TriggerEnable(gt_DarreusLoop, false);
    TriggerAddEventTimePeriodic(gt_DarreusLoop, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OP Generators
//--------------------------------------------------------------------------------------------------
bool gt_OPGenerators_Func (bool testConds, bool runActions) {
    int auto0AFD5A67_ae;
    int auto0AFD5A67_ai;
    int auto3ED690D8_ae;
    int auto3ED690D8_ai;

    // Variable Declarations
    int lv_int;
    bool lv_continue;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((RandomInt(1, 4) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((ObjectiveGetState(gv_optionalObj) != c_objectiveStateActive))) {
        Wait(5.0, c_timeGame);
    }
    Wait(7.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/56993FDE"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    ObjectiveSetName(gv_optionalObj, StringExternal("Param/Value/64CD3442"));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/CC6EF0AF"));
    gv_generators[1] = UnitFromId(2579);
    gv_generators[2] = UnitFromId(582);
    gv_generators[3] = UnitFromId(2575);
    TriggerEnable(gt_ApproachGenerator, true);
    auto0AFD5A67_ae = 3;
    auto0AFD5A67_ai = 1;
    lv_int = 1;
    for ( ; ( (auto0AFD5A67_ai >= 0 && lv_int <= auto0AFD5A67_ae) || (auto0AFD5A67_ai <= 0 && lv_int >= auto0AFD5A67_ae) ) ; lv_int += auto0AFD5A67_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingnumeral[lv_int], UnitGetPosition(gv_generators[lv_int]), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/CF29EC34"));
        gv_optionalObjPings[lv_int] = PingLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(6, 9), "Eel", 0, 14, UnitGetPosition(gv_generators[lv_int]));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_generators[lv_int]), c_orderQueueReplace);
        UnitBehaviorAdd(gv_generators[lv_int], "GeneratorLeech", gv_generators[lv_int], 1);
    }
    TriggerExecute(gt_GeneratorPowered, true, false);
    while (true) {
        lv_continue = true;
        auto3ED690D8_ae = 3;
        auto3ED690D8_ai = 1;
        lv_int = 1;
        for ( ; ( (auto3ED690D8_ai >= 0 && lv_int <= auto3ED690D8_ae) || (auto3ED690D8_ai <= 0 && lv_int >= auto3ED690D8_ae) ) ; lv_int += auto3ED690D8_ai ) {
            if ((UnitGetPropertyFixed(gv_generators[lv_int], c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)) {
                lv_continue = false;
                UnitCreate(2, "Eel", 0, 14, UnitGetPosition(gv_generators[lv_int]), libNtve_gf_RandomAngle());
                UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
            }

        }
        if ((lv_continue == true)) {
            break;
        }

        Wait(60.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OPGenerators_Init () {
    gt_OPGenerators = TriggerCreate("gt_OPGenerators_Func");
    TriggerAddEventTimeElapsed(gt_OPGenerators, RandomFixed(420.0, 2000.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach Generator
//--------------------------------------------------------------------------------------------------
bool gt_ApproachGenerator_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/49D95E46"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 4.0, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachGenerator_Init () {
    gt_ApproachGenerator = TriggerCreate("gt_ApproachGenerator_Func");
    TriggerEnable(gt_ApproachGenerator, false);
    TriggerAddEventUnitRange(gt_ApproachGenerator, null, UnitFromId(2579), 5.0, true);
    TriggerAddEventUnitRange(gt_ApproachGenerator, null, UnitFromId(582), 5.0, true);
    TriggerAddEventUnitRange(gt_ApproachGenerator, null, UnitFromId(2575), 5.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generator Powered
//--------------------------------------------------------------------------------------------------
bool gt_GeneratorPowered_Func (bool testConds, bool runActions) {
    int autoE4C37211_ae;
    int autoE4C37211_ai;

    // Variable Declarations
    bool[4] lv_powered;
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoE4C37211_ae = 3;
        autoE4C37211_ai = 1;
        lv_int = 1;
        for ( ; ( (autoE4C37211_ai >= 0 && lv_int <= autoE4C37211_ae) || (autoE4C37211_ai <= 0 && lv_int >= autoE4C37211_ae) ) ; lv_int += autoE4C37211_ai ) {
            if ((UnitGetPropertyFixed(gv_generators[lv_int], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0) && (lv_powered[lv_int] == false)) {
                lv_powered[lv_int] = true;
                SoundPlayOnUnit(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), gv_generators[lv_int], 0.0, 100.0, 0.0);
                PingDestroy(gv_optionalObjPings[lv_int]);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FFC99F4C"));
                UnitBehaviorRemove(gv_generators[lv_int], "GeneratorLeech", 1);
                UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_generators[lv_int]), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), "GeneratorPowering", 1);
                }
                UnitGroupLoopEnd();
                if ((lv_powered[1] == true) && (lv_powered[2] == true) && (lv_powered[3] == true)) {
                    gf_SucceedMission(50, StringExternal("Param/Value/3EF04B75"), 0);
                    ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
                    Wait(10.0, c_timeGame);
                    if ((ObjectiveGetState(gv_optionalObj) == c_objectiveStateCompleted)) {
                        ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
                    }

                    return true;
                }
                else {
                    gf_SucceedMission(15, StringExternal("Param/Value/39F132C1"), 0);
                }
            }

        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GeneratorPowered_Init () {
    gt_GeneratorPowered = TriggerCreate("gt_GeneratorPowered_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apiaries
//--------------------------------------------------------------------------------------------------
bool gt_Apiaries_Func (bool testConds, bool runActions) {
    int autoD3604D80_n;
    int autoD3604D80_i;
    int autoD139AB2B_n;
    int autoD139AB2B_i;

    // Variable Declarations
    unitgroup lv_apiaries;
    int lv_count;
    region lv_spawningregion;

    // Variable Initialization
    lv_apiaries = UnitGroupEmpty();
    lv_spawningregion = RegionEmpty();

    // Conditions
    if (testConds) {
        if (!((RandomInt(1, 4) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ApiaryLoop, true);
    while (!((ObjectiveGetState(gv_optionalObj) != c_objectiveStateActive))) {
        Wait(5.0, c_timeGame);
    }
    RegionAddRegion(lv_spawningregion, RegionFromId(62));
    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        RegionAddCircle(lv_spawningregion, false, UnitGetPosition(UnitGroupLoopCurrent()), 20.0);
    }
    UnitGroupLoopEnd();
    SoundPlay(SoundLink("TValerian02BMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/30C8F6D7"));
    autoD3604D80_n = 5;
    for (autoD3604D80_i = 1; autoD3604D80_i <= autoD3604D80_n; autoD3604D80_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Apiary", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(lv_spawningregion));
        UnitGroupAdd(lv_apiaries, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "CritterWander", UnitLastCreated(), 1);
    }
    lv_count = UnitGroupCount(lv_apiaries, c_unitCountAlive);
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_optionalObj, c_objectiveStateActive);
    ObjectiveSetName(gv_optionalObj, (StringExternal("Param/Value/D902F35C") + IntToText(lv_count) + StringExternal("Param/Value/FD866379")));
    ObjectiveSetDescription(gv_optionalObj, StringExternal("Param/Value/6AB4AFAD"));
    while (true) {
        if ((UnitGroupCount(lv_apiaries, c_unitCountAlive) == 0)) {
            gf_SucceedMission(30, StringExternal("Param/Value/2C48968D"), -1);
            ObjectiveSetState(gv_optionalObj, c_objectiveStateCompleted);
            Wait(10.0, c_timeGame);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5CA26F04"));
            if ((ObjectiveGetState(gv_optionalObj) == c_objectiveStateCompleted)) {
                ObjectiveSetState(gv_optionalObj, c_objectiveStateHidden);
            }

            break;
        }

        if ((UnitGroupCount(lv_apiaries, c_unitCountAlive) < lv_count)) {
            autoD139AB2B_n = (lv_count - UnitGroupCount(lv_apiaries, c_unitCountAlive));
            for (autoD139AB2B_i = 1; autoD139AB2B_i <= autoD139AB2B_n; autoD139AB2B_i += 1) {
                gf_SucceedMission(10, StringExternal("Param/Value/A586A2F3"), 0);
            }
            lv_count = UnitGroupCount(lv_apiaries, c_unitCountAlive);
            ObjectiveSetName(gv_optionalObj, (StringExternal("Param/Value/9C47D454") + IntToText(lv_count) + StringExternal("Param/Value/B53CA9C2")));
        }

        Wait(2.0, c_timeGame);
    }
    TriggerEnable(gt_ApiaryLoop, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Apiaries_Init () {
    gt_Apiaries = TriggerCreate("gt_Apiaries_Func");
    TriggerAddEventTimeElapsed(gt_Apiaries, RandomFixed(420.0, 2000.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apiary Loop
//--------------------------------------------------------------------------------------------------
bool gt_ApiaryLoop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_pauseSpawning == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupLoopBegin(UnitGroup("Apiary", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreateUnitsWithDefaultFacing((gv_spawnCount / 3), "Swarmer", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApiaryLoop_Init () {
    gt_ApiaryLoop = TriggerCreate("gt_ApiaryLoop_Func");
    TriggerEnable(gt_ApiaryLoop, false);
    TriggerAddEventTimePeriodic(gt_ApiaryLoop, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prologue
//--------------------------------------------------------------------------------------------------
bool gt_Prologue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveCreate(StringExternal("Param/Value/D2E7379B"), StringExternal("Param/Value/4CEB0373"), c_objectiveStateActive, false);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_optionalObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/27EF23FE"), StringExternal("Param/Value/00134FBA"), c_objectiveStateActive, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_mainObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/87D09835"), StringExternal("Param/Value/5C2893A7"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_secondObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/3D1A847C"), StringExternal("Param/Value/B5DB0E58"), c_objectiveStateHidden, true);
    ObjectiveSetState(ObjectiveLastCreated(), c_objectiveStateHidden);
    gv_thirdObj = ObjectiveLastCreated();
    TimerWindowCreate(gv_missiontimer, StringExternal("Param/Value/19833CFF"), false, false);
    gv_missiontimerwindow = TimerWindowLastCreated();
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(0.00, 50.20, 100.00), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(92.55, 92.55, 0.00), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 50.20, 0.00), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(100.00, 0.00, 0.00), 4);
    TriggerEnable(gt_FarmerAkmaWork, true);
    TriggerExecute(gt_TheMayor, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prologue_Init () {
    gt_Prologue = TriggerCreate("gt_Prologue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Contact
//--------------------------------------------------------------------------------------------------
bool gt_InitialContact_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_players, UnitGetOwner(EventUnitTarget())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C6FB3831"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/287971C1"));
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/40CF07F3"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BF220C72"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D2961C26"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitialContact_Init () {
    gt_InitialContact = TriggerCreate("gt_InitialContact_Func");
    TriggerAddEventUnitAttacked(gt_InitialContact, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Mayor
//--------------------------------------------------------------------------------------------------
bool gt_TheMayor_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/8406280D"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F2A2BD09"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/67811A8D"));
    TriggerEnable(gt_MayorGate, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(7)), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/DC03593D"));
    gv_missionping = PingLastCreated();
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/CA8E3135"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/D285B42B"));
    TimerStart(gv_missiontimer, RandomFixed(120.0, 180.0), false, c_timeGame);
    TriggerEnable(gt_MayorTimeout, true);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_TCPs, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheMayor_Init () {
    gt_TheMayor = TriggerCreate("gt_TheMayor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mayor Gate
//--------------------------------------------------------------------------------------------------
bool gt_MayorGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_SkipifOver();
    gf_MissionText(StringExternal("Param/Value/06A9DDD0"));
    PingDestroy(gv_missionping);
    UnitCreate(1, "Mayor", 0, 0, RegionGetCenter(RegionFromId(7)), 270.0);
    gv_mayor = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_mayor, true);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/66864383"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/38570621"));
    Wait(5.0, c_timeGame);
    UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    TriggerEnable(gt_MayorHouse, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MayorGate_Init () {
    gt_MayorGate = TriggerCreate("gt_MayorGate_Func");
    TriggerEnable(gt_MayorGate, false);
    TriggerAddEventUnitRegion(gt_MayorGate, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mayor House
//--------------------------------------------------------------------------------------------------
bool gt_MayorHouse_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MayorTimeout, false);
    gf_SkipifOver();
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    if ((RandomInt(0, 1) == 1)) {
        Wait(2.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/F637B231"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/23D249C5"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/FB416B6A"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/8AB9C080"));
        Wait(2.0, c_timeGame);
        SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_MissionText(StringExternal("Param/Value/A0D8BB56"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/26601C11"));
        Wait(7.0, c_timeGame);
        gf_SucceedMission(10, StringExternal("Param/Value/05C2DB03"), 0);
        Wait(7.0, c_timeGame);
        TriggerExecute(gt_MayorDefense, true, false);
    }
    else {
        gf_MissionText(StringExternal("Param/Value/FE1DE58D"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/5745C656"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/093C268A"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/4409DA96"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/BD972D50"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/DDB68282"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/A9D28518"));
        Wait(7.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/58162B15"));
        Wait(4.0, c_timeGame);
        gf_SucceedMission(10, StringExternal("Param/Value/EE602409"), 0);
        Wait(4.0, c_timeGame);
        gv_missioncomplete[1] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MayorHouse_Init () {
    gt_MayorHouse = TriggerCreate("gt_MayorHouse_Func");
    TriggerEnable(gt_MayorHouse, false);
    TriggerAddEventUnitRegion(gt_MayorHouse, null, RegionFromId(7), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mayor Timeout
//--------------------------------------------------------------------------------------------------
bool gt_MayorTimeout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_MayorGate, false);
    TriggerEnable(gt_MayorHouse, false);
    gf_SkipifOver();
    PingDestroy(gv_missionping);
    gf_MissionText(StringExternal("Param/Value/4CB3CB65"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    if ((gv_mayor == null)) {
        UnitCreate(1, "Mayor", 0, 0, RegionGetCenter(RegionFromId(7)), 270.0);
        gv_mayor = UnitLastCreated();
        libNtve_gf_MakeUnitInvulnerable(gv_mayor, true);
    }

    UnitIssueOrder(UnitFromId(56), Order(AbilityCommand("MetalGateDiagonalULBRLowered", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    gf_FailMission(12, StringExternal("Param/Value/F0A9DFEE"), 1);
    Wait(4.0, c_timeGame);
    gv_missioncomplete[1] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MayorTimeout_Init () {
    gt_MayorTimeout = TriggerCreate("gt_MayorTimeout_Func");
    TriggerEnable(gt_MayorTimeout, false);
    TriggerAddEventTimer(gt_MayorTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TCPs
//--------------------------------------------------------------------------------------------------
bool gt_TCPs_Func (bool testConds, bool runActions) {
    int auto81DCFA09_ae;
    int auto81DCFA09_ai;
    int auto82A1B2A0_ae;
    int auto82A1B2A0_ai;

    // Variable Declarations
    int lv_loopint;
    unit lv_droppod;
    fixed lv_timeout;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_PrologueMission2, true, false);
    gv_tCPregion[1] = RegionFromId(28);
    gv_tCPregion[2] = RegionFromId(29);
    gv_tCPregion[3] = RegionFromId(30);
    gv_tCPregion[4] = RegionFromId(31);
    gv_tCPregion[5] = RegionFromId(142);
    gv_tCPregion[6] = RegionFromId(108);
    gv_tCPregion[7] = RegionFromId(107);
    gv_tCPregion[8] = RegionFromId(26);
    gv_sensorLZ = gv_lZs[RandomInt(1, 5)];
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/1E9F1690"));
    Wait(7.0, c_timeGame);
    if ((gv_gamemode >= 2) && (gv_gamemode <= 5)) {
        gv_sensorcount = (gv_gamemode + 3);
        ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/1DF717F1"));
    }
    else {
        gv_sensorcount = 4;
        ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/D59471F4"));
    }
    gf_MissionText(StringExternal("Param/Value/4C9C45C4"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/FB0783CF"));
    Wait(25.0, c_timeGame);
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, (StringExternal("Param/Value/994190C8") + IntToText(gv_sensorcount) + StringExternal("Param/Value/E9EE2118")));
    auto81DCFA09_ae = gv_sensorcount;
    auto81DCFA09_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto81DCFA09_ai >= 0 && lv_loopint <= auto81DCFA09_ae) || (auto81DCFA09_ai <= 0 && lv_loopint >= auto81DCFA09_ae) ) ; lv_loopint += auto81DCFA09_ai ) {
        gv_sentryset[lv_loopint] = false;
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_sensorLZ), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C22F235E"));
    gv_sensorpings[0] = PingLastCreated();
    lv_timeout = (255.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 5.0));
    TimerStart(gv_missiontimer, lv_timeout, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    gf_MissionText(libSwaC_gf_FormatTextWithReplacement(StringExternal("Param/Value/FFE92F5B"), TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(lv_timeout)), null, null, null));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(gv_sensorLZ));
    lv_droppod = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
    Wait(5.0, c_timeGame);
    UnitKill(lv_droppod);
    auto82A1B2A0_ae = gv_sensorcount;
    auto82A1B2A0_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto82A1B2A0_ai >= 0 && lv_loopint <= auto82A1B2A0_ae) || (auto82A1B2A0_ai <= 0 && lv_loopint >= auto82A1B2A0_ae) ) ; lv_loopint += auto82A1B2A0_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGun2", 0, 0, RegionGetCenter(gv_sensorLZ));
        UnitGroupAdd(gv_simpleMissionItems, UnitLastCreated());
    }
    TriggerEnable(gt_TCPTimeout, true);
    TriggerEnable(gt_AcquireSentryGun, true);
    TriggerEnable(gt_PlaceSentryGun, true);
    libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_sensorLZ));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    UnitRemove(lv_droppod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TCPs_Init () {
    gt_TCPs = TriggerCreate("gt_TCPs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire Sentry Gun
//--------------------------------------------------------------------------------------------------
bool gt_AcquireSentryGun_Func (bool testConds, bool runActions) {
    int auto58BF502D_ae;
    int auto58BF502D_ai;
    unitgroup auto35B1C31B_g;
    int auto35B1C31B_u;

    // Variable Declarations
    int lv_loopint;
    unit lv_unit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "MK44SentryGun2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_sensorpings[0]);
    libNtve_gf_KillModel(gv_sensorbeacon);
    auto58BF502D_ae = gv_sensorcount;
    auto58BF502D_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto58BF502D_ai >= 0 && lv_loopint <= auto58BF502D_ae) || (auto58BF502D_ai <= 0 && lv_loopint >= auto58BF502D_ae) ) ; lv_loopint += auto58BF502D_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingnumeral[lv_loopint], RegionGetCenter(gv_tCPregion[lv_loopint]), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/CBD294B3") + IntToText(lv_loopint)));
        gv_sensorpings[lv_loopint] = PingLastCreated();
    }
    auto35B1C31B_g = gv_simpleMissionItems;
    auto35B1C31B_u = 1;
    for ( ; auto35B1C31B_u <= UnitGroupCount(auto35B1C31B_g, c_unitCountAll) ; auto35B1C31B_u += BoolToInt(lv_unit == UnitGroupUnit(auto35B1C31B_g, auto35B1C31B_u)) ) {
        lv_unit = UnitGroupUnit(auto35B1C31B_g, auto35B1C31B_u);
        gf_MissionItemPingAddItem(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireSentryGun_Init () {
    gt_AcquireSentryGun = TriggerCreate("gt_AcquireSentryGun_Func");
    TriggerEnable(gt_AcquireSentryGun, false);
    TriggerAddEventUnitInventoryChange(gt_AcquireSentryGun, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Place Sentry Gun
//--------------------------------------------------------------------------------------------------
bool gt_PlaceSentryGun_Func (bool testConds, bool runActions) {
    int auto91B55F40_ae;
    int auto91B55F40_ai;
    int auto4B085881_ae;
    int auto4B085881_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_inaregion;
    bool lv_allsensorsset;

    // Variable Initialization
    lv_allsensorsset = true;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "MK44SentryGun2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto91B55F40_ae = gv_sensorcount;
    auto91B55F40_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto91B55F40_ai >= 0 && lv_loopint <= auto91B55F40_ae) || (auto91B55F40_ai <= 0 && lv_loopint >= auto91B55F40_ae) ) ; lv_loopint += auto91B55F40_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), gv_tCPregion[lv_loopint]) == true) && (gv_sentryset[lv_loopint] == false)) {
            gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
            UnitGroupRemove(gv_simpleMissionItems, EventUnitInventoryItem());
            UnitRemove(EventUnitInventoryItem());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGun", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())));
            gv_sentryset[lv_loopint] = true;
            lv_inaregion = true;
            PingDestroy(gv_sensorpings[lv_loopint]);
            gf_MissionText((StringExternal("Param/Value/7839AC66") + IntToText(lv_loopint) + StringExternal("Param/Value/A880D1AF")));
        }

    }
    if ((lv_inaregion == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/8EFF9265"));
    }

    auto4B085881_ae = gv_sensorcount;
    auto4B085881_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto4B085881_ai >= 0 && lv_loopint <= auto4B085881_ae) || (auto4B085881_ai <= 0 && lv_loopint >= auto4B085881_ae) ) ; lv_loopint += auto4B085881_ai ) {
        if ((gv_sentryset[lv_loopint] == false)) {
            lv_allsensorsset = false;
        }

    }
    if ((lv_allsensorsset == true)) {
        ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
        gf_SucceedMission(30, StringExternal("Param/Value/6A4C9D76"), -2);
        if ((TimerGetRemaining(gv_missiontimer) >= 60.0)) {
            gf_SucceedMission(15, StringExternal("Param/Value/B0D3C9D0"), 0);
        }
        else if ((TimerGetRemaining(gv_missiontimer) >= 15.0)) {
            gf_SucceedMission(RoundI(((TimerGetRemaining(gv_missiontimer) / 60.0) * 10.0)), StringExternal("Param/Value/3F1C9EA1"), 0);
        }
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TriggerEnable(gt_TCPTimeout, false);
        Wait(4.0, c_timeGame);
        gv_missioncomplete[2] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlaceSentryGun_Init () {
    gt_PlaceSentryGun = TriggerCreate("gt_PlaceSentryGun_Func");
    TriggerEnable(gt_PlaceSentryGun, false);
    TriggerAddEventUnitInventoryChange(gt_PlaceSentryGun, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TCP Timeout
//--------------------------------------------------------------------------------------------------
bool gt_TCPTimeout_Func (bool testConds, bool runActions) {
    int autoE1A74187_ae;
    int autoE1A74187_ai;
    unitgroup autoEFA57191_g;
    int autoEFA57191_u;

    // Variable Declarations
    int lv_loopint;
    int lv_placednumber;
    unit lv_unit;
    text lv_comment;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_AcquireSentryGun, false);
    TriggerEnable(gt_PlaceSentryGun, false);
    gf_SkipifOver();
    PingDestroy(gv_sensorpings[0]);
    autoE1A74187_ae = gv_sensorcount;
    autoE1A74187_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoE1A74187_ai >= 0 && lv_loopint <= autoE1A74187_ae) || (autoE1A74187_ai <= 0 && lv_loopint >= autoE1A74187_ae) ) ; lv_loopint += autoE1A74187_ai ) {
        if ((gv_sentryset[lv_loopint] == false)) {
            PingDestroy(gv_sensorpings[lv_loopint]);
        }
        else {
            lv_placednumber += 1;
        }
    }
    autoEFA57191_g = gv_simpleMissionItems;
    autoEFA57191_u = 1;
    for ( ; autoEFA57191_u <= UnitGroupCount(autoEFA57191_g, c_unitCountAll) ; autoEFA57191_u += BoolToInt(lv_unit == UnitGroupUnit(autoEFA57191_g, autoEFA57191_u)) ) {
        lv_unit = UnitGroupUnit(autoEFA57191_g, autoEFA57191_u);
        gf_MissionItemPingRemoveItem(lv_unit);
        UnitRemove(lv_unit);
    }
    if ((lv_placednumber == 0)) {
        ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
        gf_FailMission(10, StringExternal("Param/Value/5BED2B91"), 2);
        lv_comment = StringExternal("Param/Value/6CD83861");
    }
    else if ((lv_placednumber <= gv_sensorcount)) {
        ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
        gf_SucceedMission(((30 * lv_placednumber) / (gv_sensorcount * 2)), StringExternal("Param/Value/B74D95B4"), 1);
        lv_comment = StringExternal("Param/Value/86D42B09");
    }
    else if (true) {
        ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
        gf_SucceedMission(((30 * lv_placednumber) / gv_sensorcount), StringExternal("Param/Value/7C45AACF"), 1);
        lv_comment = StringExternal("Param/Value/E38E5E8D");
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    Wait(4.0, c_timeGame);
    gf_MissionText(libSwaC_gf_FormatTextWithReplacement(StringExternal("Param/Value/C1B92E2D"), lv_comment, null, null, null));
    gv_missioncomplete[2] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TCPTimeout_Init () {
    gt_TCPTimeout = TriggerCreate("gt_TCPTimeout_Func");
    TriggerEnable(gt_TCPTimeout, false);
    TriggerAddEventTimer(gt_TCPTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prologue Mission 2
//--------------------------------------------------------------------------------------------------
bool gt_PrologueMission2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 1) == 1) && (gv_mod_tier1 == false)) {
        TriggerExecute(gt_Gourmand, true, false);
    }
    else {
        TriggerExecute(gt_Sensors, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrologueMission2_Init () {
    gt_PrologueMission2 = TriggerCreate("gt_PrologueMission2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mayor Defense
//--------------------------------------------------------------------------------------------------
bool gt_MayorDefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_droppod;
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(1294), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(7))), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1650), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(7))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/57DA26CE"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/923C658B"));
    Wait(10.0, c_timeGame);
    TriggerEnable(gt_MayorDeath, true);
    UnitGroupAdd(gv_undeadTargetGroup, gv_mayor);
    libNtve_gf_MakeUnitInvulnerable(gv_mayor, false);
    Wait(5.0, c_timeGame);
    gf_SpawnMayorAssault("Zombie", gv_spawnCount);
    gf_SpawnMayorAssault("Zombie", gv_spawnCount);
    Wait(5.0, c_timeGame);
    gf_SpawnMayorAssault("Zombie", gv_spawnCount);
    gf_SpawnMayorAssault("Risen", gv_spawnCount);
    gf_SpawnMayorAssault("InfestedCivilian", gv_spawnCount);
    Wait(10.0, c_timeGame);
    gf_SpawnMayorAssault("Glutton", RandomInt(2, 3));
    gf_SpawnMayorAssault("Zombie", gv_spawnCount);
    gf_SpawnMayorAssault("Zombie", gv_spawnCount);
    gf_SpawnMayorAssault("Creeper", RandomInt(3, 7));
    Wait(15.0, c_timeGame);
    gf_SpawnMayorAssault("Glutton", RandomInt(2, 3));
    gf_SpawnUndead(3, "Glutton", 1);
    gf_SpawnMayorAssault("Zombie", gv_spawnCount);
    Wait(30.0, c_timeGame);
    gf_SpawnMayorAssault("Glutton", RandomInt(2, 3));
    gf_SpawnMayorAssault("Risen", gv_spawnCount);
    gf_SpawnMayorAssault("Creeper", gv_spawnCount);
    gf_SpawnMayorAssault("InfestedCivilian", gv_spawnCount);
    Wait(40.0, c_timeGame);
    if ((UnitIsAlive(gv_mayor) == true)) {
        TriggerEnable(gt_MayorDeath, false);
        gf_SucceedMission(30, StringExternal("Param/Value/85337DA1"), -2);
        ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
        UnitGroupRemove(gv_undeadTargetGroup, gv_mayor);
        libNtve_gf_MakeUnitInvulnerable(gv_mayor, true);
        gv_missioncomplete[1] = true;
        UnitIssueOrder(UnitFromId(1294), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(149))), c_orderQueueReplace);
        UnitIssueOrder(UnitFromId(1650), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(149))), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MayorDefense_Init () {
    gt_MayorDefense = TriggerCreate("gt_MayorDefense_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mayor Death
//--------------------------------------------------------------------------------------------------
bool gt_MayorDeath_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_FailMission(10, StringExternal("Param/Value/58D10188"), 2);
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    Wait(2.0, c_timeGame);
    gv_missioncomplete[1] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MayorDeath_Init () {
    gt_MayorDeath = TriggerCreate("gt_MayorDeath_Func");
    TriggerEnable(gt_MayorDeath, false);
    TriggerAddEventUnitDied(gt_MayorDeath, UnitRefFromVariable("gv_mayor"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sensors
//--------------------------------------------------------------------------------------------------
bool gt_Sensors_Func (bool testConds, bool runActions) {
    int autoA2478EE6_ae;
    int autoA2478EE6_ai;
    int auto2982CA9D_ae;
    int auto2982CA9D_ai;

    // Variable Declarations
    unit lv_droppod;
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_missioncomplete[1] == true) && (gv_missioncomplete[2] == true))) {
        Wait(1.0, c_timeGame);
    }
    gf_ResetMissionComplete();
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    if ((RandomInt(0, 1) == 1)) {
        RegionSetCenter(RegionFromId(9), PointFromId(1630));
    }

    gv_sensorregion[1] = RegionFromId(9);
    gv_sensorregion[2] = RegionFromId(10);
    gv_sensorregion[3] = RegionFromId(11);
    gv_sensorregion[4] = RegionFromId(20);
    gv_sensorregion[5] = RegionFromId(21);
    gv_sensorregion[6] = RegionFromId(22);
    gv_sensorregion[7] = RegionFromId(23);
    gv_sensorcount = (gv_gamemode + 2);
    gf_MissionText(StringExternal("Param/Value/A7CD005F"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/123D4D14"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/FEA7D552"));
    Wait(30.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/A4066C17"));
    gv_sensorLZ = gv_lZs[RandomInt(1, 5)];
    autoA2478EE6_ae = gv_sensorcount;
    autoA2478EE6_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoA2478EE6_ai >= 0 && lv_loopint <= autoA2478EE6_ae) || (autoA2478EE6_ai <= 0 && lv_loopint >= autoA2478EE6_ae) ) ; lv_loopint += autoA2478EE6_ai ) {
        gv_sensorset[lv_loopint] = false;
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_sensorLZ), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FB634DA6"));
    gv_missionping = PingLastCreated();
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/B1D69FF1") + IntToText(gv_sensorcount) + StringExternal("Param/Value/151563DC")));
    ObjectiveSetDescription(gv_mainObj, (IntToText(gv_sensorcount) + StringExternal("Param/Value/46AFA85E")));
    TimerStart(gv_missiontimer, (315.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 5.0)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(gv_sensorLZ));
    lv_droppod = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
    Wait(5.0, c_timeGame);
    UnitKill(lv_droppod);
    auto2982CA9D_ae = gv_sensorcount;
    auto2982CA9D_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto2982CA9D_ai >= 0 && lv_loopint <= auto2982CA9D_ae) || (auto2982CA9D_ai <= 0 && lv_loopint >= auto2982CA9D_ae) ) ; lv_loopint += auto2982CA9D_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BMDD", 0, 0, RegionGetCenter(gv_sensorLZ));
        UnitGroupAdd(gv_simpleMissionItems, UnitLastCreated());
    }
    TriggerEnable(gt_SensorTimeout, true);
    TriggerEnable(gt_AcquireSensor, true);
    TriggerEnable(gt_PlaceSensor, true);
    libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_sensorLZ));
    gv_sensorbeacon = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    UnitRemove(lv_droppod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sensors_Init () {
    gt_Sensors = TriggerCreate("gt_Sensors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire Sensor
//--------------------------------------------------------------------------------------------------
bool gt_AcquireSensor_Func (bool testConds, bool runActions) {
    int auto82B6A6DC_ae;
    int auto82B6A6DC_ai;
    unitgroup autoBCF4A2C9_g;
    int autoBCF4A2C9_u;

    // Variable Declarations
    int lv_loopint;
    unit lv_unit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "BMDD"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_missionping);
    libNtve_gf_KillModel(gv_sensorbeacon);
    auto82B6A6DC_ae = gv_sensorcount;
    auto82B6A6DC_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto82B6A6DC_ai >= 0 && lv_loopint <= auto82B6A6DC_ae) || (auto82B6A6DC_ai <= 0 && lv_loopint >= auto82B6A6DC_ae) ) ; lv_loopint += auto82B6A6DC_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingnumeral[lv_loopint], RegionGetCenter(gv_sensorregion[lv_loopint]), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/51A024E3") + IntToText(lv_loopint)));
        gv_sensorpings[lv_loopint] = PingLastCreated();
    }
    autoBCF4A2C9_g = gv_simpleMissionItems;
    autoBCF4A2C9_u = 1;
    for ( ; autoBCF4A2C9_u <= UnitGroupCount(autoBCF4A2C9_g, c_unitCountAll) ; autoBCF4A2C9_u += BoolToInt(lv_unit == UnitGroupUnit(autoBCF4A2C9_g, autoBCF4A2C9_u)) ) {
        lv_unit = UnitGroupUnit(autoBCF4A2C9_g, autoBCF4A2C9_u);
        gf_MissionItemPingAddItem(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireSensor_Init () {
    gt_AcquireSensor = TriggerCreate("gt_AcquireSensor_Func");
    TriggerEnable(gt_AcquireSensor, false);
    TriggerAddEventUnitInventoryChange(gt_AcquireSensor, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Place Sensor
//--------------------------------------------------------------------------------------------------
bool gt_PlaceSensor_Func (bool testConds, bool runActions) {
    int auto3881A0F8_ae;
    int auto3881A0F8_ai;
    int auto8A8EF5DF_ae;
    int auto8A8EF5DF_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_inaregion;
    bool lv_allsensorsset;

    // Variable Initialization
    lv_allsensorsset = true;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "BMDD"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3881A0F8_ae = gv_sensorcount;
    auto3881A0F8_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto3881A0F8_ai >= 0 && lv_loopint <= auto3881A0F8_ae) || (auto3881A0F8_ai <= 0 && lv_loopint >= auto3881A0F8_ae) ) ; lv_loopint += auto3881A0F8_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), gv_sensorregion[lv_loopint]) == true) && (gv_sensorset[lv_loopint] == false)) {
            gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
            UnitGroupRemove(gv_simpleMissionItems, EventUnitInventoryItem());
            UnitRemove(EventUnitInventoryItem());
            gv_sensorset[lv_loopint] = true;
            lv_inaregion = true;
            PingDestroy(gv_sensorpings[lv_loopint]);
            gf_MissionText((StringExternal("Param/Value/2C5B31E6") + IntToText(lv_loopint) + StringExternal("Param/Value/34B49083")));
            SoundPlayOnUnit(SoundLink("UI_Bnet_MatchCountdown3", -1), PlayerGroupAll(), UnitInventoryUnit(EventUnitInventoryItem()), 0.0, 100.0, 0.0);
        }

    }
    if ((lv_inaregion == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/870502E8"));
    }

    auto8A8EF5DF_ae = gv_sensorcount;
    auto8A8EF5DF_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto8A8EF5DF_ai >= 0 && lv_loopint <= auto8A8EF5DF_ae) || (auto8A8EF5DF_ai <= 0 && lv_loopint >= auto8A8EF5DF_ae) ) ; lv_loopint += auto8A8EF5DF_ai ) {
        if ((gv_sensorset[lv_loopint] == false)) {
            lv_allsensorsset = false;
        }

    }
    if ((lv_allsensorsset == true)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(25, StringExternal("Param/Value/3FCFAFD8"), -1);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TriggerEnable(gt_SensorTimeout, false);
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(4.0, c_timeGame);
        TriggerExecute(gt_Chapter1Fear, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlaceSensor_Init () {
    gt_PlaceSensor = TriggerCreate("gt_PlaceSensor_Func");
    TriggerEnable(gt_PlaceSensor, false);
    TriggerAddEventUnitInventoryChange(gt_PlaceSensor, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sensor Timeout
//--------------------------------------------------------------------------------------------------
bool gt_SensorTimeout_Func (bool testConds, bool runActions) {
    int autoF54758C0_ae;
    int autoF54758C0_ai;
    unitgroup auto64CAFF5B_g;
    int auto64CAFF5B_u;

    // Variable Declarations
    int lv_loopint;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_AcquireSensor, false);
    TriggerEnable(gt_PlaceSensor, false);
    gf_SkipifOver();
    if ((TriggerIsEnabled(gt_Sensors) == true)) {
        PingDestroy(gv_missionping);
        libNtve_gf_KillModel(gv_sensorbeacon);
    }

    autoF54758C0_ae = gv_sensorcount;
    autoF54758C0_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoF54758C0_ai >= 0 && lv_loopint <= autoF54758C0_ae) || (autoF54758C0_ai <= 0 && lv_loopint >= autoF54758C0_ae) ) ; lv_loopint += autoF54758C0_ai ) {
        if ((gv_sensorset[lv_loopint] == false)) {
            PingDestroy(gv_sensorpings[lv_loopint]);
        }

    }
    auto64CAFF5B_g = gv_simpleMissionItems;
    auto64CAFF5B_u = 1;
    for ( ; auto64CAFF5B_u <= UnitGroupCount(auto64CAFF5B_g, c_unitCountAll) ; auto64CAFF5B_u += BoolToInt(lv_unit == UnitGroupUnit(auto64CAFF5B_g, auto64CAFF5B_u)) ) {
        lv_unit = UnitGroupUnit(auto64CAFF5B_g, auto64CAFF5B_u);
        gf_MissionItemPingRemoveItem(lv_unit);
        UnitRemove(lv_unit);
    }
    gf_MissionText(StringExternal("Param/Value/8110F7E8"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    Wait(4.0, c_timeGame);
    gf_FailMission(12, StringExternal("Param/Value/095C7D55"), 3);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_Chapter1Fear, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SensorTimeout_Init () {
    gt_SensorTimeout = TriggerCreate("gt_SensorTimeout_Func");
    TriggerEnable(gt_SensorTimeout, false);
    TriggerAddEventTimer(gt_SensorTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gourmand
//--------------------------------------------------------------------------------------------------
bool gt_Gourmand_Func (bool testConds, bool runActions) {
    int autoA0E367BE_ae;
    int autoA0E367BE_ai;
    int auto5E821372_n;
    int auto5E821372_i;

    // Variable Declarations
    unit lv_droppod;
    int lv_loopint;
    int lv_gourmands;

    // Variable Initialization
    lv_gourmands = 1;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((gv_missioncomplete[1] == true) && (gv_missioncomplete[2] == true))) {
        Wait(1.0, c_timeGame);
    }
    gf_ResetMissionComplete();
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    gf_MissionText(StringExternal("Param/Value/BA60D561"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E02FCAEE"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    TimerStart(gv_missiontimer, gv_c0GOURMANDDURATION, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    if ((gv_gamemode >= 2)) {
        lv_gourmands = (lv_gourmands + (gv_gamemode - 1));
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/629601BF"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/A518947F"));
    }
    else {
        ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/91E107B6"));
        ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/F884F678"));
    }
    autoA0E367BE_ae = lv_gourmands;
    autoA0E367BE_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoA0E367BE_ai >= 0 && lv_loopint <= autoA0E367BE_ae) || (autoA0E367BE_ai <= 0 && lv_loopint >= autoA0E367BE_ae) ) ; lv_loopint += autoA0E367BE_ai ) {
        gf_SpawnUndead(1, "Gourmand", 1);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 49.41), 4.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A4F78E50"));
        PingSetUnit(PingLastCreated(), UnitLastCreated());
    }
    auto5E821372_n = FixedToInt((gv_c0GOURMANDDURATION / gv_c0GOURMANDINTERVAL));
    for (auto5E821372_i = 1; auto5E821372_i <= auto5E821372_n; auto5E821372_i += 1) {
        UnitGroupLoopBegin(UnitGroup("Gourmand", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 49.41), 4.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4FAC10DF"));
            PingSetUnit(PingLastCreated(), UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        if ((UnitGroupCount(UnitGroup("Gourmand", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            break;
        }

        Wait(gv_c0GOURMANDINTERVAL, c_timeGame);
    }
    if ((UnitGroupCount(UnitGroup("Gourmand", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        gf_SucceedMission(25, StringExternal("Param/Value/8DF1AD29"), -1);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    }
    else {
        gf_FailMission(5, StringExternal("Param/Value/1C1BB2ED"), 1);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    Wait(4.0, c_timeGame);
    TriggerExecute(gt_Chapter1Fear, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Gourmand_Init () {
    gt_Gourmand = TriggerCreate("gt_Gourmand_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 1 - Fear
//--------------------------------------------------------------------------------------------------
bool gt_Chapter1Fear_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TCPTimeout, false);
    TriggerEnable(gt_AcquireSentryGun, false);
    TriggerEnable(gt_PlaceSentryGun, false);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/7DABD0FF"));
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/B185CE0D"));
    Wait(4.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ChapterIntermissionOff();
    TriggerEnable(gt_UndeadSpawning1, true);
    if ((RandomInt(0, 1) == 1) && (PlayerGroupCount(gv_players) >= 4)) {
        TriggerExecute(gt_TCPOps, true, false);
    }
    else {
        TriggerSendEvent("Farmer Akma");
    }
    gf_SetNewLighting("UA3Night", 600.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter1Fear_Init () {
    gt_Chapter1Fear = TriggerCreate("gt_Chapter1Fear_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Akma Work
//--------------------------------------------------------------------------------------------------
bool gt_FarmerAkmaWork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point[4] lv_workspots;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_farmerakma) == true)) {
        lv_workspots[1] = PointFromId(326);
        lv_workspots[2] = PointFromId(327);
        lv_workspots[3] = PointFromId(328);
        if ((RandomInt(1, 4) == 1)) {
            UnitIssueOrder(gv_farmerakma, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(5))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(gv_farmerakma, OrderTargetingPoint(AbilityCommand("move", 0), lv_workspots[RandomInt(1, 3)]), c_orderQueueReplace);
        }
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerAkmaWork_Init () {
    gt_FarmerAkmaWork = TriggerCreate("gt_FarmerAkmaWork_Func");
    TriggerEnable(gt_FarmerAkmaWork, false);
    TriggerAddEventTimePeriodic(gt_FarmerAkmaWork, 30.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Akma
//--------------------------------------------------------------------------------------------------
bool gt_FarmerAkma_Func (bool testConds, bool runActions) {
    int init_i;

    int autoE5731956_ae;
    int autoE5731956_ai;

    // Variable Declarations
    int lv_int;
    bool[9] lv_siloSet;
    bool[9] lv_siloNotSet;
    int lv_randomSilo;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_siloNotSet[init_i] = true;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_silos[1] = RegionFromId(32);
    gv_silos[2] = RegionFromId(33);
    gv_silos[3] = RegionFromId(34);
    gv_silos[4] = RegionFromId(35);
    gv_silos[5] = RegionFromId(36);
    gv_silos[6] = RegionFromId(37);
    gv_silos[7] = RegionFromId(38);
    gv_silos[8] = RegionFromId(39);
    if ((gv_gamemode <= 2)) {
        gv_silocount = 5;
    }
    else if ((gv_gamemode == 3)) {
        gv_silocount = 6;
    }
    else if ((gv_gamemode == 4)) {
        gv_silocount = 7;
    }
    else if ((gv_gamemode == 5)) {
        gv_silocount = 8;
    }
    autoE5731956_ae = gv_silocount;
    autoE5731956_ai = 1;
    lv_int = 1;
    for ( ; ( (autoE5731956_ai >= 0 && lv_int <= autoE5731956_ae) || (autoE5731956_ai <= 0 && lv_int >= autoE5731956_ae) ) ; lv_int += autoE5731956_ai ) {
        while ((lv_siloNotSet[lv_int] == true)) {
            lv_randomSilo = RandomInt(1, 8);
            if ((lv_siloSet[gv_silonextint] == false)) {
                gv_silonext[lv_int] = gv_silos[lv_randomSilo];
                lv_siloSet[lv_randomSilo] = true;
                lv_siloNotSet[lv_int] = false;
            }

            Wait(0.1, c_timeGame);
        }
    }
    gf_MissionText(StringExternal("Param/Value/6E6CA469"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/71ABB1FA"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/8FC496E6"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C746EB8D"));
    Wait(5.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/348B8165"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/EBFAA0F6"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_farmerakma), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/68CE2C01"));
    gv_missionping = PingLastCreated();
    PingSetUnit(gv_missionping, gv_farmerakma);
    TimerStart(gv_missiontimer, 120.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_FarmerAkmaApproach, true);
    TriggerEnable(gt_FarmerAkmaTimeout, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerAkma_Init () {
    gt_FarmerAkma = TriggerCreate("gt_FarmerAkma_Func");
    TriggerAddEventGeneric(gt_FarmerAkma, "Farmer Akma");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Akma Timeout
//--------------------------------------------------------------------------------------------------
bool gt_FarmerAkmaTimeout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FarmerAkmaApproach, false);
    gf_FarmerAkmaEvac();
    PingDestroy(gv_missionping);
    gf_MissionText(StringExternal("Param/Value/28220139"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    Wait(4.0, c_timeGame);
    gf_FailMission(12, StringExternal("Param/Value/61626925"), 7);
    Wait(4.0, c_timeGame);
    if ((RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Raisuli", 1);
        if ((gv_gamemode >= 3)) {
            gf_SpawnUndead(1, "Raisuli", 1);
            gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 2);
            gf_SpawnUndead(1, "Gourmand", 1);
        }

    }
    else {
        gf_SpawnUndead(1, "Bruchus", 1);
        gf_SpawnUndead(2, "Cursed", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "Cursed", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Glutton", 1);
        gf_SpawnUndead(1, "Morbus", 1);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(3, "Cursed", 1);
        gf_SpawnUndead(2, "Cursed", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Glutton", 1);
    }

    TriggerExecute(gt_Ch1Mission2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerAkmaTimeout_Init () {
    gt_FarmerAkmaTimeout = TriggerCreate("gt_FarmerAkmaTimeout_Func");
    TriggerEnable(gt_FarmerAkmaTimeout, false);
    TriggerAddEventTimer(gt_FarmerAkmaTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Akma Approach
//--------------------------------------------------------------------------------------------------
bool gt_FarmerAkmaApproach_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    int lv_integer;
    bool[9] lv_siloset;
    bool lv_silosallset;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FarmerAkmaWork, false);
    TriggerEnable(gt_FarmerAkmaTimeout, false);
    TriggerEnable(gt_FarmerAkmaDeath, true);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    UnitIssueOrder(gv_farmerakma, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitFacePoint(gv_farmerakma, UnitGetPosition(EventUnit()), 0.5);
    gf_MissionText(StringExternal("Param/Value/E7241B03"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5AB87941"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2089A59A"));
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_farmerakma, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    Wait(3.0, c_timeGame);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/14B6A773"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/04F910F3"));
    libNtve_gf_MakeUnitInvulnerable(gv_farmerakma, false);
    TriggerEnable(gt_FarmerAkmaLoop, true);
    UnitGroupAdd(gv_undeadTargetGroup, gv_farmerakma);
    Wait(45.0, c_timeGame);
    SoundPlay(SoundLink("TValerian03MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Raisuli", 1);
        if ((gv_gamemode >= 3)) {
            gf_MissionText(StringExternal("Param/Value/82C0C10F"));
            gf_SpawnUndead(1, "Raisuli", 1);
            gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 2);
            gf_SpawnUndead(1, "Gourmand", 1);
        }
        else {
            gf_MissionText(StringExternal("Param/Value/C75CE520"));
        }
    }
    else {
        gf_MissionText(StringExternal("Param/Value/12BB35F9"));
        gf_SpawnUndead(1, "Bruchus", 1);
        gf_SpawnUndead(2, "Cursed", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "Cursed", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Glutton", 1);
        gf_SpawnUndead(1, "Morbus", 1);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(2, "Cursed", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Glutton", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerAkmaApproach_Init () {
    gt_FarmerAkmaApproach = TriggerCreate("gt_FarmerAkmaApproach_Func");
    TriggerEnable(gt_FarmerAkmaApproach, false);
    TriggerAddEventUnitRange(gt_FarmerAkmaApproach, null, UnitFromId(1328), 3.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Akma Loop
//--------------------------------------------------------------------------------------------------
bool gt_FarmerAkmaLoop_Func (bool testConds, bool runActions) {
    int auto79925AEE_ae;
    int auto79925AEE_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkipifOver();
    if ((libNtve_gf_UnitInRegion(gv_farmerakma, gv_silonext[gv_silonextint]) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_PauseUnit(gv_farmerakma, true);
        gf_MissionText(StringExternal("Param/Value/E94303FC"));
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-tips-biosample.dds", StringExternal("Param/Value/20731AFD"), 75, PlayerGroupAll());
        auto79925AEE_ae = 75;
        auto79925AEE_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto79925AEE_ai >= 0 && lv_loopint <= auto79925AEE_ae) || (auto79925AEE_ai <= 0 && lv_loopint >= auto79925AEE_ae) ) ; lv_loopint += auto79925AEE_ai ) {
            if (((UnitIsAlive(gv_farmerakma) == false) || (gv_gameOver == true))) {
                break;
            }

            libNtve_gf_SetBossBarCurrentValue(1, lv_loopint, true);
            Wait(0.5, c_timeGame);
        }
        libNtve_gf_ShowHideBossBar(false, 1);
        if (((UnitIsAlive(gv_farmerakma) == false) || (gv_gameOver == true))) {
        }
        else {
            gv_silonextint += 1;
            if ((gv_silonextint == gv_silocount)) {
                UnitGroupRemove(gv_undeadTargetGroup, gv_farmerakma);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(gv_farmerakma, false, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
                libNtve_gf_MakeUnitInvulnerable(gv_farmerakma, true);
                libNtve_gf_PauseUnit(gv_farmerakma, false);
                TriggerEnable(gt_FarmerAkmaDeath, false);
                PingDestroy(gv_missionping);
                gf_SucceedMission(40, StringExternal("Param/Value/3E369BCC"), -3);
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                gf_MissionText(StringExternal("Param/Value/98486702"));
                Wait(4.0, c_timeGame);
                gf_MissionText(StringExternal("Param/Value/7AF0A40C"));
                gf_FarmerAkmaEvac();
                TriggerExecute(gt_Ch1Mission2, true, false);
            }
            else {
                libNtve_gf_PauseUnit(gv_farmerakma, false);
                gf_MissionText(StringExternal("Param/Value/E68602A1"));
                Wait(2.0, c_timeGame);
                gf_SucceedMission(12, StringExternal("Param/Value/7B904A5A"), 0);
                TriggerEnable(TriggerGetCurrent(), true);
            }
        }
    }
    else {
        UnitIssueOrder(gv_farmerakma, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_silonext[gv_silonextint])), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerAkmaLoop_Init () {
    gt_FarmerAkmaLoop = TriggerCreate("gt_FarmerAkmaLoop_Func");
    TriggerEnable(gt_FarmerAkmaLoop, false);
    TriggerAddEventTimePeriodic(gt_FarmerAkmaLoop, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Akma Death
//--------------------------------------------------------------------------------------------------
bool gt_FarmerAkmaDeath_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FarmerAkmaLoop, false);
    gf_MissionText(StringExternal("Param/Value/9F61838E"));
    UnitGroupRemove(gv_undeadTargetGroup, gv_farmerakma);
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    PingDestroy(gv_missionping);
    libNtve_gf_ShowHideBossBar(false, 1);
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/12F56640"));
    gf_FailMission(18, StringExternal("Param/Value/1125F468"), 7);
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_FarmerAkmaWife, true);
    TriggerExecute(gt_Ch1Mission2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerAkmaDeath_Init () {
    gt_FarmerAkmaDeath = TriggerCreate("gt_FarmerAkmaDeath_Func");
    TriggerEnable(gt_FarmerAkmaDeath, false);
    TriggerAddEventUnitDied(gt_FarmerAkmaDeath, UnitRefFromVariable("gv_farmerakma"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Akma Wife
//--------------------------------------------------------------------------------------------------
bool gt_FarmerAkmaWife_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((OrderGetTargetUnit(EventUnitOrder()) == UnitFromId(274)))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(UnitFromId(274))) <= 4.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_FarmerAkmaWife, false);
    if ((RandomInt(1, gv_gamemode) == 1)) {
        gf_MissionText(StringExternal("Param/Value/91A777D1"));
        Wait(2.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/349E27B5"));
        Wait(1.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/B2B94AE0"));
        Wait(2.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/12CEE3B9"));
        Wait(1.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/F4CD67F7"));
        gf_FarmerAkmaEvac();
        Wait(2.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/600DA0CA"));
        Wait(2.0, c_timeGame);
        gf_SucceedMission(4, StringExternal("Param/Value/367BD7DF"), 0);
    }
    else {
        gf_MissionText(StringExternal("Param/Value/81091244"));
        Wait(1.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/9BF095C0"));
        gf_FarmerAkmaWifeTurn();
        Wait(1.0, c_timeGame);
        gf_MissionText(StringExternal("Param/Value/48993446"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerAkmaWife_Init () {
    gt_FarmerAkmaWife = TriggerCreate("gt_FarmerAkmaWife_Func");
    TriggerEnable(gt_FarmerAkmaWife, false);
    TriggerAddEventUnitOrder(gt_FarmerAkmaWife, null, AbilityCommand("move", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: TCP Ops
//--------------------------------------------------------------------------------------------------
bool gt_TCPOps_Func (bool testConds, bool runActions) {
    int auto0081976A_ae;
    int auto0081976A_ai;
    int auto7B316F5D_ae;
    int auto7B316F5D_ai;

    // Variable Declarations
    int lv_loopint;
    unitgroup lv_group;
    string[3] lv_policetype;
    int lv_policenumber;
    int lv_i;
    unit lv_unit;

    // Variable Initialization
    lv_policenumber = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_policetype[0] = "PoliceOfficer";
    lv_policetype[1] = "PoliceOfficerShotgun";
    if ((gv_gamemode >= 4)) {
        lv_policenumber += 1;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_FarmerAkmaEvac();
    gf_MissionText(StringExternal("Param/Value/988F3EAD"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/FC39A6A5"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/E868A632"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/1DCCB189"));
    gv_tCPregion[1] = RegionFromId(114);
    gv_tCPregion[2] = RegionFromId(115);
    gv_tCPregion[3] = RegionFromId(116);
    gv_tCPregion[4] = RegionFromId(117);
    gv_tCPSpawns[1] = RegionFromId(118);
    gv_tCPSpawns[2] = RegionFromId(121);
    gv_tCPSpawns[3] = RegionFromId(119);
    gv_tCPSpawns[4] = RegionFromId(120);
    auto0081976A_ae = 4;
    auto0081976A_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto0081976A_ai >= 0 && lv_loopint <= auto0081976A_ae) || (auto0081976A_ai <= 0 && lv_loopint >= auto0081976A_ae) ) ; lv_loopint += auto0081976A_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), gv_pingnumeral[lv_loopint], RegionGetCenter(gv_tCPregion[lv_loopint]), ColorWithAlpha(100.00, 50.20, 0.00, 49.02), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/424637D4") + IntToText(lv_loopint)));
        gv_sensorpings[lv_loopint] = PingLastCreated();
        lv_group = UnitGroup("PoliceOfficer", 0, gv_tCPregion[lv_loopint], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_group, UnitGroup("PoliceOfficerShotgun", 0, gv_tCPregion[lv_loopint], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_i = UnitGroupCount(lv_group, c_unitCountAlive);
        if ((lv_i < lv_policenumber)) {
            auto7B316F5D_ae = lv_policenumber;
            auto7B316F5D_ai = 1;
            lv_i = (lv_i + 1);
            for ( ; ( (auto7B316F5D_ai >= 0 && lv_i <= auto7B316F5D_ae) || (auto7B316F5D_ai <= 0 && lv_i >= auto7B316F5D_ae) ) ; lv_i += auto7B316F5D_ai ) {
                UnitCreate(1, lv_policetype[RandomInt(0, 1)], 0, 0, RegionRandomPoint(gv_tCPregion[lv_loopint]), libNtve_gf_RandomAngle());
                lv_unit = UnitLastCreated();
                libNtve_gf_SendActorMessageToUnit(lv_unit, "SetOpacity 0.000000 0.000000 SpawnIn");
                libNtve_gf_SendActorMessageToUnit(lv_unit, "ClearOpacity 1.000000 SpawnIn");
            }
        }

        Wait(0.1, c_timeGame);
    }
    TriggerEnable(gt_TCPcontainment, true);
    Wait(40.0, c_timeGame);
    TriggerEnable(gt_TCPFinalOut, true);
    gv_tCPspawning = true;
    TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(RandomFixed(5.0, 8.0), c_timeGame);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Glutton", (gv_spawnCount / 2));
    gf_SpawnTCPzombie(RandomInt(1, 4), "Glutton", (gv_spawnCount / 2));
    Wait(RandomFixed(10.0, 20.0), c_timeGame);
    gf_SpawnTCPzombie(RandomInt(1, 4), "InfestedCivilian", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "InfestedCivilian", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "InfestedCivilian", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Glutton", (gv_spawnCount / 2));
    Wait(RandomFixed(20.0, 35.0), c_timeGame);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Charger", 1);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Glutton", (gv_spawnCount / 2));
    if ((gv_gamemode >= 2)) {
        gf_SpawnTCPzombie(RandomInt(1, 4), "Charger", 2);
        gf_SpawnTCPzombie(RandomInt(1, 4), "Charger", 1);
    }
    else {
        gf_SpawnTCPzombie(RandomInt(1, 4), "InfestedCivilian", gv_spawnCount);
        gf_SpawnTCPzombie(RandomInt(1, 4), "InfestedCivilian", gv_spawnCount);
    }
    Wait(RandomFixed(45.0, 60.0), c_timeGame);
    gf_SpawnTCPzombie(RandomInt(1, 4), "InfestedCivilian", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Risen", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Turned", gv_spawnCount);
    if ((gv_gamemode >= 2)) {
        gf_SpawnTCPzombie(RandomInt(1, 4), "Bruchus", 1);
        gf_SpawnTCPzombie(RandomInt(1, 4), "Charger", 1);
        gf_SpawnTCPzombie(RandomInt(1, 4), "Glutton", (gv_spawnCount / 2));
    }

    Wait(RandomFixed(20.0, 30.0), c_timeGame);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Bruchus", 1);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Bruchus", 1);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Glutton", (gv_spawnCount / 2));
    Wait(RandomFixed(25.0, 42.0), c_timeGame);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Cursed", 1);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Cursed", 1);
    gf_SpawnTCPzombie(RandomInt(1, 4), "InfestedCivilian", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Risen", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Turned", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Glutton", (gv_spawnCount / 2));
    if ((gv_gamemode >= 3)) {
        gf_SpawnTCPzombie(RandomInt(1, 4), "Cursed", 1);
        gf_SpawnTCPzombie(RandomInt(1, 4), "Cursed", 1);
    }

    Wait(RandomFixed(40.0, 60.0), c_timeGame);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Hunter", 1);
    gf_SpawnTCPzombie(RandomInt(1, 4), "InfestedCivilian", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Risen", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Turned", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Zombie", gv_spawnCount);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Charger", 2);
    gf_SpawnTCPzombie(RandomInt(1, 4), "Charger", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnTCPzombie(RandomInt(1, 4), "Cursed", 1);
        gf_SpawnTCPzombie(RandomInt(1, 4), "Gourmand", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TCPOps_Init () {
    gt_TCPOps = TriggerCreate("gt_TCPOps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TCP containment
//--------------------------------------------------------------------------------------------------
bool gt_TCPcontainment_Func (bool testConds, bool runActions) {
    int autoF1E83316_ae;
    int autoF1E83316_ai;
    int autoDAC7117C_ae;
    int autoDAC7117C_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_loopint2;
    bool lv_allfailed;

    // Variable Initialization
    lv_allfailed = true;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_tCPhostiles, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF1E83316_ae = 4;
    autoF1E83316_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoF1E83316_ai >= 0 && lv_loopint <= autoF1E83316_ae) || (autoF1E83316_ai <= 0 && lv_loopint >= autoF1E83316_ae) ) ; lv_loopint += autoF1E83316_ai ) {
        if ((EventUnitRegion() == gv_tCPregion[lv_loopint]) && (gv_tCPfailed[lv_loopint] == false) && (UnitGroupCount(UnitGroup(null, 0, gv_tCPregion[lv_loopint], UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) == 0) && ((UnitGroupCount(UnitGroupFilterRegion(gv_heroesGroup, gv_tCPregion[lv_loopint], 0), c_unitCountAlive) * 4) <= UnitGroupCount(UnitGroupFilterRegion(gv_tCPhostiles, gv_tCPregion[lv_loopint], 0), c_unitCountAlive))) {
            gv_tCPfailed[lv_loopint] = true;
            gf_FailMission(4, (StringExternal("Param/Value/06C9438A") + (IntToText(lv_loopint) + StringExternal("Param/Value/DA7EED68"))), 2);
            PingDestroy(gv_sensorpings[lv_loopint]);
            autoDAC7117C_ae = 4;
            autoDAC7117C_ai = 1;
            lv_loopint2 = 1;
            for ( ; ( (autoDAC7117C_ai >= 0 && lv_loopint2 <= autoDAC7117C_ae) || (autoDAC7117C_ai <= 0 && lv_loopint2 >= autoDAC7117C_ae) ) ; lv_loopint2 += autoDAC7117C_ai ) {
                if ((gv_tCPfailed[lv_loopint2] == false)) {
                    lv_allfailed = false;
                }

            }
            if ((lv_allfailed == true)) {
                TriggerEnable(TriggerGetCurrent(), false);
                TriggerEnable(gt_TCPFinalOut, false);
                TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
                ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
                Wait(5.0, c_timeGame);
                gv_tCPspawning = false;
                TriggerExecute(gt_Ch1Mission2, true, false);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TCPcontainment_Init () {
    gt_TCPcontainment = TriggerCreate("gt_TCPcontainment_Func");
    TriggerEnable(gt_TCPcontainment, false);
    TriggerAddEventUnitRegion(gt_TCPcontainment, null, RegionFromId(114), false);
    TriggerAddEventUnitRegion(gt_TCPcontainment, null, RegionFromId(115), false);
    TriggerAddEventUnitRegion(gt_TCPcontainment, null, RegionFromId(116), false);
    TriggerAddEventUnitRegion(gt_TCPcontainment, null, RegionFromId(117), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TCP Final Out
//--------------------------------------------------------------------------------------------------
bool gt_TCPFinalOut_Func (bool testConds, bool runActions) {
    int auto568349AF_ae;
    int auto568349AF_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_contained;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TCPcontainment, false);
    gv_tCPspawning = false;
    PingDestroy(gv_sensorpings[1]);
    PingDestroy(gv_sensorpings[2]);
    PingDestroy(gv_sensorpings[3]);
    PingDestroy(gv_sensorpings[4]);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    auto568349AF_ae = 4;
    auto568349AF_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto568349AF_ai >= 0 && lv_loopint <= auto568349AF_ae) || (auto568349AF_ai <= 0 && lv_loopint >= auto568349AF_ae) ) ; lv_loopint += auto568349AF_ai ) {
        if ((gv_tCPfailed[lv_loopint] == false)) {
            lv_contained = (lv_contained + 1);
        }

    }
    gf_SucceedMission((lv_contained * 17), (IntToText(lv_contained) + StringExternal("Param/Value/3B904418")), (0 - lv_contained));
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(5.0, c_timeGame);
    TriggerExecute(gt_Ch1Mission2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TCPFinalOut_Init () {
    gt_TCPFinalOut = TriggerCreate("gt_TCPFinalOut_Func");
    TriggerEnable(gt_TCPFinalOut, false);
    TriggerAddEventTimer(gt_TCPFinalOut, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch1 Mission 2
//--------------------------------------------------------------------------------------------------
bool gt_Ch1Mission2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(40.0, 90.0), c_timeGame);
    gf_SkipifOver();
    TriggerExecute(gt_DestroyedCity, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch1Mission2_Init () {
    gt_Ch1Mission2 = TriggerCreate("gt_Ch1Mission2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyed City
//--------------------------------------------------------------------------------------------------
bool gt_DestroyedCity_Func (bool testConds, bool runActions) {
    int auto27E5C81F_ae;
    int auto27E5C81F_ai;
    unitgroup auto5E2858F1_g;
    int auto5E2858F1_u;
    unitgroup auto8C4998A6_g;
    int auto8C4998A6_u;

    // Variable Declarations
    int lv_loopint;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_findsurvivorchat1[1] = StringExternal("Param/Value/CB83D9DE");
    gv_findsurvivorchat1[2] = StringExternal("Param/Value/589B6937");
    gv_findsurvivorchat1[3] = StringExternal("Param/Value/59BEE627");
    gv_findsurvivorchat1[4] = StringExternal("Param/Value/F8E39128");
    gv_findsurvivorchat1[5] = StringExternal("Param/Value/6FE30A83");
    gv_findsurvivorchat2[1] = StringExternal("Param/Value/898E7DB4");
    gv_findsurvivorchat2[2] = StringExternal("Param/Value/C54E7038");
    gv_findsurvivorchat2[3] = StringExternal("Param/Value/4133C7D8");
    gv_findsurvivorchat2[4] = StringExternal("Param/Value/B69E89EA");
    gv_findsurvivorchat2[5] = StringExternal("Param/Value/565EC5D7");
    auto27E5C81F_ae = RandomInt(10, 12);
    auto27E5C81F_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto27E5C81F_ai >= 0 && lv_loopint <= auto27E5C81F_ae) || (auto27E5C81F_ai <= 0 && lv_loopint >= auto27E5C81F_ae) ) ; lv_loopint += auto27E5C81F_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_survivors, UnitLastCreatedGroup());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    }
    UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(gv_survivors, UnitLastCreatedGroup());
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(gv_survivors, UnitLastCreatedGroup());
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    UnitCreate(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(gv_survivors, UnitLastCreatedGroup());
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    UnitCreate(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(27)), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(gv_survivors, UnitLastCreatedGroup());
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    auto5E2858F1_g = gv_survivors;
    auto5E2858F1_u = 1;
    for ( ; auto5E2858F1_u <= UnitGroupCount(auto5E2858F1_g, c_unitCountAll) ; auto5E2858F1_u += BoolToInt(lv_unit == UnitGroupUnit(auto5E2858F1_g, auto5E2858F1_u)) ) {
        lv_unit = UnitGroupUnit(auto5E2858F1_g, auto5E2858F1_u);
        libNtve_gf_PauseUnit(lv_unit, true);
        libNtve_gf_MakeUnitInvulnerable(lv_unit, true);
    }
    gf_MissionText(StringExternal("Param/Value/D3098CE0"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/87D89234"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/98CA685A"));
    Wait(7.0, c_timeGame);
    auto8C4998A6_g = gv_survivors;
    auto8C4998A6_u = 1;
    for ( ; auto8C4998A6_u <= UnitGroupCount(auto8C4998A6_g, c_unitCountAll) ; auto8C4998A6_u += BoolToInt(lv_unit == UnitGroupUnit(auto8C4998A6_g, auto8C4998A6_u)) ) {
        lv_unit = UnitGroupUnit(auto8C4998A6_g, auto8C4998A6_u);
        libNtve_gf_PauseUnit(lv_unit, false);
        libNtve_gf_MakeUnitInvulnerable(lv_unit, false);
    }
    TriggerEnable(gt_FindSurvivor, true);
    TriggerEnable(gt_RescueSurvivor, true);
    TriggerEnable(gt_SurvivorDies, true);
    TriggerEnable(gt_DestroyedCityEnd, true);
    TriggerEnable(gt_EnterDestroyedCity, true);
    TriggerEnable(gt_EnterFiringLine, true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/E2088998"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/CC425B6F"));
    TimerStart(gv_missiontimer, 300.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(27)), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3565FB4E"));
    gv_missionping = PingLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyedCity_Init () {
    gt_DestroyedCity = TriggerCreate("gt_DestroyedCity_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Destroyed City
//--------------------------------------------------------------------------------------------------
bool gt_EnterDestroyedCity_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_players, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_missionping);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(25)), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EB0C4584"));
    gv_missionping = PingLastCreated();
    SoundPlay(SoundLink("TTychus04MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/6120187B"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/EE1FF992"));
    Wait(18.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/26F3DF98"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/8102A3BF"));
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(4, "Bruchus", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Glutton", 1);
        gf_SpawnUndead(1, "Morbus", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterDestroyedCity_Init () {
    gt_EnterDestroyedCity = TriggerCreate("gt_EnterDestroyedCity_Func");
    TriggerEnable(gt_EnterDestroyedCity, false);
    TriggerAddEventUnitRegion(gt_EnterDestroyedCity, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Firing Line
//--------------------------------------------------------------------------------------------------
bool gt_EnterFiringLine_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_MissionText(StringExternal("Param/Value/C711674E"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/2DCD8BC7"));
    Wait(5.0, c_timeGame);
    gf_SucceedMission(5, StringExternal("Param/Value/43B7FF0C"), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterFiringLine_Init () {
    gt_EnterFiringLine = TriggerCreate("gt_EnterFiringLine_Func");
    TriggerEnable(gt_EnterFiringLine, false);
    TriggerAddEventUnitRegion(gt_EnterFiringLine, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Find Survivor
//--------------------------------------------------------------------------------------------------
bool gt_FindSurvivor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_playerHeroes[EventPlayer()]))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_survivors, OrderGetTargetUnit(EventUnitOrder())) == true))) {
            return false;
        }

        if (!((UnitGetOwner(OrderGetTargetUnit(EventUnitOrder())) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder()))) <= 4.0)) {
        gf_MissionText(StringExternal("Param/Value/82F20D72"));
        UnitSetOwner(OrderGetTargetUnit(EventUnitOrder()), EventPlayer(), true);
        UnitSelect(OrderGetTargetUnit(EventUnitOrder()), EventPlayer(), true);
        UnitIssueOrder(OrderGetTargetUnit(EventUnitOrder()), OrderTargetingUnit(AbilityCommand("move", 0), EventUnit()), c_orderQueueReplace);
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + gv_findsurvivorchat1[RandomInt(1, 5)]), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
        Wait(2.0, c_timeGame);
        TextTagCreate((StringExternal("Param/Value/B95D74EC") + gv_findsurvivorchat2[RandomInt(1, 5)]), 24, UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 1.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), OrderGetTargetUnit(EventUnitOrder()), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/7EACF90D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FindSurvivor_Init () {
    gt_FindSurvivor = TriggerCreate("gt_FindSurvivor_Func");
    TriggerEnable(gt_FindSurvivor, false);
    TriggerAddEventUnitOrder(gt_FindSurvivor, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_FindSurvivor, null, AbilityCommand("move", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Survivor
//--------------------------------------------------------------------------------------------------
bool gt_RescueSurvivor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_survivors, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkipifOver();
    PingDestroy(gv_missionping);
    gf_SucceedMission(11, StringExternal("Param/Value/637DD35D"), 0);
    UnitGroupRemove(gv_survivors, EventUnit());
    UnitGroupRemove(gv_undeadTargetGroup, EventUnit());
    UnitSetOwner(EventUnit(), 0, true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_cityRegions[RandomInt(1, 2)])), c_orderQueueReplace);
    gv_survivorsrescued = (gv_survivorsrescued + 1);
    if ((UnitGroupCount(gv_survivors, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_DestroyedCityEnd, false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueSurvivor_Init () {
    gt_RescueSurvivor = TriggerCreate("gt_RescueSurvivor_Func");
    TriggerEnable(gt_RescueSurvivor, false);
    TriggerAddEventUnitRegion(gt_RescueSurvivor, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_RescueSurvivor, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survivor Dies
//--------------------------------------------------------------------------------------------------
bool gt_SurvivorDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_survivors, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_FailMission(2, StringExternal("Param/Value/00021BFC"), 0);
    UnitGroupRemove(gv_survivors, EventUnit());
    UnitGroupRemove(gv_undeadTargetGroup, EventUnit());
    if ((UnitGroupCount(gv_survivors, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_DestroyedCityEnd, false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivorDies_Init () {
    gt_SurvivorDies = TriggerCreate("gt_SurvivorDies_Func");
    TriggerEnable(gt_SurvivorDies, false);
    TriggerAddEventUnitDied(gt_SurvivorDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroyed City End
//--------------------------------------------------------------------------------------------------
bool gt_DestroyedCityEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_FindSurvivor, false);
    TriggerEnable(gt_RescueSurvivor, false);
    TriggerEnable(gt_SurvivorDies, false);
    gf_SkipifOver();
    PingDestroy(gv_missionping);
    TimerPause(gv_missiontimer, true);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((UnitGroupCount(gv_survivors, c_unitCountAlive) >= 1)) {
        UnitGroupLoopBegin(gv_survivors);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zombie", c_unitCreateIgnorePlacement, 14, UnitGetPosition(UnitGroupLoopCurrent()));
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }

    if ((gv_survivorsrescued >= 1)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        SoundPlay(SoundLink("TValerian02BMusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        gv_infestationLevel = (gv_infestationLevel + 7);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        SoundPlay(SoundLink("TTychus03MusicIntroABC", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    gf_MissionText(StringExternal("Param/Value/4D47969A"));
    Wait(7.0, c_timeGame);
    if ((gv_survivorsrescued >= 7)) {
        gv_infestationLevel = (gv_infestationLevel - 3);
        gf_MissionText(StringExternal("Param/Value/E419F23D"));
    }

    TriggerExecute(gt_Ch1Mission3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyedCityEnd_Init () {
    gt_DestroyedCityEnd = TriggerCreate("gt_DestroyedCityEnd_Func");
    TriggerEnable(gt_DestroyedCityEnd, false);
    TriggerAddEventTimer(gt_DestroyedCityEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch1 Mission 3
//--------------------------------------------------------------------------------------------------
bool gt_Ch1Mission3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(40.0, 90.0), c_timeGame);
    gf_SkipifOver();
    TriggerExecute(gt_BattleConvoy, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch1Mission3_Init () {
    gt_Ch1Mission3 = TriggerCreate("gt_Ch1Mission3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Convoy
//--------------------------------------------------------------------------------------------------
bool gt_BattleConvoy_Func (bool testConds, bool runActions) {
    int autoBBD6B5B6_ae;
    int autoBBD6B5B6_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_convoyset = RandomInt(1, 3);
    if ((gv_convoyset == 1)) {
        gv_convoystartend[1][1] = RegionFromId(17);
        gv_convoyroutes[1][1] = PointFromId(1776);
        gv_convoyroutes[1][2] = PointFromId(1777);
        gv_convoyroutes[1][3] = PointFromId(1778);
        gv_convoyroutes[1][4] = PointFromId(1779);
        gv_convoyroutes[1][5] = PointFromId(1780);
        gv_convoyroutes[1][6] = PointFromId(1781);
        gv_convoyroutes[1][7] = PointFromId(1782);
        gv_convoyroutes[1][8] = PointFromId(1783);
        gv_convoyroutes[1][9] = PointFromId(1784);
        gv_convoystartend[1][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    else if ((gv_convoyset == 2)) {
        gv_convoystartend[2][1] = RegionFromId(41);
        gv_convoyroutes[2][1] = PointFromId(1785);
        gv_convoyroutes[2][2] = PointFromId(1786);
        gv_convoyroutes[2][3] = PointFromId(1787);
        gv_convoyroutes[2][4] = PointFromId(1788);
        gv_convoyroutes[2][5] = PointFromId(1789);
        gv_convoyroutes[2][6] = PointFromId(1790);
        gv_convoyroutes[2][7] = PointFromId(1791);
        gv_convoyroutes[2][8] = PointFromId(1792);
        gv_convoyroutes[2][9] = PointFromId(1782);
        gv_convoyroutes[2][10] = PointFromId(1783);
        gv_convoyroutes[2][11] = PointFromId(1784);
        gv_convoystartend[2][2] = RegionFromId(18);
        gv_convoymax = 11;
    }
    else if ((gv_convoyset == 3)) {
        gv_convoystartend[3][1] = RegionFromId(19);
        gv_convoyroutes[3][1] = PointFromId(1793);
        gv_convoyroutes[3][2] = PointFromId(1788);
        gv_convoyroutes[3][3] = PointFromId(1789);
        gv_convoyroutes[3][4] = PointFromId(1790);
        gv_convoyroutes[3][5] = PointFromId(1791);
        gv_convoyroutes[3][6] = PointFromId(1792);
        gv_convoyroutes[3][7] = PointFromId(1782);
        gv_convoyroutes[3][8] = PointFromId(1783);
        gv_convoyroutes[3][9] = PointFromId(1784);
        gv_convoystartend[3][2] = RegionFromId(18);
        gv_convoymax = 9;
    }
    gf_MissionText(StringExternal("Param/Value/29289AFF"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/8D5FBBFD"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/DBE08D4B"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/05A4E708"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(0.00, 50.20, 50.20, 0.00), 7.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/84FE9C84"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5B795161"));
    TriggerEnable(gt_ConvoyUnitDies, true);
    TriggerEnable(gt_ConvoyLoop, true);
    gv_pauseSpawning = true;
    autoBBD6B5B6_ae = 5;
    autoBBD6B5B6_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoBBD6B5B6_ai >= 0 && lv_loopint <= autoBBD6B5B6_ae) || (autoBBD6B5B6_ai <= 0 && lv_loopint >= autoBBD6B5B6_ae) ) ; lv_loopint += autoBBD6B5B6_ai ) {
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistTransport", c_unitCreateIgnorePlacement, 13, RegionGetCenter(gv_convoystartend[gv_convoyset][1]), gv_convoyroutes[gv_convoyset][1]);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        UnitGroupAdd(gv_convoy, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
        if ((lv_loopint == 1)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_convoystartend[gv_convoyset][1]), ColorWithAlpha(0.00, 50.20, 50.20, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EF913FFF"));
            gv_missionping = PingLastCreated();
        }

        Wait(3.0, c_timeGame);
    }
    Wait(RandomFixed(0.0, 8.0), c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(3, "AmmoCase", 0, 0, PointWithOffset(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), -2.0, 2.0));
    TextTagCreate(StringExternal("Param/Value/813695F0"), 24, UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), 3.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitGroupUnit(gv_convoy, 1), 3.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 7.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 5.0);
    TriggerEnable(gt_ConvoyLeave, true);
    gv_pauseSpawning = false;
    Wait(RandomFixed(15.0, 45.0), c_timeGame);
    SoundPlay(SoundLink("THanson03AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Boomer", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(3, "Cursed", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Arachnathid", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Horror", 2);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Lacerti", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattleConvoy_Init () {
    gt_BattleConvoy = TriggerCreate("gt_BattleConvoy_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Loop
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyLoop_Func (bool testConds, bool runActions) {
    int auto2D1FE938_ae;
    int auto2D1FE938_ai;

    // Variable Declarations
    int lv_loopint;
    unit lv_tempunit;
    unit lv_nextunit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_convoynext == 3) && (gv_convoyset == 1) && (gv_convoymessage == false)) {
        gv_convoymessage = true;
        TextTagCreate(StringExternal("Param/Value/895E7AF5"), 24, UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), 3.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), UnitGroupUnit(gv_convoy, 1), 3.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 7.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 5.0);
    }

    if ((((gv_convoynext == 4) && (gv_convoyset == 2)) || ((gv_convoynext == 2) && (gv_convoyset == 3))) && (gv_convoymessage == false)) {
        gv_convoymessage = true;
        TextTagCreate(StringExternal("Param/Value/6EA2C5C2"), 24, UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), 3.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), UnitGroupUnit(gv_convoy, 1), 3.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 7.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 5.0);
    }

    PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), gv_convoyroutes[gv_convoyset][gv_convoynext]) <= 2.0) && (gv_convoyfinal == false)) {
        Wait(2.0, c_timeGame);
        if ((gv_convoynext == gv_convoymax)) {
            gv_convoyfinal = true;
        }
        else {
            gv_convoynext = (gv_convoynext + 1);
        }
    }

    auto2D1FE938_ae = UnitGroupCount(gv_convoy, c_unitCountAll);
    auto2D1FE938_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto2D1FE938_ai >= 0 && lv_loopint <= auto2D1FE938_ae) || (auto2D1FE938_ai <= 0 && lv_loopint >= auto2D1FE938_ae) ) ; lv_loopint += auto2D1FE938_ai ) {
        lv_tempunit = UnitGroupUnit(gv_convoy, lv_loopint);
        if ((gv_convoyfinal == true)) {
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_convoystartend[gv_convoyset][2])), c_orderQueueReplace);
        }
        else {
            if ((lv_loopint == 1)) {
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), gv_convoyroutes[gv_convoyset][gv_convoynext]), c_orderQueueReplace);
            }
            else {
                lv_nextunit = UnitGroupUnit(gv_convoy, (lv_loopint - 1));
                if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), UnitGetPosition(lv_nextunit)) >= 15.0)) {
                    UnitBehaviorAdd(lv_tempunit, "CatchingUp", lv_tempunit, 1);
                }
                else {
                    UnitBehaviorRemove(lv_tempunit, "CatchingUp", 1);
                }
                UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_nextunit), 5.0, AngleBetweenPoints(UnitGetPosition(lv_nextunit), UnitGetPosition(lv_tempunit)))), c_orderQueueReplace);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyLoop_Init () {
    gt_ConvoyLoop = TriggerCreate("gt_ConvoyLoop_Func");
    TriggerEnable(gt_ConvoyLoop, false);
    TriggerAddEventTimePeriodic(gt_ConvoyLoop, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Leave
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyLeave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ConvoyUnitDies, false);
    UnitRemove(EventUnit());
    gf_SucceedMission(20, StringExternal("Param/Value/3413323E"), 0);
    gv_convoyvehiclessafe = (gv_convoyvehiclessafe + 1);
    TriggerEnable(gt_ConvoyUnitDies, true);
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_ConvoyEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyLeave_Init () {
    gt_ConvoyLeave = TriggerCreate("gt_ConvoyLeave_Func");
    TriggerEnable(gt_ConvoyLeave, false);
    TriggerAddEventUnitRegion(gt_ConvoyLeave, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyUnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_convoy, EventUnit());
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_ConvoyEnd, true, false);
        if ((gv_convoyvehiclessafe == 0)) {
            gf_MissionText(StringExternal("Param/Value/F9742FBC"));
            gf_FailMission(15, StringExternal("Param/Value/8F324CBF"), 7);
            return true;
        }

    }

    gf_MissionText(StringExternal("Param/Value/157356F3"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyUnitDies_Init () {
    gt_ConvoyUnitDies = TriggerCreate("gt_ConvoyUnitDies_Func");
    TriggerEnable(gt_ConvoyUnitDies, false);
    TriggerAddEventUnitDied(gt_ConvoyUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy End
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyEnd_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ConvoyLoop, false);
    TriggerEnable(gt_ConvoyUnitDies, false);
    TriggerEnable(gt_ConvoyLeave, false);
    gf_SkipifOver();
    PingDestroy(gv_missionping);
    if ((gv_convoyvehiclessafe >= 3)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_MissionText(StringExternal("Param/Value/7E1CE75E"));
        SoundPlay(SoundLink("TTychus02MusicIntro", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_infestationLevel = (gv_infestationLevel - 3);
    }
    else {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gf_MissionText(StringExternal("Param/Value/E2425F33"));
        SoundPlay(SoundLink("TValerian02AMusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    Wait(7.0, c_timeGame);
    TriggerExecute(gt_Ch1Mission4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyEnd_Init () {
    gt_ConvoyEnd = TriggerCreate("gt_ConvoyEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch1 Mission 4
//--------------------------------------------------------------------------------------------------
bool gt_Ch1Mission4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(10.0, 20.0), c_timeGame);
    gf_SkipifOver();
    gf_Reinforcements();
    Wait(RandomFixed(10.0, 20.0), c_timeGame);
    if ((RandomInt(0, 1) == 1) && (UnitIsAlive(gv_mayor) == true)) {
        TriggerExecute(gt_EscortMayor, true, false);
    }
    else {
        TriggerExecute(gt_EscortCivilians, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch1Mission4_Init () {
    gt_Ch1Mission4 = TriggerCreate("gt_Ch1Mission4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Civilians
//--------------------------------------------------------------------------------------------------
bool gt_EscortCivilians_Func (bool testConds, bool runActions) {
    int auto3FFBC7F2_ae;
    int auto3FFBC7F2_ai;
    int autoF8C732D6_ae;
    int autoF8C732D6_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/AAB7FFCD"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/97F6FF22"));
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/10917A05"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/6D46EEAB"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/796EBB19"));
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, StringExternal("Param/Value/9B11A854"));
    ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/2F3B6C3A"));
    ObjectiveSetState(gv_thirdObj, c_objectiveStateActive);
    ObjectiveSetName(gv_thirdObj, StringExternal("Param/Value/5572AE89"));
    ObjectiveSetDescription(gv_thirdObj, StringExternal("Param/Value/D217A115"));
    TriggerEnable(gt_EscortCiviliansEnd, true);
    TriggerEnable(gt_ApproachMayor, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(7)), ColorWithAlpha(0.00, 50.20, 50.20, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/47EF29E2"));
    gv_missionping = PingLastCreated();
    UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, 0, PointFromId(1797), 225.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalRA");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById CamoNight");
    UnitGroupAdd(gv_rAmayorPSD, UnitLastCreated());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, 0, PointFromId(1798), 255.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalRA");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById CamoNight");
    UnitGroupAdd(gv_rAmayorPSD, UnitLastCreated());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(26)), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D2874949"));
    gv_guslaniping = PingLastCreated();
    TriggerEnable(gt_GuslaniVillageEnter, true);
    auto3FFBC7F2_ae = RandomInt(4, 6);
    auto3FFBC7F2_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto3FFBC7F2_ai >= 0 && lv_loopint <= auto3FFBC7F2_ae) || (auto3FFBC7F2_ai <= 0 && lv_loopint >= auto3FFBC7F2_ae) ) ; lv_loopint += auto3FFBC7F2_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(RegionFromId(26)), libNtve_gf_RandomAngle());
    }
    UnitCreate(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(26)), libNtve_gf_RandomAngle());
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupRemove(gv_wanderers[3], UnitGroupLoopCurrent());
        if ((UnitGroupHasUnit(gv_lNAvailable, UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_guslanicivilians, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    gv_guslanitorescue = UnitGroupCount(gv_guslanicivilians, c_unitCountAlive);
    TriggerEnable(gt_HighlanderLoop, true);
    TriggerEnable(gt_RescueHighlander, true);
    gv_highlanders[1] = RegionFromId(44);
    gv_highlanders[2] = RegionFromId(45);
    gv_highlanders[3] = RegionFromId(46);
    gv_highlanders[4] = RegionFromId(47);
    gv_highlanders[5] = RegionFromId(48);
    gv_highlanders[6] = RegionFromId(49);
    gv_highlanders[7] = RegionFromId(50);
    gv_highlanders[8] = RegionFromId(51);
    autoF8C732D6_ae = 8;
    autoF8C732D6_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoF8C732D6_ai >= 0 && lv_loopint <= autoF8C732D6_ae) || (autoF8C732D6_ai <= 0 && lv_loopint >= autoF8C732D6_ae) ) ; lv_loopint += autoF8C732D6_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(0.00, 50.20, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9F4F5600"));
        gv_highlanderpings[lv_loopint] = PingLastCreated();
    }
    TriggerEnable(gt_HighlanderApproachBuilding, true);
    gf_SpawnUndead(1, "Gargantuan", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead(1, "Horror", 2);
    }

    Wait(60.0, c_timeGame);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    Wait(720.0, c_timeGame);
    if ((TriggerIsEnabled(gt_EscortCiviliansEnd) == true)) {
        gf_SpawnUndead(1, "Ignis", 1);
        gf_SpawnUndead(1, "Ignis", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Shredder", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortCivilians_Init () {
    gt_EscortCivilians = TriggerCreate("gt_EscortCivilians_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach Mayor
//--------------------------------------------------------------------------------------------------
bool gt_ApproachMayor_Func (bool testConds, bool runActions) {
    int autoBBF479B1_ae;
    int autoBBF479B1_ai;
    int auto8EA8F46F_ae;
    int auto8EA8F46F_ai;

    // Variable Declarations
    unit[5] lv_rAescorts;
    int lv_loopint;
    point[5] lv_rALZguardpts;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_rALZguardpts[1] = PointFromId(1800);
    lv_rALZguardpts[2] = PointFromId(1801);
    lv_rALZguardpts[3] = PointFromId(1802);
    lv_rALZguardpts[4] = PointFromId(1803);
    PingDestroy(gv_missionping);
    SoundPlay(SoundLink("TValerian02AMusicEventE", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/D33CA5F6"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AA2901CC"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D1FDA58E"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D358149E"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D5C239D9"));
    UnitCreate(1, "ColonistShipFlying", 0, 0, PointFromId(1796), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_rAmayorphantom = UnitLastCreated();
    UnitIssueOrder(gv_rAmayorphantom, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(43))), c_orderQueueReplace);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_rAmayorphantom, true, PlayerGroupLoopCurrent());
        libNtve_gf_ShareVisionofUnit(gv_mayor, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    while (!((libNtve_gf_UnitInRegion(gv_rAmayorphantom, RegionFromId(43)) == true))) {
        Wait(1.0, c_timeGame);
    }
    Wait(6.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/26B4C121"));
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink("TValerian02BMusicEventBB", -1), PlayerGroupAll(), 100.0, 0.0);
    autoBBF479B1_ae = 4;
    autoBBF479B1_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoBBF479B1_ai >= 0 && lv_loopint <= autoBBF479B1_ae) || (autoBBF479B1_ai <= 0 && lv_loopint >= autoBBF479B1_ae) ) ; lv_loopint += autoBBF479B1_ai ) {
        UnitCreate(1, "InfantryRifleman", c_unitCreateIgnorePlacement, 0, PointFromId(1799), 225.0);
        lv_rAescorts[lv_loopint] = UnitLastCreated();
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById DecalRA");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById CamoNight");
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_rALZguardpts[lv_loopint]), c_orderQueueReplace);
    }
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/26C5BC9C"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D0AE88EA"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/A590EEF3"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D55703ED"));
    Wait(7.0, c_timeGame);
    UnitIssueOrder(gv_mayor, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1799)), c_orderQueueReplace);
    gf_MissionText(StringExternal("Param/Value/F38134F3"));
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(gv_rAmayorPSD);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1799)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeGame);
    UnitRemove(gv_mayor);
    UnitGroupLoopBegin(gv_rAmayorPSD);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/359564C8"));
    Wait(4.0, c_timeGame);
    auto8EA8F46F_ae = 4;
    auto8EA8F46F_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto8EA8F46F_ai >= 0 && lv_loopint <= auto8EA8F46F_ae) || (auto8EA8F46F_ai <= 0 && lv_loopint >= auto8EA8F46F_ae) ) ; lv_loopint += auto8EA8F46F_ai ) {
        UnitIssueOrder(lv_rAescorts[lv_loopint], OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1799)), c_orderQueueReplace);
    }
    Wait(3.5, c_timeGame);
    UnitRemove(lv_rAescorts[1]);
    UnitRemove(lv_rAescorts[2]);
    Wait(4.5, c_timeGame);
    UnitRemove(lv_rAescorts[3]);
    UnitRemove(lv_rAescorts[4]);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(gv_rAmayorphantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    gf_MissionText(StringExternal("Param/Value/BF999F06"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    gf_SucceedMission(10, StringExternal("Param/Value/D5981836"), 0);
    gv_escortcivmissioncomplete[1] = true;
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_rAmayorphantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    gf_MissionText(StringExternal("Param/Value/9013EC4F"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/313A2477"));
    Wait(7.0, c_timeGame);
    UnitRemove(gv_rAmayorphantom);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachMayor_Init () {
    gt_ApproachMayor = TriggerCreate("gt_ApproachMayor_Func");
    TriggerEnable(gt_ApproachMayor, false);
    TriggerAddEventUnitRegion(gt_ApproachMayor, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guslani Village Enter
//--------------------------------------------------------------------------------------------------
bool gt_GuslaniVillageEnter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitGroupCount(gv_guslanicivilians, c_unitCountAlive) == 0)) {
        gv_escortcivmissioncomplete[2] = true;
        ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
        gf_FailMission(((gv_guslanitorescue * 2) + 5), StringExternal("Param/Value/F7B6F4A0"), 5);
        gf_MissionText(StringExternal("Param/Value/E5DC64CA"));
    }
    else {
        gf_MissionText(StringExternal("Param/Value/A3A9C24E"));
        TriggerEnable(gt_GuslaniOrderLoop, true);
        TriggerEnable(gt_RescueGuslani, true);
        TriggerEnable(gt_GuslaniCivDies, true);
    }
    PingDestroy(gv_guslaniping);
    UnitGroupLoopBegin(gv_guslanicivilians);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_undeadTargetGroup, UnitGroupLoopCurrent());
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        if (((UnitGetType(UnitGroupLoopCurrent()) == "PoliceOfficerShotgun") || (UnitGetType(UnitGroupLoopCurrent()) == "PoliceOfficer"))) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "EscortingSlow", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuslaniVillageEnter_Init () {
    gt_GuslaniVillageEnter = TriggerCreate("gt_GuslaniVillageEnter_Func");
    TriggerEnable(gt_GuslaniVillageEnter, false);
    TriggerAddEventUnitRegion(gt_GuslaniVillageEnter, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guslani Order Loop
//--------------------------------------------------------------------------------------------------
bool gt_GuslaniOrderLoop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_guslanicivilians);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "PoliceOfficer") || (UnitGetType(UnitGroupLoopCurrent()) == "PoliceOfficerShotgun"))) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(gv_guslanicivilians, c_unitCountAlive) == 0)) {
        gv_escortcivmissioncomplete[2] = true;
        if ((gv_guslanirescued > 0)) {
            ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
            if ((gv_guslanirescued > (gv_guslanitorescue / 2))) {
                gv_infestationLevel = (gv_infestationLevel - 3);
                gf_MissionText(StringExternal("Param/Value/50848E58"));
            }
            else {
                gf_MissionText(StringExternal("Param/Value/899FC422"));
            }
        }
        else {
            ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
            gf_MissionText(StringExternal("Param/Value/1BE38153"));
            gv_infestationLevel = (gv_infestationLevel + 3);
        }
        TriggerEnable(gt_GuslaniOrderLoop, false);
        TriggerEnable(gt_RescueGuslani, false);
        TriggerEnable(gt_GuslaniCivDies, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuslaniOrderLoop_Init () {
    gt_GuslaniOrderLoop = TriggerCreate("gt_GuslaniOrderLoop_Func");
    TriggerEnable(gt_GuslaniOrderLoop, false);
    TriggerAddEventTimePeriodic(gt_GuslaniOrderLoop, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guslani Civ Dies
//--------------------------------------------------------------------------------------------------
bool gt_GuslaniCivDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_guslanicivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_FailMission(2, StringExternal("Param/Value/CF4CD313"), 0);
    UnitGroupRemove(gv_guslanicivilians, EventUnit());
    UnitGroupRemove(gv_undeadTargetGroup, EventUnit());
    if ((UnitGroupCount(gv_guslanicivilians, c_unitCountAlive) == 0)) {
        gv_escortcivmissioncomplete[2] = true;
        if ((gv_guslanirescued > 0)) {
            ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
            if ((gv_guslanirescued > (gv_guslanitorescue / 2))) {
                gv_infestationLevel = (gv_infestationLevel - 3);
                gf_MissionText(StringExternal("Param/Value/99679D69"));
            }
            else {
                gf_MissionText(StringExternal("Param/Value/381E5792"));
            }
        }
        else {
            ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
            gf_MissionText(StringExternal("Param/Value/A0848CBF"));
            gv_infestationLevel = (gv_infestationLevel + 3);
        }
        TriggerEnable(gt_GuslaniOrderLoop, false);
        TriggerEnable(gt_RescueGuslani, false);
        TriggerEnable(gt_GuslaniCivDies, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuslaniCivDies_Init () {
    gt_GuslaniCivDies = TriggerCreate("gt_GuslaniCivDies_Func");
    TriggerEnable(gt_GuslaniCivDies, false);
    TriggerAddEventUnitDied(gt_GuslaniCivDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Guslani
//--------------------------------------------------------------------------------------------------
bool gt_RescueGuslani_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_district;

    // Variable Initialization
    lv_district = RandomInt(1, 2);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_guslanicivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(6, StringExternal("Param/Value/6B7A2994"), 0);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(EventUnit(), false, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitGroupRemove(gv_guslanicivilians, EventUnit());
    UnitGroupRemove(gv_undeadTargetGroup, EventUnit());
    UnitBehaviorRemove(EventUnit(), "EscortingSlow", 1);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_cityRegions[lv_district])), c_orderQueueReplace);
    UnitGroupAdd(gv_wanderers[lv_district], EventUnit());
    gv_survivorsrescued = (gv_survivorsrescued + 1);
    gv_guslanirescued += 1;
    if ((UnitGroupCount(gv_guslanicivilians, c_unitCountAlive) == 0)) {
        gv_escortcivmissioncomplete[2] = true;
        ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
        if ((gv_guslanirescued > (gv_guslanitorescue / 2))) {
            gv_infestationLevel = (gv_infestationLevel - 3);
            gf_MissionText(StringExternal("Param/Value/7A060096"));
        }
        else {
            gf_MissionText(StringExternal("Param/Value/A3650C23"));
        }
        TriggerEnable(gt_GuslaniOrderLoop, false);
        TriggerEnable(gt_RescueGuslani, false);
        TriggerEnable(gt_GuslaniCivDies, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueGuslani_Init () {
    gt_RescueGuslani = TriggerCreate("gt_RescueGuslani_Func");
    TriggerEnable(gt_RescueGuslani, false);
    TriggerAddEventUnitRegion(gt_RescueGuslani, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_RescueGuslani, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Highlander Approach Building
//--------------------------------------------------------------------------------------------------
bool gt_HighlanderApproachBuilding_Func (bool testConds, bool runActions) {
    int auto9D4932EC_ae;
    int auto9D4932EC_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9D4932EC_ae = 8;
    auto9D4932EC_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto9D4932EC_ai >= 0 && lv_loopint <= auto9D4932EC_ae) || (auto9D4932EC_ai <= 0 && lv_loopint >= auto9D4932EC_ae) ) ; lv_loopint += auto9D4932EC_ai ) {
        if ((EventUnitRegion() == gv_highlanders[lv_loopint]) && (gv_highlanderssearched[lv_loopint] == false)) {
            gv_highlanderssearched[lv_loopint] = true;
            PingDestroy(gv_highlanderpings[lv_loopint]);
            gf_MissionText(StringExternal("Param/Value/D9A2CB5D"));
            TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + gv_findsurvivorchat1[RandomInt(1, 5)]), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
            UnitCreate(RandomInt(1, 3), "Civilian", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(gv_highlanders[lv_loopint]), libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(gv_highlandercivilians, UnitLastCreatedGroup());
            UnitGroupAddUnitGroup(gv_undeadTargetGroup, UnitLastCreatedGroup());
            gv_highlandertorescue += UnitGroupCount(UnitLastCreatedGroup(), c_unitCountAlive);
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                PlayerGroupLoopBegin(gv_players);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, PlayerGroupLoopCurrent());
                }
                PlayerGroupLoopEnd();
            }
            UnitGroupLoopEnd();
            Wait(2.0, c_timeGame);
            TextTagCreate((StringExternal("Param/Value/C3033A18") + gv_findsurvivorchat2[RandomInt(1, 5)]), 24, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HighlanderApproachBuilding_Init () {
    gt_HighlanderApproachBuilding = TriggerCreate("gt_HighlanderApproachBuilding_Func");
    TriggerEnable(gt_HighlanderApproachBuilding, false);
    TriggerAddEventUnitRegion(gt_HighlanderApproachBuilding, null, RegionFromId(44), true);
    TriggerAddEventUnitRegion(gt_HighlanderApproachBuilding, null, RegionFromId(45), true);
    TriggerAddEventUnitRegion(gt_HighlanderApproachBuilding, null, RegionFromId(46), true);
    TriggerAddEventUnitRegion(gt_HighlanderApproachBuilding, null, RegionFromId(47), true);
    TriggerAddEventUnitRegion(gt_HighlanderApproachBuilding, null, RegionFromId(48), true);
    TriggerAddEventUnitRegion(gt_HighlanderApproachBuilding, null, RegionFromId(49), true);
    TriggerAddEventUnitRegion(gt_HighlanderApproachBuilding, null, RegionFromId(50), true);
    TriggerAddEventUnitRegion(gt_HighlanderApproachBuilding, null, RegionFromId(51), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rescue Highlander
//--------------------------------------------------------------------------------------------------
bool gt_RescueHighlander_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_allsearched;
    int lv_district;

    // Variable Initialization
    lv_allsearched = true;
    lv_district = RandomInt(1, 2);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_highlandercivilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SucceedMission(3, StringExternal("Param/Value/8715F8BC"), 0);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(EventUnit(), false, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitGroupRemove(gv_highlandercivilians, EventUnit());
    UnitGroupRemove(gv_undeadTargetGroup, EventUnit());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_cityRegions[lv_district])), c_orderQueueReplace);
    UnitGroupAdd(gv_wanderers[lv_district], EventUnit());
    gv_survivorsrescued = (gv_survivorsrescued + 1);
    gv_highlanderrescued += 1;
    gf_HighlanderEvaluateEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RescueHighlander_Init () {
    gt_RescueHighlander = TriggerCreate("gt_RescueHighlander_Func");
    TriggerEnable(gt_RescueHighlander, false);
    TriggerAddEventUnitRegion(gt_RescueHighlander, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_RescueHighlander, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Highlander Loop
//--------------------------------------------------------------------------------------------------
bool gt_HighlanderLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    bool lv_allsearched;

    // Variable Initialization
    lv_allsearched = true;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_highlandercivilians, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
    gf_HighlanderEvaluateEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HighlanderLoop_Init () {
    gt_HighlanderLoop = TriggerCreate("gt_HighlanderLoop_Func");
    TriggerEnable(gt_HighlanderLoop, false);
    TriggerAddEventTimePeriodic(gt_HighlanderLoop, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Civilians End
//--------------------------------------------------------------------------------------------------
bool gt_EscortCiviliansEnd_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_escortcivmissioncomplete[1] == true))) {
            return false;
        }

        if (!((gv_escortcivmissioncomplete[2] == true))) {
            return false;
        }

        if (!((gv_escortcivmissioncomplete[3] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    ObjectiveSetState(gv_thirdObj, c_objectiveStateHidden);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Chapter2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortCiviliansEnd_Init () {
    gt_EscortCiviliansEnd = TriggerCreate("gt_EscortCiviliansEnd_Func");
    TriggerEnable(gt_EscortCiviliansEnd, false);
    TriggerAddEventTimePeriodic(gt_EscortCiviliansEnd, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Mayor
//--------------------------------------------------------------------------------------------------
bool gt_EscortMayor_Func (bool testConds, bool runActions) {
    int autoBE75E8A1_n;
    int autoBE75E8A1_i;

    // Variable Declarations
    unitgroup lv_guslanigroup;
    int lv_random;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/8607D409"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D0A42436"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/D1D92F3C"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/90B45F74"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(7)), ColorWithAlpha(0.00, 50.20, 50.20, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FC7EA106"));
    PingSetUnit(PingLastCreated(), gv_mayor);
    TimerStart(gv_missiontimer, 190.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    gv_missionping = PingLastCreated();
    TriggerEnable(gt_EnterMayorEscort, true);
    TriggerEnable(gt_EscortMayorTimeout, true);
    lv_guslanigroup = UnitGroupSearch(null, 0, RegionGetCenter(RegionFromId(26)), 30.0, UnitFilter(0, 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_guslanigroup, gv_lNAvailable);
    UnitGroupRemoveUnitGroup(lv_guslanigroup, gv_heroesGroup);
    UnitGroupAddUnitGroup(lv_guslanigroup, gv_wanderers[3]);
    UnitGroupClear(gv_wanderers[3]);
    UnitGroupLoopBegin(lv_guslanigroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_random = RandomInt(1, 2);
        UnitGroupAdd(gv_wanderers[lv_random], UnitGroupLoopCurrent());
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_cityRegions[lv_random])), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    autoBE75E8A1_n = 60;
    for (autoBE75E8A1_i = 1; autoBE75E8A1_i <= autoBE75E8A1_n; autoBE75E8A1_i += 1) {
        Wait(5.0, c_timeGame);
        UnitGroupRemoveUnitGroup(lv_guslanigroup, UnitGroupFilterRegion(lv_guslanigroup, gv_cityRegions[1], 0));
        UnitGroupRemoveUnitGroup(lv_guslanigroup, UnitGroupFilterRegion(lv_guslanigroup, gv_cityRegions[2], 0));
        if ((libNtve_gf_UnitGroupIsDead(lv_guslanigroup) == true)) {
            break;
        }

        UnitGroupLoopBegin(lv_guslanigroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((OrderGetAbilityCommand(UnitOrder(UnitGroupLoopCurrent(), 0)) != AbilityCommand("attack", 0))) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_cityRegions[RandomInt(1, 2)])), c_orderQueueReplace);
            }

        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortMayor_Init () {
    gt_EscortMayor = TriggerCreate("gt_EscortMayor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Mayor Timeout
//--------------------------------------------------------------------------------------------------
bool gt_EscortMayorTimeout_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EnterMayorEscort, false);
    PingDestroy(gv_missionping);
    gf_MissionText(StringExternal("Param/Value/A48FC239"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    UnitRemove(gv_mayor);
    Wait(4.0, c_timeGame);
    gf_FailMission(12, StringExternal("Param/Value/3AE94359"), 5);
    Wait(4.0, c_timeGame);
    if ((RandomInt(0, 1) == 1)) {
        gf_SpawnUndead(1, "Raisuli", 1);
        if ((gv_gamemode >= 3)) {
            gf_SpawnUndead(1, "Raisuli", 1);
            gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 2);
            gf_SpawnUndead(1, "Gourmand", 1);
        }

    }
    else {
        gf_SpawnUndead(1, "Bruchus", 1);
        gf_SpawnUndead(2, "Cursed", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(2, "Cursed", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Glutton", 1);
        gf_SpawnUndead(1, "Morbus", 1);
        gf_SpawnUndead(1, "Vesania", 1);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(2, "Cursed", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Glutton", 1);
    }

    TriggerExecute(gt_Chapter2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortMayorTimeout_Init () {
    gt_EscortMayorTimeout = TriggerCreate("gt_EscortMayorTimeout_Func");
    TriggerEnable(gt_EscortMayorTimeout, false);
    TriggerAddEventTimer(gt_EscortMayorTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Mayor Escort
//--------------------------------------------------------------------------------------------------
bool gt_EnterMayorEscort_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minerva;
    int lv_minervaping;
    bool lv_minervadead;
    bool lv_mayordead;
    bool lv_mayorextracted;

    // Variable Initialization
    lv_minervaping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EscortMayorTimeout, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_MissionText(StringExternal("Param/Value/B9D65FED"));
    Wait(5.0, c_timeGame);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_mayor, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    libNtve_gf_MakeUnitInvulnerable(gv_mayor, false);
    UnitGroupAdd(gv_undeadTargetGroup, gv_mayor);
    UnitIssueOrder(gv_mayor, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
    gf_SpawnUndead(1, "Minerva", 1);
    lv_minerva = UnitLastCreated();
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/263466A0"));
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5F7E68E6"));
    Wait(5.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(lv_minerva), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6D4DEC28"));
    PingSetUnit(PingLastCreated(), lv_minerva);
    lv_minervaping = PingLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/F3BA8541"), StringExternal("Param/Value/BA56C8CD"), c_objectiveStateActive, true);
    gv_secondObj = ObjectiveLastCreated();
    Wait(17.0, c_timeGame);
    gf_SpawnUndead(3, "Charger", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(8, "Leaper", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(8, "Swollen", 1);
        gf_SpawnUndead(gv_spawnCount, "Turned", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(4, "Bruchus", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    }

    while (true) {
        if ((UnitIsAlive(gv_mayor) == true)) {
            UnitIssueOrder(gv_mayor, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(24))), c_orderQueueReplace);
            if ((lv_mayorextracted == false) && (libNtve_gf_UnitInRegion(gv_mayor, RegionFromId(24)) == true)) {
                lv_mayorextracted = true;
                gf_SucceedMission(40, StringExternal("Param/Value/5B1E615E"), -3);
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                PingDestroy(gv_missionping);
            }

        }
        else {
            if ((lv_mayordead == false) && (lv_mayorextracted == false) && (UnitIsAlive(gv_mayor) == false)) {
                lv_mayordead = true;
                gf_FailMission(12, StringExternal("Param/Value/A5407FA6"), 5);
                ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
                PingDestroy(gv_missionping);
            }

        }
        if ((lv_minervadead == false) && (UnitIsAlive(lv_minerva) == false)) {
            lv_minervadead = true;
            gf_SucceedMission(35, StringExternal("Param/Value/2FCC59F3"), 0);
            ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
            PingDestroy(lv_minervaping);
        }

        if ((lv_minervadead == true) && ((lv_mayordead == true) || (lv_mayorextracted == true))) {
            break;
        }

        Wait(4.0, c_timeGame);
    }
    Wait(4.0, c_timeGame);
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    TriggerExecute(gt_Chapter2, true, false);
    Wait(40.0, c_timeGame);
    UnitRemove(gv_mayor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterMayorEscort_Init () {
    gt_EnterMayorEscort = TriggerCreate("gt_EnterMayorEscort_Func");
    TriggerEnable(gt_EnterMayorEscort, false);
    TriggerAddEventUnitRegion(gt_EnterMayorEscort, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_MissionText(StringExternal("Param/Value/0AB26049"));
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CASOnStation", 1);
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    gf_ChapterIntermissionOn();
    if ((RandomInt(0, 1) == 1)) {
        TriggerExecute(gt_Chapter2Valor, true, false);
    }
    else {
        TriggerExecute(gt_Chapter2Killing, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2_Init () {
    gt_Chapter2 = TriggerCreate("gt_Chapter2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2 - Killing
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2Killing_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/896A6D27"));
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/183384B2"));
    Wait(4.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ChapterIntermissionOff();
    TriggerEnable(gt_UndeadSpawning2, true);
    TriggerExecute(gt_Ch2Mission1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2Killing_Init () {
    gt_Chapter2Killing = TriggerCreate("gt_Chapter2Killing_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch2 Mission 1
//--------------------------------------------------------------------------------------------------
bool gt_Ch2Mission1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(15.0, 60.0), c_timeGame);
    gf_SkipifOver();
    TriggerExecute(gt_CommanderKLE, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch2Mission1_Init () {
    gt_Ch2Mission1 = TriggerCreate("gt_Ch2Mission1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander KLE
//--------------------------------------------------------------------------------------------------
bool gt_CommanderKLE_Func (bool testConds, bool runActions) {
    int auto08607583_ae;
    int auto08607583_ai;
    int auto4714CA89_ae;
    int auto4714CA89_ai;

    // Variable Declarations
    int lv_loopint;
    region lv_spawnregion;

    // Variable Initialization
    lv_spawnregion = RegionFromId(18);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 2) == 1)) {
        gv_patrolroute[1] = PointFromId(2632);
        gv_patrolroute[1] = PointFromId(2633);
        gv_patrolroute[1] = PointFromId(2634);
        gv_patrolroute[7] = PointFromId(2322);
        gv_patrolroute[8] = PointFromId(2323);
        gv_patrolroute[9] = PointFromId(2324);
        gv_patrolroute[10] = PointFromId(2325);
        gv_patrolroute[11] = PointFromId(1778);
        gv_patrolroute[12] = PointFromId(1785);
        gv_patrolroute[13] = PointFromId(1786);
        gv_patrolroute[14] = PointFromId(1787);
        gv_patrolroute[15] = PointFromId(1788);
        gv_patrolroute[16] = PointFromId(1793);
        gv_patrolroute[17] = PointFromId(2326);
        gv_patrolroute[18] = PointFromId(2327);
        gv_patrolmax = 18;
        lv_spawnregion = RegionFromId(153);
    }
    else {
        gv_patrolroute[1] = PointFromId(1784);
        gv_patrolroute[2] = PointFromId(2328);
        gv_patrolroute[3] = PointFromId(2329);
        gv_patrolroute[4] = PointFromId(2330);
        gv_patrolroute[5] = PointFromId(870);
        gv_patrolroute[6] = PointFromId(2331);
        gv_patrolroute[7] = PointFromId(2332);
        gv_patrolroute[7] = PointFromId(2332);
        gv_patrolroute[8] = PointFromId(1791);
        gv_patrolroute[9] = PointFromId(1790);
        gv_patrolroute[10] = PointFromId(1789);
        gv_patrolroute[11] = PointFromId(1788);
        gv_patrolroute[12] = PointFromId(1793);
        gv_patrolroute[13] = PointFromId(2326);
        gv_patrolroute[14] = PointFromId(2327);
        gv_patrolmax = 14;
    }
    gf_MissionText(StringExternal("Param/Value/8E3B34F0"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5F3D03D6"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/553F26AC"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/C26DBE91"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/242D6B50"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(lv_spawnregion), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D47F31CE"));
    gv_missionping = PingLastCreated();
    Wait(35.0, c_timeGame);
    gv_pauseSpawning = true;
    TriggerEnable(gt_PatrolLoop, true);
    TriggerEnable(gt_PatrolUnitDies, true);
    auto08607583_ae = 6;
    auto08607583_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto08607583_ai >= 0 && lv_loopint <= auto08607583_ae) || (auto08607583_ai <= 0 && lv_loopint >= auto08607583_ae) ) ; lv_loopint += auto08607583_ai ) {
        if ((RandomInt(1, 5) == 1)) {
            UnitCreate(1, "InfantryAutomaticRifleman", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
        }
        else {
            UnitCreate(1, "InfantryRifleman", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
        }
        gf_SetupPatrolUnit(UnitLastCreated());
        if ((lv_loopint == 1)) {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_patrolroute[gv_patrolnext]), c_orderQueueReplace);
        }

        Wait(1.0, c_timeGame);
    }
    UnitCreate(1, "68WCombatMedic", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
    gf_SetupPatrolUnit(UnitLastCreated());
    UnitCreate(1, "74DFlamethrower", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
    UnitBehaviorAdd(UnitLastCreated(), "FuelDischargeAIGroupHero", UnitLastCreated(), 1);
    gf_SetupPatrolUnit(UnitLastCreated());
    UnitCreate(1, "Sniper", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
    gf_SetupPatrolUnit(UnitLastCreated());
    UnitCreate(1, "CombatEngineerMini", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
    gf_SetupPatrolUnit(UnitLastCreated());
    UnitCreate(1, "CombatEngineerMini", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
    gf_SetupPatrolUnit(UnitLastCreated());
    UnitCreate(1, "68WCombatMedic", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
    gf_SetupPatrolUnit(UnitLastCreated());
    auto4714CA89_ae = 3;
    auto4714CA89_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto4714CA89_ai >= 0 && lv_loopint <= auto4714CA89_ae) || (auto4714CA89_ai <= 0 && lv_loopint >= auto4714CA89_ae) ) ; lv_loopint += auto4714CA89_ai ) {
        if ((RandomInt(1, 5) == 1)) {
            UnitCreate(1, "InfantryAutomaticRifleman", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
        }
        else {
            UnitCreate(1, "InfantryRifleman", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
        }
        gf_SetupPatrolUnit(UnitLastCreated());
        Wait(1.0, c_timeGame);
    }
    UnitCreate(1, "Commander", 0, 13, RegionGetCenter(lv_spawnregion), 180.0);
    TextTagCreate(StringExternal("Param/Value/C45BFE4E"), 14, UnitGetPosition(UnitLastCreated()), -1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), -1.0);
    gv_commandertexttag = TextTagLastCreated();
    PingSetUnit(gv_missionping, UnitLastCreated());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById Rank1LT");
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitBehaviorAdd(UnitLastCreated(), "PatrollingSlow", UnitLastCreated(), 1);
    gv_sabercommander = UnitLastCreated();
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    TriggerEnable(gt_Saber6Dies, true);
    Wait(5.0, c_timeGame);
    gv_pauseSpawning = false;
    Wait(RandomFixed(30.0, 150.0), c_timeGame);
    SoundPlay(SoundLink("Mission_MusicCue005", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Ares", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Krill", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommanderKLE_Init () {
    gt_CommanderKLE = TriggerCreate("gt_CommanderKLE_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol Loop
//--------------------------------------------------------------------------------------------------
bool gt_PatrolLoop_Func (bool testConds, bool runActions) {
    int autoDC5907C5_ae;
    int autoDC5907C5_ai;

    // Variable Declarations
    int lv_loopint;
    unit lv_tempunit;
    unit lv_firstunit;
    abilcmd[4] lv_order;
    point lv_offset;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_order[1] = AbilityCommand("move", 0);
    lv_order[2] = AbilityCommand("attack", 0);
    lv_order[3] = AbilityCommand("attack", 0);
    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_patrol, 1)), gv_patrolroute[gv_patrolnext]) <= 1.5)) {
        Wait(2.0, c_timeGame);
        if ((gv_patrolnext == gv_patrolmax)) {
            TriggerExecute(gt_PatrolEnd, true, false);
        }
        else {
            gv_patrolnext = (gv_patrolnext + 1);
        }
    }

    lv_firstunit = UnitGroupUnit(gv_patrol, 1);
    UnitIssueOrder(lv_firstunit, OrderTargetingPoint(lv_order[RandomInt(1, 3)], gv_patrolroute[gv_patrolnext]), c_orderQueueReplace);
    lv_offset = PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(gv_patrol, 1)), 5.0, AngleBetweenPoints(gv_patrolroute[gv_patrolnext], UnitGetPosition(lv_firstunit)));
    UnitIssueOrder(gv_sabercommander, OrderTargetingPoint(lv_order[RandomInt(1, 3)], lv_offset), c_orderQueueReplace);
    autoDC5907C5_ae = UnitGroupCount(gv_patrol, c_unitCountAll);
    autoDC5907C5_ai = 1;
    lv_loopint = 2;
    for ( ; ( (autoDC5907C5_ai >= 0 && lv_loopint <= autoDC5907C5_ae) || (autoDC5907C5_ai <= 0 && lv_loopint >= autoDC5907C5_ae) ) ; lv_loopint += autoDC5907C5_ai ) {
        lv_tempunit = UnitGroupUnit(gv_patrol, lv_loopint);
        lv_offset = PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(gv_patrol, 1)), ((IntToFixed(lv_loopint) - 1.0) * 2.0), AngleBetweenPoints(gv_patrolroute[gv_patrolnext], UnitGetPosition(lv_firstunit)));
        if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), lv_offset) >= 8.0)) {
            UnitIssueOrder(lv_tempunit, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), lv_offset), c_orderQueueReplace);
        }
        else {
            if ((gf_Parity(lv_loopint) == false)) {
                lv_offset = PointWithOffsetPolar(lv_offset, 2.0, (AngleBetweenPoints(lv_offset, UnitGetPosition(lv_firstunit)) + 90.0));
            }
            else {
                lv_offset = PointWithOffsetPolar(lv_offset, 2.0, (AngleBetweenPoints(lv_offset, UnitGetPosition(lv_firstunit)) - 90.0));
            }
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("attack", 0), lv_offset), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PatrolLoop_Init () {
    gt_PatrolLoop = TriggerCreate("gt_PatrolLoop_Func");
    TriggerEnable(gt_PatrolLoop, false);
    TriggerAddEventTimePeriodic(gt_PatrolLoop, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol Unit Dies
//--------------------------------------------------------------------------------------------------
bool gt_PatrolUnitDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_patrol, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_patrol, EventUnit());
    UnitGroupRemove(gv_undeadTargetGroup, EventUnit());
    if ((UnitGroupCount(gv_patrol, c_unitCountAlive) == 0) && (UnitIsAlive(gv_sabercommander) == false)) {
        gf_FailMission(5, StringExternal("Param/Value/0E66DCDF"), 5);
        TriggerExecute(gt_PatrolEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PatrolUnitDies_Init () {
    gt_PatrolUnitDies = TriggerCreate("gt_PatrolUnitDies_Func");
    TriggerEnable(gt_PatrolUnitDies, false);
    TriggerAddEventUnitDied(gt_PatrolUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Saber 6 Dies
//--------------------------------------------------------------------------------------------------
bool gt_Saber6Dies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_FailMission(10, StringExternal("Param/Value/196DB207"), 3);
    SoundPlay(SoundLink("TRaynor03MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    PingDestroy(gv_missionping);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Saber6Dies_Init () {
    gt_Saber6Dies = TriggerCreate("gt_Saber6Dies_Func");
    TriggerEnable(gt_Saber6Dies, false);
    TriggerAddEventUnitDied(gt_Saber6Dies, UnitRefFromVariable("gv_sabercommander"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander Dies
//--------------------------------------------------------------------------------------------------
bool gt_CommanderDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_commanders, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(gv_commandertexttag);
    gf_FailMission(7, StringExternal("Param/Value/24967702"), 3);
    SoundPlay(SoundLink("TRaynor03MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((UnitGroupCount(gv_commanders, c_unitCountAlive) == 0)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        UnitIssueOrder(gv_rAmayorphantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_rAmayorphantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(7.0, c_timeGame);
        UnitRemove(gv_rAmayorphantom);
        TriggerEnable(gt_CommanderMeetingForce, false);
        TriggerExecute(gt_Ch2Mission2, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommanderDies_Init () {
    gt_CommanderDies = TriggerCreate("gt_CommanderDies_Func");
    TriggerEnable(gt_CommanderDies, false);
    TriggerAddEventUnitDied(gt_CommanderDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander Meeting Force
//--------------------------------------------------------------------------------------------------
bool gt_CommanderMeetingForce_Func (bool testConds, bool runActions) {
    unitgroup autoE7134066_g;
    int autoE7134066_u;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE7134066_g = gv_commanders;
    autoE7134066_u = 1;
    for ( ; autoE7134066_u <= UnitGroupCount(autoE7134066_g, c_unitCountAll) ; autoE7134066_u += BoolToInt(lv_unit == UnitGroupUnit(autoE7134066_g, autoE7134066_u)) ) {
        lv_unit = UnitGroupUnit(autoE7134066_g, autoE7134066_u);
        if ((libNtve_gf_UnitInRegion(lv_unit, RegionFromId(73)) == false)) {
            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(73))), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_unit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CommanderMeetingForce_Init () {
    gt_CommanderMeetingForce = TriggerCreate("gt_CommanderMeetingForce_Func");
    TriggerEnable(gt_CommanderMeetingForce, false);
    TriggerAddEventTimePeriodic(gt_CommanderMeetingForce, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patrol End
//--------------------------------------------------------------------------------------------------
bool gt_PatrolEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;
    region[6] lv_guardregion;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PatrolLoop, false);
    TriggerEnable(gt_PatrolUnitDies, false);
    lv_guardregion[1] = RegionFromId(74);
    lv_guardregion[2] = RegionFromId(75);
    lv_guardregion[3] = RegionFromId(76);
    lv_guardregion[4] = RegionFromId(69);
    lv_guardregion[5] = RegionFromId(67);
    PingDestroy(gv_missionping);
    if ((UnitIsAlive(gv_sabercommander) == true)) {
        TextTagDestroy(gv_commandertexttag);
        gf_SucceedMission(50, StringExternal("Param/Value/B7A9BD23"), -3);
        gf_MoveToGuardPos(gv_sabercommander, RegionFromId(73));
        UnitBehaviorRemove(gv_sabercommander, "PatrollingSlow", 1);
        UnitGroupAdd(gv_commanders, gv_sabercommander);
    }

    gf_MissionText(StringExternal("Param/Value/6EE353D4"));
    UnitGroupLoopBegin(gv_patrol);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_MoveToGuardPos(UnitGroupLoopCurrent(), lv_guardregion[RandomInt(1, 5)]);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "PatrollingSlow", 1);
    }
    UnitGroupLoopEnd();
    Wait(30.0, c_timeGame);
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointFromId(1797), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_rAmayorphantom = UnitLastCreated();
    UnitIssueOrder(gv_rAmayorphantom, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(71))), c_orderQueueReplace);
    while (!((libNtve_gf_UnitInRegion(gv_rAmayorphantom, RegionFromId(71)) == true))) {
        Wait(2.0, c_timeGame);
    }
    Wait(4.0, c_timeGame);
    TriggerEnable(gt_Saber6Dies, false);
    TriggerEnable(gt_CommanderDies, true);
    UnitCreate(1, "Commander", 0, 13, RegionGetCenter(RegionFromId(71)), 0.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById Rank1LT");
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    UnitGroupAdd(gv_commanders, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(RegionFromId(73)), 1.5, 120.0)), c_orderQueueReplace);
    UnitCreate(1, "Commander", 0, 13, RegionGetCenter(RegionFromId(71)), 0.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById RankLTCOL");
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    UnitGroupAdd(gv_commanders, UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(RegionFromId(73)), 1.5, 240.0)), c_orderQueueReplace);
    Wait(8.0, c_timeGame);
    UnitCreate(1, "MK44SentryGunPacked", 0, 0, RegionRandomPoint(RegionFromId(73)), 0.0);
    UnitCreate(1, "MK44SentryGunPacked", 0, 0, RegionRandomPoint(RegionFromId(73)), 0.0);
    UnitGroupLoopBegin(gv_commanders);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), RegionGetCenter(RegionFromId(73)), 0.5);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_CommanderMeetingForce, true);
    gf_MissionText(StringExternal("Param/Value/0F64E60C"));
    Wait(15.0, c_timeGame);
    SoundPlay(SoundLink("Mission_MusicCue004", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(2, "Raisuli", 1);
    gf_SpawnUndead(2, "Morbus", 1);
    gf_SpawnUndead(2, "Spitter", 1);
    gf_SpawnUndead(1, "Horror", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Shredder", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Raisuli", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Krill", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Krill", 1);
        gf_SpawnUndead(3, "Bruchus", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead(3, "Bruchus", 1);
    }

    Wait(130.0, c_timeGame);
    TriggerEnable(gt_CommanderDies, false);
    TriggerEnable(gt_CommanderMeetingForce, false);
    if ((TriggerIsEnabled(gt_Ch2Mission2) == true)) {
        gf_SucceedMission(((UnitGroupCount(gv_commanders, c_unitCountAlive) * 25) + (UnitGroupCount(gv_patrol, c_unitCountAlive) * 4)), StringExternal("Param/Value/CB7AE69F"), -2);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        UnitGroupLoopBegin(gv_commanders);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(71))), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_patrol);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(71))), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        Wait(10.0, c_timeGame);
        UnitGroupLoopBegin(gv_commanders);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_patrol);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitIssueOrder(gv_rAmayorphantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_rAmayorphantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(7.0, c_timeGame);
        UnitRemove(gv_rAmayorphantom);
        TriggerExecute(gt_Ch2Mission2, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PatrolEnd_Init () {
    gt_PatrolEnd = TriggerCreate("gt_PatrolEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch2 Mission 2
//--------------------------------------------------------------------------------------------------
bool gt_Ch2Mission2_Func (bool testConds, bool runActions) {
    int auto666DAF73_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(35.0, 90.0), c_timeGame);
    gf_SkipifOver();
    gf_SkipifOver();
    gf_Reinforcements();
    if ((RandomInt(0, 3) == 1) && (gv_fogevent == false)) {
        TriggerExecute(gt_Darkness, true, false);
    }
    else {
        auto666DAF73_val = RandomInt(0, 2);
        if (auto666DAF73_val == 0) {
            TriggerExecute(gt_DasdanCasualties, true, false);
        }
        else if (auto666DAF73_val == 1) {
            TriggerExecute(gt_PlagueVectors, true, false);
        }
        else if (auto666DAF73_val == 2) {
            TriggerExecute(gt_ThresherMaw, true, false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch2Mission2_Init () {
    gt_Ch2Mission2 = TriggerCreate("gt_Ch2Mission2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dasdan Casualties
//--------------------------------------------------------------------------------------------------
bool gt_DasdanCasualties_Func (bool testConds, bool runActions) {
    int auto224D350E_ae;
    int auto224D350E_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_casnumber;

    // Variable Initialization
    lv_casnumber = (gv_gamemode + 4);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_MissionText(StringExternal("Param/Value/EC46F432"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/7CE1EAE2"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E658F6EC"));
    Wait(25.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/A55CD232"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/618EF10E"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(18)), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3B91B377"));
    gv_missionping = PingLastCreated();
    TimerStart(gv_missiontimer, (300.0 - (IntToFixed(gv_gamemode) * 30.0)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_PickUpCasualty, true);
    TriggerEnable(gt_EnterMEDEVACSite, true);
    TriggerEnable(gt_MEDEVACTimeExpired, true);
    if ((PlayerGroupCount(gv_players) <= 3)) {
        lv_casnumber = 4;
    }

    auto224D350E_ae = lv_casnumber;
    auto224D350E_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto224D350E_ai >= 0 && lv_loopint <= auto224D350E_ae) || (auto224D350E_ai <= 0 && lv_loopint >= auto224D350E_ae) ) ; lv_loopint += auto224D350E_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Casualty", 0, 0, RegionRandomPoint(RegionFromId(18)));
        UnitGroupAdd(gv_casualties, UnitLastCreated());
    }
    if ((RandomInt(1, 2) == 1)) {
        gv_medevacregion = RegionFromId(6);
    }
    else {
        gv_medevacregion = RegionFromId(16);
    }
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), -15.0, 0.0), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_medevacregion)), c_orderQueueReplace);
    gf_MissionText(StringExternal("Param/Value/E6DC4FE9"));
    gf_SpawnUndead(3, "Bruchus", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(3, "Bruchus", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DasdanCasualties_Init () {
    gt_DasdanCasualties = TriggerCreate("gt_DasdanCasualties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Up Casualty
//--------------------------------------------------------------------------------------------------
bool gt_PickUpCasualty_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_casualties, EventUnitInventoryItem()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingSetPosition(gv_missionping, RegionGetCenter(gv_medevacregion));
    PingSetTooltip(gv_missionping, StringExternal("Param/Value/6FFCEFFA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickUpCasualty_Init () {
    gt_PickUpCasualty = TriggerCreate("gt_PickUpCasualty_Func");
    TriggerEnable(gt_PickUpCasualty, false);
    TriggerAddEventUnitInventoryChange(gt_PickUpCasualty, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MEDEVAC Time Expired
//--------------------------------------------------------------------------------------------------
bool gt_MEDEVACTimeExpired_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_EnterMEDEVACSite, false);
    TriggerEnable(gt_MEDEVACTimeExpired, false);
    PingDestroy(gv_missionping);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_FailMission(12, StringExternal("Param/Value/9425E518"), 4);
    ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    TriggerExecute(gt_Ch2Mission4, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MEDEVACTimeExpired_Init () {
    gt_MEDEVACTimeExpired = TriggerCreate("gt_MEDEVACTimeExpired_Func");
    TriggerEnable(gt_MEDEVACTimeExpired, false);
    TriggerAddEventTimer(gt_MEDEVACTimeExpired, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter MEDEVAC Site
//--------------------------------------------------------------------------------------------------
bool gt_EnterMEDEVACSite_Func (bool testConds, bool runActions) {
    int auto09808D55_ae;
    int auto09808D55_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }

        if (!((gf_CountItemType("Casualty", EventUnit()) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto09808D55_ae = 6;
    auto09808D55_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto09808D55_ai >= 0 && lv_loopint <= auto09808D55_ae) || (auto09808D55_ai <= 0 && lv_loopint >= auto09808D55_ae) ) ; lv_loopint += auto09808D55_ai ) {
        if ((UnitGetType(UnitInventoryItem(EventUnit(), lv_loopint)) == "Casualty")) {
            UnitRemove(UnitInventoryItem(EventUnit(), lv_loopint));
            gf_SucceedMission(15, StringExternal("Param/Value/7C7F9278"), 0);
        }

    }
    if ((UnitGroupCount(gv_casualties, c_unitCountAlive) == 0)) {
        TriggerEnable(gt_EnterMEDEVACSite, false);
        TriggerEnable(gt_MEDEVACTimeExpired, false);
        gv_infestationLevel = (gv_infestationLevel - 3);
        PingDestroy(gv_missionping);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TimerPause(gv_missiontimer, true);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
        Wait(4.0, c_timeGame);
        UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(7.0, c_timeGame);
        UnitRemove(gv_mEDEVAC);
        TriggerExecute(gt_Ch2Mission4, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterMEDEVACSite_Init () {
    gt_EnterMEDEVACSite = TriggerCreate("gt_EnterMEDEVACSite_Func");
    TriggerEnable(gt_EnterMEDEVACSite, false);
    TriggerAddEventUnitRegion(gt_EnterMEDEVACSite, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_EnterMEDEVACSite, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Darkness
//--------------------------------------------------------------------------------------------------
bool gt_Darkness_Func (bool testConds, bool runActions) {
    int autoECEA2F11_ae;
    int autoECEA2F11_ai;
    int autoD4E3B9A6_ae;
    int autoD4E3B9A6_ai;

    // Variable Declarations
    int lv_loopint;
    unit lv_droppod;
    region lv_lz;
    int lv_penalty;

    // Variable Initialization
    lv_lz = gv_lZs[RandomInt(1, 5)];
    lv_penalty = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_fogevent == false))) {
        Wait(5.0, c_timeGame);
    }
    gv_fogevent = true;
    gf_BlendFogNew(0.0, 0.0, 0.0, 60.0, 1.0, 11.0, 9.375);
    TriggerEnable(gt_ApproachBDS, true);
    TriggerEnable(gt_AcquireBDS, true);
    Wait(5.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B689FA5C"));
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
    gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    gf_SpawnUndead(1, "Horror", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 1);
        gf_SpawnUndead(gv_spawnCount, "Krill", 1);
    }

    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AD2095C9"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/F2BA2F54"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/45A82D73"));
    SoundPlay(SoundLink("Darkness", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 0, RegionGetCenter(lv_lz));
    lv_droppod = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
    Wait(5.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(lv_lz), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    gv_bDSPings[0] = PingLastCreated();
    UnitKill(lv_droppod);
    autoECEA2F11_ae = 3;
    autoECEA2F11_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoECEA2F11_ai >= 0 && lv_loopint <= autoECEA2F11_ae) || (autoECEA2F11_ai <= 0 && lv_loopint >= autoECEA2F11_ae) ) ; lv_loopint += autoECEA2F11_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EnergyBattery", 0, 0, PointWithOffsetPolar(RegionGetCenter(lv_lz), RandomFixed(0.0, 1.0), libNtve_gf_RandomAngle()));
    }
    gv_bDSRegion[1] = RegionFromId(104);
    gv_bDSRegion[2] = RegionFromId(105);
    gv_bDSRegion[3] = RegionFromId(106);
    autoD4E3B9A6_ae = 3;
    autoD4E3B9A6_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoD4E3B9A6_ai >= 0 && lv_loopint <= autoD4E3B9A6_ae) || (autoD4E3B9A6_ai <= 0 && lv_loopint >= autoD4E3B9A6_ae) ) ; lv_loopint += autoD4E3B9A6_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BDS", 0, 0, RegionGetCenter(gv_bDSRegion[lv_loopint]));
        gv_bDS[lv_loopint] = UnitLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_bDSRegion[lv_loopint]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_bDSPings[lv_loopint] = PingLastCreated();
    }
    Wait(420.0, c_timeGame);
    while ((TriggerIsEnabled(gt_ApproachBDS) == true)) {
        if ((lv_penalty == 1)) {
            gf_MissionText(StringExternal("Param/Value/5E7AF517"));
        }
        else if (true) {
            gf_MissionText(StringExternal("Param/Value/CD5D162D"));
        }
        gf_SpawnUndead((lv_penalty * 2), "StalkerZombie", 1);
        gf_SpawnUndead((lv_penalty * gv_spawnCount), "Shredder", 1);
        gf_SpawnUndead((lv_penalty * gv_spawnCount), "Krill", 1);
        gf_SpawnUndead((lv_penalty * 2), "Lacerti", 1);
        gf_SpawnUndead(lv_penalty, "Arachnathid", 1);
        lv_penalty += 1;
        Wait(180.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Darkness_Init () {
    gt_Darkness = TriggerCreate("gt_Darkness_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acquire BDS
//--------------------------------------------------------------------------------------------------
bool gt_AcquireBDS_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "EnergyBattery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PingDestroy(gv_bDSPings[0]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcquireBDS_Init () {
    gt_AcquireBDS = TriggerCreate("gt_AcquireBDS_Func");
    TriggerEnable(gt_AcquireBDS, false);
    TriggerAddEventUnitInventoryChange(gt_AcquireBDS, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Approach BDS
//--------------------------------------------------------------------------------------------------
bool gt_ApproachBDS_Func (bool testConds, bool runActions) {
    int auto32C20905_ae;
    int auto32C20905_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_allcharged;

    // Variable Initialization
    lv_allcharged = true;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "EnergyBattery"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto32C20905_ae = 3;
    auto32C20905_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto32C20905_ai >= 0 && lv_loopint <= auto32C20905_ae) || (auto32C20905_ai <= 0 && lv_loopint >= auto32C20905_ae) ) ; lv_loopint += auto32C20905_ai ) {
        if ((UnitGetPropertyFixed(gv_bDS[lv_loopint], c_unitPropEnergyPercent, c_unitPropCurrent) <= 0.0) && (libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), gv_bDSRegion[lv_loopint]) == true)) {
            UnitRemove(EventUnitInventoryItem());
            UnitSetPropertyFixed(gv_bDS[lv_loopint], c_unitPropEnergyPercent, 100.0);
            PingDestroy(gv_bDSPings[lv_loopint]);
            SoundPlayOnUnit(SoundLink("Obliterate_Charge", -1), PlayerGroupAll(), gv_bDS[lv_loopint], 0.0, 100.0, 0.0);
        }

        if ((UnitGetPropertyFixed(gv_bDS[lv_loopint], c_unitPropEnergyPercent, c_unitPropCurrent) <= 0.0)) {
            lv_allcharged = false;
        }

    }
    if ((lv_allcharged == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gf_BlendFogNew(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 9.375);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_SucceedMission(45, StringExternal("Param/Value/B4A951E2"), -1);
        Wait(15.0, c_timeGame);
        gv_fogevent = false;
        if ((ObjectiveGetState(gv_optionalObj) == c_objectiveStateCompleted)) {
            ObjectiveSetState(gv_mainObj, c_objectiveStateHidden);
        }

        gf_MissionText(StringExternal("Param/Value/1B25A10C"));
        TriggerExecute(gt_Ch2Mission4, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApproachBDS_Init () {
    gt_ApproachBDS = TriggerCreate("gt_ApproachBDS_Func");
    TriggerEnable(gt_ApproachBDS, false);
    TriggerAddEventUnitInventoryChange(gt_ApproachBDS, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plague Vectors
//--------------------------------------------------------------------------------------------------
bool gt_PlagueVectors_Func (bool testConds, bool runActions) {
    int autoE611C906_ae;
    int autoE611C906_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE611C906_ae = (4 + gv_gamemode);
    autoE611C906_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoE611C906_ai >= 0 && lv_loopint <= autoE611C906_ae) || (autoE611C906_ai <= 0 && lv_loopint >= autoE611C906_ae) ) ; lv_loopint += autoE611C906_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlagueVector", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(RegionFromId(62)));
        UnitGroupAdd(gv_plaguevectors, UnitLastCreated());
        UnitSetScale(UnitLastCreated(), 50.0, 50.0, 50.0);
    }
    gf_MissionText(StringExternal("Param/Value/46293D9C"));
    gv_iDFAvailable = false;
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/96C847C2"));
    Wait(7.0, c_timeGame);
    TriggerEnable(gt_PlagueVectorLoop, true);
    TriggerEnable(gt_PlagueVectorEnd, true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/0E14521B"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/4D48D76E"));
    gf_MissionText(StringExternal("Param/Value/27E12F1E"));
    TimerStart(gv_missiontimer, (330.0 - (IntToFixed(gv_gamemode) * 25.0)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Morbus", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Grotesque", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlagueVectors_Init () {
    gt_PlagueVectors = TriggerCreate("gt_PlagueVectors_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plague Vector Loop
//--------------------------------------------------------------------------------------------------
bool gt_PlagueVectorLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scale;

    // Variable Initialization
    lv_scale = (100.0 - (50.0 * (TimerGetRemaining(gv_missiontimer) / (TimerGetRemaining(gv_missiontimer) + TimerGetElapsed(gv_missiontimer)))));

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_plaguevectors);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 3.0, 270.0);
            UnitSetScale(UnitGroupLoopCurrent(), lv_scale, lv_scale, lv_scale);
        }
        else {
            UnitGroupRemove(gv_plaguevectors, UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(gv_plaguevectors, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_PlagueVectorEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlagueVectorLoop_Init () {
    gt_PlagueVectorLoop = TriggerCreate("gt_PlagueVectorLoop_Func");
    TriggerEnable(gt_PlagueVectorLoop, false);
    TriggerAddEventTimePeriodic(gt_PlagueVectorLoop, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plague Vector End
//--------------------------------------------------------------------------------------------------
bool gt_PlagueVectorEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PlagueVectorLoop, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gv_iDFAvailable = true;
    if ((UnitGroupCount(gv_plaguevectors, c_unitCountAlive) == 0)) {
        gf_SucceedMission(65, StringExternal("Param/Value/973B8CF9"), -2);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        TriggerExecute(gt_Evacuation, true, false);
    }
    else {
        gf_FailMission(15, StringExternal("Param/Value/B1F8221C"), 8);
        gf_SpawnUndead(1, "Immussilus", 1);
        UnitGroupLoopBegin(gv_plaguevectors);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitCreate(RandomInt(3, 5), "Cursed", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        }
        UnitGroupLoopEnd();
        TriggerExecute(gt_Evacuation, true, false);
    }
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9B85611D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlagueVectorEnd_Init () {
    gt_PlagueVectorEnd = TriggerCreate("gt_PlagueVectorEnd_Func");
    TriggerEnable(gt_PlagueVectorEnd, false);
    TriggerAddEventTimer(gt_PlagueVectorEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thresher Maw
//--------------------------------------------------------------------------------------------------
bool gt_ThresherMaw_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/DCF9B464"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/FA358998"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/FB108BC3"));
    gf_SpawnUndead(1, "ThresherMaw", 1);
    gf_SpawnUndead(1, "ThresherMaw", 1);
    while (!((libNtve_gf_UnitGroupIsDead(UnitGroup("ThresherMaw", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == true))) {
        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(50, StringExternal("Param/Value/C8632134"), -2);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    TriggerExecute(gt_Evacuation, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThresherMaw_Init () {
    gt_ThresherMaw = TriggerCreate("gt_ThresherMaw_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch2 Mission 4
//--------------------------------------------------------------------------------------------------
bool gt_Ch2Mission4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(30.0, 45.0), c_timeGame);
    gf_SkipifOver();
    TriggerExecute(gt_Evacuation, true, false);
    gf_SetNewLighting("UA3Dawn", 600.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch2Mission4_Init () {
    gt_Ch2Mission4 = TriggerCreate("gt_Ch2Mission4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evacuation
//--------------------------------------------------------------------------------------------------
bool gt_Evacuation_Func (bool testConds, bool runActions) {
    int autoC1D4881A_ae;
    int autoC1D4881A_ai;
    int autoD4044BD1_ae;
    int autoD4044BD1_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_UndeadSpawning3, true);
    TriggerEnable(gt_ItemSpawn2, true);
    gf_MissionText(StringExternal("Param/Value/A2A179FC"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F15B3EE2"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/42A9E408"));
    Wait(RandomFixed(30.0, 90.0), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/45DBE644"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/89F536FF"));
    Wait(45.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B7A20DE1"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/34F08E8F"));
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/23080C6A"));
    Wait(30.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/16A93A3E"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/679B6C53"));
    Wait(30.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B88AA247"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/30321636"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/F4C78238"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/50990063"));
    TimerStart(gv_missiontimer, (235.0 + (IntToFixed(gv_gamemode) * 25.0)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_EvacuationTimeout, true);
    autoC1D4881A_ae = RandomInt(2, 3);
    autoC1D4881A_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoC1D4881A_ai >= 0 && lv_loopint <= autoC1D4881A_ae) || (autoC1D4881A_ai <= 0 && lv_loopint >= autoC1D4881A_ae) ) ; lv_loopint += autoC1D4881A_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[1]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[1], UnitLastCreatedGroup());
    }
    autoD4044BD1_ae = RandomInt(2, 3);
    autoD4044BD1_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoD4044BD1_ai >= 0 && lv_loopint <= autoD4044BD1_ae) || (autoD4044BD1_ai <= 0 && lv_loopint >= autoD4044BD1_ae) ) ; lv_loopint += autoD4044BD1_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[2]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[2], UnitLastCreatedGroup());
    }
    Wait(35.0, c_timeGame);
    SoundPlay(SoundLink("TRaynor03MusicEventA2", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    gf_SpawnUndead(3, "Bruchus", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Bruchus", 1);
        gf_SpawnUndead(1, "Grotesque", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Bruchus", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Evacuation_Init () {
    gt_Evacuation = TriggerCreate("gt_Evacuation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evacuation Timeout
//--------------------------------------------------------------------------------------------------
bool gt_EvacuationTimeout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(RegionFromId(14)), -15.0, 0.0), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
    gf_MissionText(StringExternal("Param/Value/EA22F382"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(14)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 8.0, 270.0);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    UnitGroupLoopBegin(UnitGroup("Civilian", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CivilianFemale", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PoliceOfficer", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PoliceOfficerShotgun", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupRemoveUnitGroup(gv_wanderers[1], gv_civilians);
    UnitGroupRemoveUnitGroup(gv_wanderers[2], gv_civilians);
    UnitGroupRemoveUnitGroup(gv_wanderers[3], gv_civilians);
    TriggerEnable(gt_EvacuationLoop, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacuationTimeout_Init () {
    gt_EvacuationTimeout = TriggerCreate("gt_EvacuationTimeout_Func");
    TriggerEnable(gt_EvacuationTimeout, false);
    TriggerAddEventTimer(gt_EvacuationTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evacuation Loop
//--------------------------------------------------------------------------------------------------
bool gt_EvacuationLoop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_civilians);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(14)) == true)) {
            UnitRemove(UnitGroupLoopCurrent());
            gv_civsevacuated = (gv_civsevacuated + 1);
        }
        else {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(14))), c_orderQueueReplace);
        }
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(gv_civilians, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_EvacuationPlayers, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacuationLoop_Init () {
    gt_EvacuationLoop = TriggerCreate("gt_EvacuationLoop_Func");
    TriggerEnable(gt_EvacuationLoop, false);
    TriggerAddEventTimePeriodic(gt_EvacuationLoop, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evacuation Players
//--------------------------------------------------------------------------------------------------
bool gt_EvacuationPlayers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_EvacuationLoop, false);
    if ((gv_civsevacuated > 0)) {
        gf_SucceedMission((gv_civsevacuated * 2), StringExternal("Param/Value/88D25115"), 0);
    }

    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    Wait(4.0, c_timeGame);
    gv_medevacregion = gv_lZs[RandomInt(1, 5)];
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(gv_medevacregion), -15.0, 0.0), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(gv_medevacregion)), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(gv_mEDEVAC, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_medevacregion), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 20.0, 270.0);
    gf_MissionText(StringExternal("Param/Value/9D6DB531"));
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D6F15936"));
    TimerStart(gv_missiontimer, (150.0 - (IntToFixed(gv_gamemode) * 7.5)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_EvacuationPlayerEnter, true);
    TriggerEnable(gt_EvacuationEnd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacuationPlayers_Init () {
    gt_EvacuationPlayers = TriggerCreate("gt_EvacuationPlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evacuation Player Enter
//--------------------------------------------------------------------------------------------------
bool gt_EvacuationPlayerEnter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "IonCannon"))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_medevacregion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    if ((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true)) {
        gf_SucceedMission(3, StringExternal("Param/Value/8179E8CA"), 0);
    }
    else {
        UnitGroupAdd(gv_transitionalgroup, EventUnit());
    }
    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            lv_allextracted = false;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_allextracted == true)) {
        TriggerExecute(gt_EvacuationEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacuationPlayerEnter_Init () {
    gt_EvacuationPlayerEnter = TriggerCreate("gt_EvacuationPlayerEnter_Func");
    TriggerEnable(gt_EvacuationPlayerEnter, false);
    TriggerAddEventUnitRegion(gt_EvacuationPlayerEnter, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_EvacuationPlayerEnter, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_EvacuationPlayerEnter, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_EvacuationPlayerEnter, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_EvacuationPlayerEnter, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Evacuation End
//--------------------------------------------------------------------------------------------------
bool gt_EvacuationEnd_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_EvacuationPlayerEnter, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    if ((RandomInt(0, 1) == 1)) {
        TriggerExecute(gt_Chapter3Love, true, false);
    }
    else {
        TriggerExecute(gt_Chapter3CitiusAltiusFortius, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EvacuationEnd_Init () {
    gt_EvacuationEnd = TriggerCreate("gt_EvacuationEnd_Func");
    TriggerEnable(gt_EvacuationEnd, false);
    TriggerAddEventTimer(gt_EvacuationEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2 - Valor
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2Valor_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/18BA42F9"));
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/CD672AE9"));
    Wait(4.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_ChapterIntermissionOff();
    TriggerEnable(gt_UndeadSpawning2, true);
    TriggerExecute(gt_Ch2bMission1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2Valor_Init () {
    gt_Chapter2Valor = TriggerCreate("gt_Chapter2Valor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch2b Mission 1
//--------------------------------------------------------------------------------------------------
bool gt_Ch2bMission1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(15.0, 60.0), c_timeGame);
    gf_SkipifOver();
    gf_Reinforcements();
    if ((gv_fogevent == true)) {
        gf_MissionText(StringExternal("Param/Value/D978D909"));
        while (!((gv_fogevent == false))) {
            Wait(1.0, c_timeGame);
        }
    }

    TriggerExecute(gt_Thanatos, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch2bMission1_Init () {
    gt_Ch2bMission1 = TriggerCreate("gt_Ch2bMission1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos
//--------------------------------------------------------------------------------------------------
bool gt_Thanatos_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    unit lv_thanatos;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_fogevent = true;
    gf_BlendFogNew(0.0, 0.0, 0.0, 60.0, 1.0, 11.0, 9.375);
    SoundPlay(SoundLink("DarknessFalls", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeGame);
    SoundPlay(SoundLink("THorner04MusicEventB", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundPlay(SoundLink("HybridF_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Thanatos", 0, 14, RegionRandomPoint(gv_bossSpawnRegion));
    UnitBehaviorAdd(UnitLastCreated(), "DifficultyModifierBoss", UnitLastCreated(), (gv_gamemode - 1));
    lv_thanatos = UnitLastCreated();
    gv_infestationLevel += 2;
    gf_RegisterUnitEntersLeavesRegion(gt_ThanatosMovementLoop, lv_thanatos, RegionEntireMap(), true);
    gf_RegisterUnitTakesDamageEvent(gt_ThanatosIsAttacked, lv_thanatos, c_unitDamageNonFatal, c_unitDamageTypeAny, null);
    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D27C055B"));
    Wait(9.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/05355067"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/4B7D91AC"));
    while (!((UnitIsAlive(lv_thanatos) == false) && (gv_gameOver == false))) {
        Wait(1.0, c_timeGame);
    }
    gv_infestationLevel -= 2;
    SoundPlay(SoundLink("HybridADeath", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(2.0, c_timeGame);
    gf_SucceedMission(45, StringExternal("Param/Value/AD1885CE"), -1);
    Wait(2.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/33F7D325"));
    Wait(2.0, c_timeGame);
    gf_BlendFogNew(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 9.375);
    Wait(10.0, c_timeGame);
    gv_fogevent = false;
    TriggerExecute(gt_Ch2bMission2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Thanatos_Init () {
    gt_Thanatos = TriggerCreate("gt_Thanatos_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch2b Mission 2
//--------------------------------------------------------------------------------------------------
bool gt_Ch2bMission2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(5.0, 10.0), c_timeGame);
    gf_SkipifOver();
    TriggerExecute(gt_GraveDigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch2bMission2_Init () {
    gt_Ch2bMission2 = TriggerCreate("gt_Ch2bMission2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grave Digger
//--------------------------------------------------------------------------------------------------
bool gt_GraveDigger_Func (bool testConds, bool runActions) {
    int autoA6D19DDB_ae;
    int autoA6D19DDB_ai;
    int auto3ED527A7_n;
    int auto3ED527A7_i;

    // Variable Declarations
    int lv_int;
    int lv_array;
    point[31] lv_graves;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_graves[1] = PointFromId(2601);
    lv_graves[2] = PointFromId(2602);
    lv_graves[3] = PointFromId(2603);
    lv_graves[4] = PointFromId(2604);
    lv_graves[5] = PointFromId(2605);
    lv_graves[6] = PointFromId(2606);
    lv_graves[7] = PointFromId(2607);
    lv_graves[8] = PointFromId(2608);
    lv_graves[9] = PointFromId(2609);
    lv_graves[10] = PointFromId(2610);
    lv_graves[11] = PointFromId(2611);
    lv_graves[12] = PointFromId(2612);
    lv_graves[13] = PointFromId(2613);
    lv_graves[14] = PointFromId(2614);
    lv_graves[15] = PointFromId(2615);
    lv_graves[16] = PointFromId(2616);
    lv_graves[17] = PointFromId(2617);
    lv_graves[18] = PointFromId(2618);
    lv_graves[19] = PointFromId(2619);
    lv_graves[20] = PointFromId(2620);
    lv_graves[21] = PointFromId(2621);
    lv_graves[22] = PointFromId(2622);
    lv_graves[23] = PointFromId(2623);
    lv_graves[24] = PointFromId(2624);
    lv_graves[25] = PointFromId(2625);
    lv_graves[26] = PointFromId(2626);
    lv_graves[27] = PointFromId(2627);
    lv_graves[28] = PointFromId(2628);
    lv_graves[29] = PointFromId(2629);
    lv_graves[30] = PointFromId(2630);
    gv_sensorcount = (7 + gv_gamemode);
    gf_MissionText(StringExternal("Param/Value/DBE94C62"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/8E6704CD"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, (StringExternal("Param/Value/47199C42") + IntToText(gv_sensorcount) + StringExternal("Param/Value/C30AFF75")));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/5B2761E9"));
    TimerStart(gv_missiontimer, 360.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    autoA6D19DDB_ae = gv_sensorcount;
    autoA6D19DDB_ai = 1;
    lv_int = 1;
    for ( ; ( (autoA6D19DDB_ai >= 0 && lv_int <= autoA6D19DDB_ae) || (autoA6D19DDB_ai <= 0 && lv_int >= autoA6D19DDB_ae) ) ; lv_int += autoA6D19DDB_ai ) {
        while (true) {
            lv_array = RandomInt(1, 30);
            if ((lv_graves[lv_array] != null)) {
                break;
            }

        }
        gv_graveSites[lv_int] = RegionCircle(lv_graves[lv_array], 2.0);
        lv_graves[lv_array] = null;
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_graveSites[lv_int]));
        gv_graveSiteActors[lv_int] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.500000 0.000000 s");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_graveSites[lv_int]), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 15.0, 270.0);
    }
    TriggerEnable(gt_GraveDiggerCollectSampleLoop, true);
    Wait(45.0, c_timeGame);
    SoundPlay(SoundLink("THorner04MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Gourmand", 2);
    Wait(15.0, c_timeGame);
    auto3ED527A7_n = gv_gamemode;
    for (auto3ED527A7_i = 1; auto3ED527A7_i <= auto3ED527A7_n; auto3ED527A7_i += 1) {
        gf_SpawnUndead(1, "Morbus", 1);
        gf_SpawnUndead(3, "Boomer", 1);
        gf_SpawnUndead(3, "Swollen", 2);
        gf_SpawnUndead(1, "Spitter", 1);
        gf_SpawnUndead(1, "Raisuli", 2);
        gf_SpawnUndead(1, "Cursed", 3);
        Wait(15.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GraveDigger_Init () {
    gt_GraveDigger = TriggerCreate("gt_GraveDigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grave Digger Collect Sample Loop
//--------------------------------------------------------------------------------------------------
bool gt_GraveDiggerCollectSampleLoop_Func (bool testConds, bool runActions) {
    int auto7B646A6A_ae;
    int auto7B646A6A_ai;
    int auto2B575C31_ae;
    int auto2B575C31_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_alldone;

    // Variable Initialization
    lv_alldone = true;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkipifOver();
    auto7B646A6A_ae = gv_sensorcount;
    auto7B646A6A_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto7B646A6A_ai >= 0 && lv_loopint <= auto7B646A6A_ae) || (auto7B646A6A_ai <= 0 && lv_loopint >= auto7B646A6A_ae) ) ; lv_loopint += auto7B646A6A_ai ) {
        if ((gv_graveSiteActors[lv_loopint] != null)) {
            lv_alldone = false;
        }

    }
    if ((lv_alldone == true)) {
        gf_MissionText(StringExternal("Param/Value/3FAB8CDF"));
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gv_infestationLevel = (gv_infestationLevel - 2);
        TriggerExecute(gt_Ch2bMission3, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    if ((TimerGetRemaining(gv_missiontimer) <= 1.0)) {
        gf_FailMission(10, StringExternal("Param/Value/0B80B77C"), 5);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        TriggerExecute(gt_Ch2bMission3, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto2B575C31_ae = gv_sensorcount;
        auto2B575C31_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto2B575C31_ai >= 0 && lv_loopint <= auto2B575C31_ae) || (auto2B575C31_ai <= 0 && lv_loopint >= auto2B575C31_ae) ) ; lv_loopint += auto2B575C31_ai ) {
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), gv_graveSites[lv_loopint]) == true) && (UnitHasBehavior(UnitGroupLoopCurrent(), "CollectingSampleGrave") == false) && (UnitGroupCount(UnitGroup(null, c_playerAny, gv_graveSites[lv_loopint], UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (gv_graveSiteActors[lv_loopint] != null) && (UnitGroupHasUnit(gv_graveDiggers, UnitGroupLoopCurrent()) == false)) {
                gf_CollectGraveSample(UnitGroupLoopCurrent(), gv_graveSites[lv_loopint], lv_loopint);
            }

        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GraveDiggerCollectSampleLoop_Init () {
    gt_GraveDiggerCollectSampleLoop = TriggerCreate("gt_GraveDiggerCollectSampleLoop_Func");
    TriggerEnable(gt_GraveDiggerCollectSampleLoop, false);
    TriggerAddEventTimePeriodic(gt_GraveDiggerCollectSampleLoop, 1.01, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch2b Mission 3
//--------------------------------------------------------------------------------------------------
bool gt_Ch2bMission3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_Reinforcements();
    Wait(RandomFixed(5.0, 10.0), c_timeGame);
    gf_SkipifOver();
    TriggerExecute(gt_DefendThalim, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch2bMission3_Init () {
    gt_Ch2bMission3 = TriggerCreate("gt_Ch2bMission3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Killed
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_civilians, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_refugeekilled = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeKilled_Init () {
    gt_RefugeeKilled = TriggerCreate("gt_RefugeeKilled_Func");
    TriggerEnable(gt_RefugeeKilled, false);
    TriggerAddEventUnitDied(gt_RefugeeKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defend Thalim
//--------------------------------------------------------------------------------------------------
bool gt_DefendThalim_Func (bool testConds, bool runActions) {
    int auto07824B79_n;
    int auto07824B79_i;
    int auto6422899E_n;
    int auto6422899E_i;
    int autoBDA4AA86_n;
    int autoBDA4AA86_i;
    int autoFA647B28_n;
    int autoFA647B28_i;
    int auto4D89A680_ae;
    int auto4D89A680_ai;
    int autoE6B77EDE_n;
    int autoE6B77EDE_i;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ConvoyLoop, false);
    TriggerEnable(gt_ConvoyUnitDies, false);
    TriggerEnable(gt_ConvoyLeave, false);
    TriggerEnable(gt_RefugeeKilled, true);
    gf_LandPhantom(RegionGetCenter(RegionFromId(14)));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/D0203390"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(46.67, 73.33, 73.33, 0.00), 12.0, 270.0);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitCreate(1, gf_randomminitype(), c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), PointWithOffsetPolar(RegionGetCenter(RegionFromId(14)), 4.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
    }
    PlayerGroupLoopEnd();
    Wait(5.0, c_timeGame);
    gf_TakeoffPhantom(gv_lastlandedphantom);
    auto07824B79_n = 3;
    for (auto07824B79_i = 1; auto07824B79_i <= auto07824B79_n; auto07824B79_i += 1) {
        UnitCreate(1, "MK44SentryGunPacked", 0, 0, PointWithOffsetPolar(RegionGetCenter(RegionFromId(14)), 4.0, libNtve_gf_RandomAngle()), 0.0);
    }
    auto6422899E_n = 2;
    for (auto6422899E_i = 1; auto6422899E_i <= auto6422899E_n; auto6422899E_i += 1) {
        UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(129)), 0.0);
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(142));
        UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(107)), 0.0);
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(142));
        UnitCreate(1, gf_RandomPoliceType(), 0, 0, RegionRandomPoint(RegionFromId(108)), 0.0);
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(142));
    }
    UnitGroupLoopBegin(UnitGroup("Civilian", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CivilianFemale", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PoliceOfficer", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PoliceOfficerShotgun", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_MissionText(StringExternal("Param/Value/07D0B592"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/DE051D88"));
    Wait(9.0, c_timeGame);
    TimerStart(gv_missiontimer, 720.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/B519B34D"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/F15C83BA"));
    ObjectiveCreate(StringExternal("Param/Value/F698B799"), StringExternal("Param/Value/A4FB7619"), c_objectiveStateActive, true);
    gv_secondObj = ObjectiveLastCreated();
    Wait(15.0, c_timeGame);
    SoundPlay(SoundLink("THorner04MusicEventAA", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(15.0, c_timeGame);
    gf_SpawnUndead(1, "Arachnathid", 1);
    autoBDA4AA86_n = 3;
    for (autoBDA4AA86_i = 1; autoBDA4AA86_i <= autoBDA4AA86_n; autoBDA4AA86_i += 1) {
        gf_SpawnRefugees();
        gf_SpawnUndead(1, "Gourmand", 1);
        if ((gv_gamemode >= 3)) {
            gf_SpawnUndead(1, "Lacerti", 2);
            gf_SpawnUndead(1, "Raisuli", 2);
            gf_SpawnUndead(3, "Hunter", 2);
        }

        autoFA647B28_n = gv_gamemode;
        for (autoFA647B28_i = 1; autoFA647B28_i <= autoFA647B28_n; autoFA647B28_i += 1) {
            gf_SpawnUndead(1, "Morbus", 2);
            gf_SpawnUndead(3, "Swollen", 2);
            gf_SpawnUndead(3, "Swollen", 2);
            gf_SpawnUndead(1, "Spitter", 2);
            gf_SpawnUndead(1, "Cursed", 3);
            gf_SpawnUndead(20, "Hopper", 5);
            Wait(2.0, c_timeGame);
        }
        Wait(165.0, c_timeGame);
    }
    gf_SpawnRefugees();
    if ((gv_averageXP >= 50000)) {
        gf_SpawnUndead(1, "Metasis", 1);
    }

    if ((gv_averageXP >= 80000)) {
        gf_SpawnUndead(1, "Grotesque", 1);
    }

    while (!(((TimerGetRemaining(gv_missiontimer) <= 1.0)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_UndeadSpawning3, true);
    TriggerEnable(gt_ItemSpawn2, true);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
    gf_MissionText(StringExternal("Param/Value/D37852F7"));
    Wait(15.0, c_timeGame);
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, StringExternal("Param/Value/257C1576"));
    ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/26330855"));
    gv_patrolroute[1] = PointFromId(2326);
    gv_patrolroute[2] = PointFromId(1793);
    gv_patrolroute[3] = PointFromId(1788);
    gv_patrolroute[4] = PointFromId(1787);
    gv_patrolroute[5] = PointFromId(1786);
    gv_patrolroute[6] = PointFromId(1785);
    gv_patrolroute[7] = PointFromId(1777);
    gv_patrolroute[8] = PointFromId(1778);
    gv_patrolroute[9] = PointFromId(2324);
    gv_patrolroute[10] = PointFromId(2323);
    gv_patrolroute[11] = PointFromId(2322);
    gv_patrolroute[12] = PointFromId(2631);
    gv_patrolmax = 12;
    gv_pauseSpawning = true;
    gv_convoyfinal = false;
    TriggerEnable(gt_RefugeeConvoyDies, true);
    TriggerEnable(gt_RefugeeConvoyLeave, true);
    TriggerEnable(gt_RefugeeConvoyLoop, true);
    UnitGroupClear(gv_convoy);
    auto4D89A680_ae = 5;
    auto4D89A680_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto4D89A680_ai >= 0 && lv_loopint <= auto4D89A680_ae) || (auto4D89A680_ai <= 0 && lv_loopint >= auto4D89A680_ae) ) ; lv_loopint += auto4D89A680_ai ) {
        if ((lv_loopint == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "ColonistTransport", c_unitCreateIgnorePlacement, 13, RegionGetCenter(RegionFromId(19)), gv_patrolroute[gv_patrolnext]);
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "LMTV", c_unitCreateIgnorePlacement, 13, RegionGetCenter(RegionFromId(19)), gv_patrolroute[gv_patrolnext]);
        }
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        UnitGroupAdd(gv_convoy, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), gv_patrolroute[gv_patrolnext]), c_orderQueueReplace);
        if ((lv_loopint == 1)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(19)), ColorWithAlpha(0.00, 50.20, 50.20, 0.00), 0.0, 270.0);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/3A726D60"));
            gv_missionping = PingLastCreated();
        }

        Wait(3.0, c_timeGame);
    }
    Wait(RandomFixed(0.0, 8.0), c_timeGame);
    gv_pauseSpawning = false;
    Wait(15.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Raisuli", 2);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }

    autoE6B77EDE_n = gv_gamemode;
    for (autoE6B77EDE_i = 1; autoE6B77EDE_i <= autoE6B77EDE_n; autoE6B77EDE_i += 1) {
        Wait(10.0, c_timeGame);
        gf_SpawnUndead(1, "Morbus", 3);
        gf_SpawnUndead(1, "Raisuli", 3);
        gf_SpawnUndead(1, "Cursed", 3);
        gf_SpawnUndead(2, "Bruchus", 2);
        gf_SpawnUndead(7, "Glutton", 2);
        Wait(10.0, c_timeGame);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndeadImmediate(4, "Charger", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Boomer", 1);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefendThalim_Init () {
    gt_DefendThalim = TriggerCreate("gt_DefendThalim_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Convoy Loop
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeConvoyLoop_Func (bool testConds, bool runActions) {
    int autoDE52FEBB_ae;
    int autoDE52FEBB_ai;

    // Variable Declarations
    int lv_loopint;
    unit lv_tempunit;
    unit lv_nextunit;
    point lv_temppoint;
    timer lv_timeouttimer;

    // Variable Initialization
    lv_timeouttimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    PingSetUnit(gv_missionping, UnitGroupUnit(gv_convoy, 1));
    if ((UnitGroupCount(gv_civilians, c_unitCountAlive) == 0) && (gv_convoyfinal == false)) {
        gv_convoyfinal = true;
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        gf_MissionText(StringExternal("Param/Value/EFAB43C8"));
        gv_patrolroute[1] = PointFromId(1785);
        gv_patrolroute[2] = RegionGetCenter(RegionFromId(41));
        gv_patrolmax = 2;
        gv_patrolnext = 1;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(gv_convoy, 1)), gv_patrolroute[gv_patrolnext]) <= 2.0)) {
        if ((gv_patrolnext == gv_patrolmax) && (RegionContainsPoint(RegionFromId(24), gv_patrolroute[gv_patrolnext]) == true)) {
            TriggerEnable(TriggerGetCurrent(), false);
            TimerStart(lv_timeouttimer, 60.0, false, c_timeGame);
            gv_convoyfinal = true;
            gf_MissionText(StringExternal("Param/Value/9D24204B"));
            PlayerGroupLoopBegin(gv_players);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                UnitGroupLoopBegin(gv_civilians);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, PlayerGroupLoopCurrent());
                }
                UnitGroupLoopEnd();
            }
            PlayerGroupLoopEnd();
            lv_loopint = 1;
            UnitGroupLoopBegin(gv_civilians);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitSetCustomValue(UnitGroupLoopCurrent(), 0, IntToFixed(lv_loopint));
                lv_loopint = (lv_loopint + 1);
                if ((lv_loopint > UnitGroupCount(gv_convoy, c_unitCountAlive))) {
                    lv_loopint = 1;
                }

            }
            UnitGroupLoopEnd();
            while (true) {
                if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
                    return true;
                }

                if ((UnitGroupCount(gv_civilians, c_unitCountAlive) == 0)) {
                    break;
                }
                else {
                    UnitGroupLoopBegin(gv_civilians);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGroupCount(gv_convoy, c_unitCountAlive) < FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0)))) {
                            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, 1.0);
                        }

                        lv_tempunit = UnitGroupUnit(gv_convoy, FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0)));
                        lv_temppoint = PointWithOffsetPolar(UnitGetPosition(lv_tempunit), 2.0, (UnitGetFacing(lv_tempunit) - 180.0));
                        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_temppoint) <= 3.0)) {
                            UnitSetCustomValue(lv_tempunit, 0, (UnitGetCustomValue(lv_tempunit, 0) + 1.0));
                            UnitRemove(UnitGroupLoopCurrent());
                        }
                        else {
                            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), lv_temppoint), c_orderQueueReplace);
                        }
                    }
                    UnitGroupLoopEnd();
                }
                if ((TimerGetRemaining(lv_timeouttimer) <= 1.0)) {
                    UnitGroupLoopBegin(gv_civilians);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        lv_tempunit = UnitGroupUnit(gv_convoy, FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0)));
                        UnitSetCustomValue(lv_tempunit, 0, (UnitGetCustomValue(lv_tempunit, 0) + 1.0));
                        UnitRemove(UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    break;
                }

                Wait(2.0, c_timeGame);
            }
            ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
            gf_MissionText(StringExternal("Param/Value/C26AFB2A"));
            gv_patrolroute[1] = PointFromId(2325);
            gv_patrolroute[2] = PointFromId(1778);
            gv_patrolroute[3] = PointFromId(1777);
            gv_patrolroute[4] = PointFromId(1785);
            gv_patrolroute[5] = RegionGetCenter(RegionFromId(41));
            gv_patrolmax = 5;
            gv_patrolnext = 1;
            TriggerEnable(TriggerGetCurrent(), true);
        }
        else {
            if ((gv_patrolnext < gv_patrolmax)) {
                gv_patrolnext = (gv_patrolnext + 1);
            }

        }
    }

    autoDE52FEBB_ae = UnitGroupCount(gv_convoy, c_unitCountAll);
    autoDE52FEBB_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoDE52FEBB_ai >= 0 && lv_loopint <= autoDE52FEBB_ae) || (autoDE52FEBB_ai <= 0 && lv_loopint >= autoDE52FEBB_ae) ) ; lv_loopint += autoDE52FEBB_ai ) {
        lv_tempunit = UnitGroupUnit(gv_convoy, lv_loopint);
        if ((lv_loopint == 1)) {
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), gv_patrolroute[gv_patrolnext]), c_orderQueueReplace);
        }
        else {
            lv_nextunit = UnitGroupUnit(gv_convoy, (lv_loopint - 1));
            if ((DistanceBetweenPoints(UnitGetPosition(lv_tempunit), UnitGetPosition(lv_nextunit)) >= 15.0)) {
                UnitBehaviorAdd(lv_tempunit, "CatchingUp", lv_tempunit, 1);
            }
            else {
                UnitBehaviorRemove(lv_tempunit, "CatchingUp", 1);
            }
            UnitIssueOrder(lv_tempunit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_nextunit), 5.0, AngleBetweenPoints(UnitGetPosition(lv_nextunit), UnitGetPosition(lv_tempunit)))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeConvoyLoop_Init () {
    gt_RefugeeConvoyLoop = TriggerCreate("gt_RefugeeConvoyLoop_Func");
    TriggerEnable(gt_RefugeeConvoyLoop, false);
    TriggerAddEventTimePeriodic(gt_RefugeeConvoyLoop, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Convoy Leave
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeConvoyLeave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_RefugeeConvoyDies, false);
    UnitRemove(EventUnit());
    gf_SucceedMission(10, StringExternal("Param/Value/4063C18B"), 0);
    if ((UnitGetCustomValue(EventUnit(), 0) >= 1)) {
        gf_SucceedMission((FixedToInt(UnitGetCustomValue(EventUnit(), 0)) * 7), (FixedToText(UnitGetCustomValue(EventUnit(), 0), c_fixedPrecisionAny) + StringExternal("Param/Value/7D01C40A")), 0);
    }

    if ((UnitGetCustomValue(EventUnit(), 0) >= 8.0)) {
        gv_infestationLevel = (gv_infestationLevel - 1);
    }

    gv_convoyvehiclessafe = (gv_convoyvehiclessafe + 1);
    TriggerEnable(gt_RefugeeConvoyDies, true);
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_RefugeeConvoyEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeConvoyLeave_Init () {
    gt_RefugeeConvoyLeave = TriggerCreate("gt_RefugeeConvoyLeave_Func");
    TriggerEnable(gt_RefugeeConvoyLeave, false);
    TriggerAddEventUnitRegion(gt_RefugeeConvoyLeave, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Convoy Dies
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeConvoyDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_convoy, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_refugeekilled = true;
    UnitGroupRemove(gv_convoy, EventUnit());
    if ((UnitGroupCount(gv_convoy, c_unitCountAlive) == 0)) {
        ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
        gf_FailMission(15, StringExternal("Param/Value/86A1665B"), 5);
        TriggerExecute(gt_RefugeeConvoyEnd, true, false);
    }
    else {
        gf_MissionText(StringExternal("Param/Value/5023853F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeConvoyDies_Init () {
    gt_RefugeeConvoyDies = TriggerCreate("gt_RefugeeConvoyDies_Func");
    TriggerEnable(gt_RefugeeConvoyDies, false);
    TriggerAddEventUnitDied(gt_RefugeeConvoyDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Convoy End
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeConvoyEnd_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RefugeeConvoyDies, false);
    TriggerEnable(gt_RefugeeConvoyLeave, false);
    TriggerEnable(gt_RefugeeConvoyLoop, false);
    PingDestroy(gv_missionping);
    gf_MissionText(StringExternal("Param/Value/F7A689B6"));
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/6D508AB3"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/1C92CE0F"));
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(41)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4C0F82B6"));
    gv_missionping = PingLastCreated();
    TriggerEnable(gt_PlayerLeaveAO, true);
    TimerStart(gv_missiontimer, 90.0, false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(2.0, c_timeGame);
    if ((gv_refugeekilled == false)) {
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            gf_AwardMedal(11, PlayerGroupLoopCurrent(), 600, StringExternal("Param/Value/CA7C73FB"));
        }
        PlayerGroupLoopEnd();
    }

    while (!(((TimerGetRemaining(gv_missiontimer) <= 1.0) || (TriggerIsEnabled(gt_PlayerLeaveAO) == false)))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(gv_missionping);
    if ((TriggerIsEnabled(gt_PlayerLeaveAO) == true)) {
        TriggerEnable(gt_PlayerLeaveAO, false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        if ((RandomInt(0, 1) == 1)) {
            TriggerExecute(gt_Chapter3Love, true, false);
        }
        else {
            TriggerExecute(gt_Chapter3CitiusAltiusFortius, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeConvoyEnd_Init () {
    gt_RefugeeConvoyEnd = TriggerCreate("gt_RefugeeConvoyEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leave AO
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaveAO_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "IonCannon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    if ((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true)) {
        gf_SucceedMission(3, StringExternal("Param/Value/5A57DB74"), 0);
    }
    else {
        UnitGroupAdd(gv_transitionalgroup, EventUnit());
    }
    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            lv_allextracted = false;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_allextracted == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        if ((RandomInt(0, 1) == 1)) {
            TriggerExecute(gt_Chapter3Love, true, false);
        }
        else {
            TriggerExecute(gt_Chapter3CitiusAltiusFortius, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaveAO_Init () {
    gt_PlayerLeaveAO = TriggerCreate("gt_PlayerLeaveAO_Func");
    TriggerEnable(gt_PlayerLeaveAO, false);
    TriggerAddEventUnitRegion(gt_PlayerLeaveAO, null, RegionFromId(41), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 3 - Love
//--------------------------------------------------------------------------------------------------
bool gt_Chapter3Love_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hull;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MRL", 0, 0, RegionRandomPoint(RegionFromId(80)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MRL", 0, 0, RegionRandomPoint(RegionFromId(80)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FlareGun", 0, 0, RegionRandomPoint(RegionFromId(80)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FlareGun", 0, 0, RegionRandomPoint(RegionFromId(80)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(RegionFromId(80)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(RegionFromId(80)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(RegionFromId(80)));
    gf_ChapterIntermissionOn();
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_Enemy);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/FD00DAD9"));
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    Wait(3.0, c_timeGame);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UnitCreate(1, "Hull", 0, 0, PointFromId(2472), 270.0);
    lv_hull = UnitLastCreated();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2487), 0.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/52B37198"));
    Wait(4.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogCreate(1200, 800, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 800, c_anchorCenter, 0, 0, StringExternal("Param/Value/BBAB192B"), ColorWithAlpha(0,0,0,0), true, 10.0);
    SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(20.0, c_timeGame);
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogDestroy(DialogLastCreated());
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitRemove(lv_hull);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2154), 0.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(0.5, c_timeGame);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2422), 5.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(1.5, c_timeGame);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == false) && (gv_mod_1life == false)) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "ReviveModifyUnit", UnitGroupLoopCurrent());
            Wait(0.1, c_timeGame);
        }

        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(79)), false);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(RegionFromId(80)), 4.0, (30.0 * IntToFixed(UnitGetOwner(UnitGroupLoopCurrent()))))), c_orderQueueReplace);
        }

        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_transitionalgroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(79)), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(80))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/381457A1"));
    Wait(3.5, c_timeGame);
    gf_ChapterIntermissionOff();
    TriggerExecute(gt_Ch3Mission1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter3Love_Init () {
    gt_Chapter3Love = TriggerCreate("gt_Chapter3Love_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3 Mission 1
//--------------------------------------------------------------------------------------------------
bool gt_Ch3Mission1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkipifOver();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_Enemy);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_RAOutpost, true, false);
    if ((RandomInt(0, 3) == 1)) {
        while (!((gv_fogevent == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_BlendFogNew(50.0, 50.0, 50.0, 6.0, 1.0, 5.0, 62.5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3Mission1_Init () {
    gt_Ch3Mission1 = TriggerCreate("gt_Ch3Mission1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RA Outpost
//--------------------------------------------------------------------------------------------------
bool gt_RAOutpost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/BD8BB61B"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/A484BBD3"));
    if ((gv_gamemode == 1)) {
        SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGun", 0, 15, PointFromId(2425));
    if ((gv_gamemode == 1)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGun", 0, 15, PointFromId(2442));
    if ((gv_gamemode == 1)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGun", 0, 15, PointFromId(2443));
    if ((gv_gamemode == 1)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0, 270.0);
    }

    TriggerEnable(gt_EnterRAOutpost, true);
    TriggerEnable(gt_UseRAOutpostComputer, true);
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/1DEAC053"));
    Wait(25.0, c_timeGame);
    if ((gv_gamemode >= 3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(2, 3), "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(27)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(2, 3), "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(82)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    }

    if ((gv_gamemode >= 4)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ignis", 0, 15, RegionRandomPoint(RegionFromId(14)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CombatEngineerMini", 0, 15, RegionRandomPoint(RegionFromId(14)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitBehaviorAdd(UnitLastCreated(), "ClusterRocketsAIIgnis", UnitLastCreated(), 1);
    }

    while (true) {
        Wait(400.0, c_timeGame);
        if ((TriggerIsEnabled(gt_Ch3Mission2) == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ignis", 0, 15, RegionRandomPoint(gv_spawnRegion));
            UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CombatEngineerMini", 0, 15, RegionRandomPoint(gv_spawnRegion));
            UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
            UnitBehaviorAdd(UnitLastCreated(), "ClusterRocketsAIIgnis", UnitLastCreated(), 1);
            libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(2, 3), "InfantryRifleman", 0, 15, RegionRandomPoint(gv_spawnRegion));
            UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RAOutpost_Init () {
    gt_RAOutpost = TriggerCreate("gt_RAOutpost_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter RA Outpost
//--------------------------------------------------------------------------------------------------
bool gt_EnterRAOutpost_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_MissionText(StringExternal("Param/Value/B253732B"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterRAOutpost_Init () {
    gt_EnterRAOutpost = TriggerCreate("gt_EnterRAOutpost_Func");
    TriggerEnable(gt_EnterRAOutpost, false);
    TriggerAddEventUnitRegion(gt_EnterRAOutpost, null, RegionFromId(55), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use RA Outpost Computer
//--------------------------------------------------------------------------------------------------
bool gt_UseRAOutpostComputer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E17F2707"));
    Wait(3.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("UI_BnetClick", -1), PlayerGroupAll(), RegionGetCenter(RegionFromId(56)), 0.0, 100.0, 0.0);
    Wait(0.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CCADF197"));
    Wait(3.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/EC4EA638"));
    Wait(4.0, c_timeGame);
    gf_SucceedMission(15, StringExternal("Param/Value/14A816A5"), 0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_Ch3Mission2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseRAOutpostComputer_Init () {
    gt_UseRAOutpostComputer = TriggerCreate("gt_UseRAOutpostComputer_Func");
    TriggerEnable(gt_UseRAOutpostComputer, false);
    TriggerAddEventUnitRegion(gt_UseRAOutpostComputer, null, RegionFromId(56), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3 Mission 2
//--------------------------------------------------------------------------------------------------
bool gt_Ch3Mission2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(15.0, 30.0), c_timeGame);
    gf_SkipifOver();
    TriggerExecute(gt_RASnipers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3Mission2_Init () {
    gt_Ch3Mission2 = TriggerCreate("gt_Ch3Mission2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RA Snipers
//--------------------------------------------------------------------------------------------------
bool gt_RASnipers_Func (bool testConds, bool runActions) {
    int autoE6352F0F_ae;
    int autoE6352F0F_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    RegionAddRegion(RegionFromId(81), RegionFromId(82));
    RegionAddRegion(RegionFromId(81), RegionFromId(83));
    RegionAddRegion(RegionFromId(81), RegionFromId(84));
    RegionAddRegion(RegionFromId(81), RegionFromId(85));
    RegionAddRegion(RegionFromId(81), RegionFromId(86));
    RegionAddRegion(RegionFromId(81), RegionFromId(87));
    RegionAddRegion(RegionFromId(81), RegionFromId(88));
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Ally);
    if ((gv_gamemode == 1)) {
        SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    autoE6352F0F_ae = (4 + gv_gamemode);
    autoE6352F0F_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoE6352F0F_ai >= 0 && lv_loopint <= autoE6352F0F_ae) || (autoE6352F0F_ai <= 0 && lv_loopint >= autoE6352F0F_ae) ) ; lv_loopint += autoE6352F0F_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sniper", 0, 15, RegionRandomPoint(RegionFromId(81)));
        UnitBehaviorAdd(UnitLastCreated(), "BinocularAIHero", UnitLastCreated(), 1);
        UnitGroupAdd(gv_snipers, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        if ((gv_gamemode == 1)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 20.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/7BF26DB6"));
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(0, 2), "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(81)));
    }
    if ((gv_gamemode >= 3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ignis", 0, 15, RegionRandomPoint(RegionFromId(2)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    }

    gf_MissionText(StringExternal("Param/Value/15CED259"));
    Wait(4.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/DE879E16"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/259666A2"));
    TimerStart(gv_missiontimer, (320.0 - (IntToFixed(gv_gamemode) * 12.0)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_RASniperTimeout, true);
    TriggerEnable(gt_SniperKilled, true);
    gf_SpawnUndead(12, "Krill", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RASnipers_Init () {
    gt_RASnipers = TriggerCreate("gt_RASnipers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RA Sniper Timeout
//--------------------------------------------------------------------------------------------------
bool gt_RASniperTimeout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SniperKilled, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_FailMission(10, StringExternal("Param/Value/AA5CDF51"), 5);
    TriggerExecute(gt_Ch3Mission3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RASniperTimeout_Init () {
    gt_RASniperTimeout = TriggerCreate("gt_RASniperTimeout_Func");
    TriggerEnable(gt_RASniperTimeout, false);
    TriggerAddEventTimer(gt_RASniperTimeout, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sniper Killed
//--------------------------------------------------------------------------------------------------
bool gt_SniperKilled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Sniper"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/F314E8AD"));
    if ((UnitGroupCount(gv_snipers, c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_RASniperTimeout, false);
        gf_SucceedMission(50, StringExternal("Param/Value/DF827C5F"), -1);
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TimerPause(gv_missiontimer, true);
        TriggerExecute(gt_Ch3Mission3, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SniperKilled_Init () {
    gt_SniperKilled = TriggerCreate("gt_SniperKilled_Func");
    TriggerEnable(gt_SniperKilled, false);
    TriggerAddEventUnitDied(gt_SniperKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3 Mission 3
//--------------------------------------------------------------------------------------------------
bool gt_Ch3Mission3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(15.0, 30.0), c_timeGame);
    gf_SkipifOver();
    if ((gv_gamemode == 1)) {
        gf_Reinforcements();
    }

    TriggerExecute(gt_CombatCompany, true, false);
    gf_SetNewLighting("UA3Day", 600.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3Mission3_Init () {
    gt_Ch3Mission3 = TriggerCreate("gt_Ch3Mission3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat Company
//--------------------------------------------------------------------------------------------------
bool gt_CombatCompany_Func (bool testConds, bool runActions) {
    int auto6F2D4233_ae;
    int auto6F2D4233_ai;
    int autoA8E61F3C_ae;
    int autoA8E61F3C_ai;
    int auto997861DC_ae;
    int auto997861DC_ai;
    int auto241996D0_ae;
    int auto241996D0_ai;
    int auto992450AD_ae;
    int auto992450AD_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    gf_MissionText(StringExternal("Param/Value/9D89AF4F"));
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((RandomInt(0, 150) == 1)) {
            UnitCreate(1, "M2BradleyIFV", 0, PlayerGroupPlayer(gv_players, RandomInt(1, PlayerGroupCount(gv_players))), RegionGetCenter(RegionFromId(18)), 180.0);
        }
        else {
            UnitCreate(1, gf_randomminitype(), 0, PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(18)), 180.0);
        }
    }
    PlayerGroupLoopEnd();
    UnitCreate(1, "M2BradleyIFV", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(90));
    auto6F2D4233_ae = 5;
    auto6F2D4233_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto6F2D4233_ai >= 0 && lv_loopint <= auto6F2D4233_ae) || (auto6F2D4233_ai <= 0 && lv_loopint >= auto6F2D4233_ae) ) ; lv_loopint += auto6F2D4233_ai ) {
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(90));
    }
    Wait(4.0, c_timeGame);
    UnitCreate(1, "M1Abrams", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(91));
    autoA8E61F3C_ae = 4;
    autoA8E61F3C_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoA8E61F3C_ai >= 0 && lv_loopint <= autoA8E61F3C_ae) || (autoA8E61F3C_ai <= 0 && lv_loopint >= autoA8E61F3C_ae) ) ; lv_loopint += autoA8E61F3C_ai ) {
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(91));
    }
    Wait(4.0, c_timeGame);
    UnitCreate(1, "M2BradleyIFV", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(91));
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(86));
    auto997861DC_ae = 3;
    auto997861DC_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto997861DC_ai >= 0 && lv_loopint <= auto997861DC_ae) || (auto997861DC_ai <= 0 && lv_loopint >= auto997861DC_ae) ) ; lv_loopint += auto997861DC_ai ) {
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(86));
    }
    Wait(4.0, c_timeGame);
    UnitCreate(1, "M2BradleyIFV", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(89));
    gv_disabledtank = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCreate(1, "Sniper", 0, 13, RegionRandomPoint(RegionFromId(18)), 180.0);
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(87));
    UnitCreate(1, "Sniper", 0, 13, RegionRandomPoint(RegionFromId(18)), 180.0);
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(87));
    Wait(4.0, c_timeGame);
    auto241996D0_ae = 3;
    auto241996D0_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto241996D0_ai >= 0 && lv_loopint <= auto241996D0_ae) || (auto241996D0_ai <= 0 && lv_loopint >= auto241996D0_ae) ) ; lv_loopint += auto241996D0_ai ) {
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(92));
    }
    UnitCreate(1, "InfantryAutomaticRifleman", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(92));
    Wait(4.0, c_timeGame);
    auto992450AD_ae = 3;
    auto992450AD_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto992450AD_ai >= 0 && lv_loopint <= auto992450AD_ae) || (auto992450AD_ai <= 0 && lv_loopint >= auto992450AD_ae) ) ; lv_loopint += auto992450AD_ai ) {
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(93));
    }
    UnitCreate(1, "CombatEngineerMini", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
    gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(93));
    while (true) {
        if (((libNtve_gf_UnitInRegion(gv_disabledtank, RegionFromId(89)) == true) || (UnitIsAlive(gv_disabledtank) == false))) {
            UnitIssueOrder(gv_disabledtank, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
            UnitCreate(1, "Boomer", 0, 14, UnitGetPosition(gv_disabledtank), libNtve_gf_RandomAngle());
            UnitKill(UnitLastCreated());
            libNtve_gf_MakeUnitInvulnerable(gv_disabledtank, false);
            UnitSetPropertyFixed(gv_disabledtank, c_unitPropLifePercent, gv_bRADLEY_LIFE_PERCENT);
            UnitSetState(gv_disabledtank, c_unitStateMoveSuppressed, false);
            UnitSetState(gv_disabledtank, c_unitStateTurnSuppressed, false);
            Wait(2.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/8A73DAF5"));
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_disabledtank), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 12.0, 270.0);
            Wait(4.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/34E84363"));
            ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
            ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/386536E2"));
            ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/9C42ECF8"));
            TimerStart(gv_missiontimer, (200.0 + (IntToFixed(gv_gamemode) * 20.0)), false, c_timeGame);
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
            TriggerEnable(gt_DisabledTankloop, true);
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(RandomFixed(15.0, 60.0), c_timeGame);
    SoundPlay(SoundLink("TZeratul01MusicEventCC", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead(12, "Krill", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
        gf_SpawnUndead(1, "Horror", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(12, "Krill", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(12, "Krill", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CombatCompany_Init () {
    gt_CombatCompany = TriggerCreate("gt_CombatCompany_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disabled Tank loop
//--------------------------------------------------------------------------------------------------
bool gt_DisabledTankloop_Func (bool testConds, bool runActions) {
    int auto3BF65B85_val;

    // Variable Declarations
    int lv_completion;
    fixed lv_lifedeltapercent;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_disabledtank) == true) && (TimerGetRemaining(gv_missiontimer) == 0.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        lv_lifedeltapercent = (UnitGetPropertyFixed(gv_disabledtank, c_unitPropLifePercent, c_unitPropCurrent) - gv_bRADLEY_LIFE_PERCENT);
        libNtve_gf_MakeUnitInvulnerable(gv_disabledtank, true);
        UnitCreate(3, "CombatEngineerMini", 0, 13, RegionGetCenter(RegionFromId(18)), 180.0);
        UnitGroupAddUnitGroup(gv_combatengineers, UnitLastCreatedGroup());
        gf_MissionText(StringExternal("Param/Value/92923649"));
        while (true) {
            if ((UnitGroupCount(UnitGroupFilterRegion(gv_combatengineers, RegionFromId(89), 0), c_unitCountAlive) >= UnitGroupCount(gv_combatengineers, c_unitCountAlive))) {
                if ((lv_lifedeltapercent > 54.5)) {
                    gf_MissionText(StringExternal("Param/Value/41422984"));
                    gf_SucceedMission(20, StringExternal("Param/Value/5206379E"), 0);
                }
                else if ((lv_lifedeltapercent > 0.0)) {
                    gf_MissionText(StringExternal("Param/Value/2859C1BA"));
                    gf_SucceedMission((FixedToInt(lv_lifedeltapercent) / 3), libSwaC_gf_FormatTextWithReplacement(StringExternal("Param/Value/14EB4584"), FixedToText(lv_lifedeltapercent, 0), null, null, null), 0);
                }
                else if (true) {
                    gf_MissionText(StringExternal("Param/Value/F8DFDB7E"));
                }
                if ((lv_lifedeltapercent >= -15.0)) {
                    lv_completion += 1;
                }

                if ((UnitGroupCount(gv_combatengineers, c_unitCountAlive) >= 3)) {
                    lv_completion += 1;
                }

                Wait(2.0, c_timeGame);
                auto3BF65B85_val = lv_completion;
                if (auto3BF65B85_val == 2) {
                    gf_SucceedMission(70, StringExternal("Param/Value/FF2BAC6D"), -3);
                    UnitSetPropertyFixed(gv_disabledtank, c_unitPropLifePercent, MinF((lv_lifedeltapercent + gv_bRADLEY_LIFE_PERCENT + 70.0), 100.0));
                }
                else if (auto3BF65B85_val == 1) {
                    gf_SucceedMission(50, StringExternal("Param/Value/84CBAA4B"), -1);
                    UnitSetPropertyFixed(gv_disabledtank, c_unitPropLifePercent, MinF((lv_lifedeltapercent + gv_bRADLEY_LIFE_PERCENT + 45.0), 100.0));
                }
                else {
                    gf_SucceedMission(20, StringExternal("Param/Value/6669B2B0"), 0);
                    UnitSetPropertyFixed(gv_disabledtank, c_unitPropLifePercent, MinF((lv_lifedeltapercent + gv_bRADLEY_LIFE_PERCENT + 15.0), 100.0));
                }
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                gf_MissionText(StringExternal("Param/Value/A28346CA"));
                UnitSetState(gv_disabledtank, c_unitStateMoveSuppressed, true);
                UnitSetState(gv_disabledtank, c_unitStateTurnSuppressed, true);
                libNtve_gf_MakeUnitInvulnerable(gv_disabledtank, false);
                gf_MoveToGuardPos(gv_disabledtank, RegionFromId(92));
                UnitGroupLoopBegin(gv_combatengineers);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    gf_MoveToGuardPos(UnitGroupLoopCurrent(), RegionFromId(92));
                }
                UnitGroupLoopEnd();
                TriggerExecute(gt_Ch3Mission4, true, false);
                break;
            }
            else {
                if ((libNtve_gf_UnitGroupIsDead(gv_combatengineers) == true)) {
                    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) >= 35.0)) {
                        gf_SucceedMission(5, StringExternal("Param/Value/5FA9B739"), 1);
                        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                        UnitSetPropertyFixed(gv_disabledtank, c_unitPropLifePercent, MinF((lv_lifedeltapercent + gv_bRADLEY_LIFE_PERCENT + -30.0), 100.0));
                        UnitSetState(gv_disabledtank, c_unitStateMoveSuppressed, true);
                        UnitSetState(gv_disabledtank, c_unitStateTurnSuppressed, true);
                        gf_MoveToGuardPos(gv_disabledtank, RegionFromId(92));
                        gf_MissionText(StringExternal("Param/Value/6B3912B7"));
                    }
                    else {
                        gf_FailMission(0, StringExternal("Param/Value/7A383CD7"), 3);
                        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
                        libNtve_gf_PauseUnit(gv_disabledtank, true);
                        gf_MissionText(StringExternal("Param/Value/581184CC"));
                        UnitCreate(3, "InfantryRifleman", 0, 13, UnitGetPosition(gv_disabledtank), UnitGetFacing(gv_disabledtank));
                        UnitGroupLoopBegin(UnitLastCreatedGroup());
                        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                            gf_MoveToGuardPos(UnitGroupLoopCurrent(), RegionFromId(92));
                        }
                        UnitGroupLoopEnd();
                    }
                    libNtve_gf_MakeUnitInvulnerable(gv_disabledtank, false);
                    TriggerExecute(gt_Ch3Mission4, true, false);
                    break;
                }
                else {
                    UnitGroupIssueOrder(gv_combatengineers, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
                    UnitGroupIssueOrder(gv_combatengineers, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(89))), c_orderQueueReplace);
                }
            }
            Wait(2.0, c_timeGame);
        }
    }
    else {
        if ((UnitIsAlive(gv_disabledtank) == false)) {
            TriggerEnable(TriggerGetCurrent(), false);
            gf_MissionText(StringExternal("Param/Value/558FC2D0"));
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            gf_FailMission(15, StringExternal("Param/Value/C7D20949"), 5);
            ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
            TriggerExecute(gt_Ch3Mission4, true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisabledTankloop_Init () {
    gt_DisabledTankloop = TriggerCreate("gt_DisabledTankloop_Func");
    TriggerEnable(gt_DisabledTankloop, false);
    TriggerAddEventTimePeriodic(gt_DisabledTankloop, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3 Mission 4
//--------------------------------------------------------------------------------------------------
bool gt_Ch3Mission4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    gf_SkipifOver();
    gf_Reinforcements();
    TriggerExecute(gt_RAFacility, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3Mission4_Init () {
    gt_Ch3Mission4 = TriggerCreate("gt_Ch3Mission4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RA Facility
//--------------------------------------------------------------------------------------------------
bool gt_RAFacility_Func (bool testConds, bool runActions) {
    int autoFE9A9C1C_ae;
    int autoFE9A9C1C_ai;
    int auto21131223_ae;
    int auto21131223_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_i;
    region[8] lv_scientistregions;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scientistregions[0] = RegionFromId(94);
    lv_scientistregions[1] = RegionFromId(95);
    lv_scientistregions[2] = RegionFromId(96);
    lv_scientistregions[3] = RegionFromId(97);
    lv_scientistregions[4] = RegionFromId(98);
    lv_scientistregions[5] = RegionFromId(99);
    lv_scientistregions[6] = RegionFromId(100);
    gf_MissionText(StringExternal("Param/Value/A13461AC"));
    gf_SpawnUndead(1, "Gourmand", 1);
    Wait(4.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(2421), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 30.0, 270.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/9260D2C4"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/CB456B34"));
    UnitIssueOrder(UnitFromId(1238), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1239), Order(AbilityCommand("DestructibleGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1240), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(1241), Order(AbilityCommand("MetalGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupClear(gv_survivors);
    TriggerEnable(gt_EnterRAFacility, true);
    UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(97)), libNtve_gf_RandomAngle());
    UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(97)), libNtve_gf_RandomAngle());
    UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(98)), libNtve_gf_RandomAngle());
    UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(98)), libNtve_gf_RandomAngle());
    UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2423), libNtve_gf_RandomAngle());
    UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2424), libNtve_gf_RandomAngle());
    UnitCreate(1, "MK44SentryGun", 0, 15, PointFromId(2488), libNtve_gf_RandomAngle());
    autoFE9A9C1C_ae = 6;
    autoFE9A9C1C_ai = 1;
    lv_i = 0;
    for ( ; ( (autoFE9A9C1C_ai >= 0 && lv_i <= autoFE9A9C1C_ae) || (autoFE9A9C1C_ai <= 0 && lv_i >= autoFE9A9C1C_ae) ) ; lv_i += autoFE9A9C1C_ai ) {
        auto21131223_ae = RandomInt(2, 3);
        auto21131223_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto21131223_ai >= 0 && lv_loopint <= auto21131223_ae) || (auto21131223_ai <= 0 && lv_loopint >= auto21131223_ae) ) ; lv_loopint += auto21131223_ai ) {
            UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(lv_scientistregions[lv_i]), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_survivors, UnitLastCreated());
        }
    }
    UnitGroupLoopBegin(gv_survivors);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    Wait(30.0, c_timeGame);
    if ((gv_gamemode >= 3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(2, 6), "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(1)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(2, 4), "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(2)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ignis", 0, 15, RegionRandomPoint(RegionFromId(1)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(2, "CombatEngineerMini", 0, 15, RegionRandomPoint(RegionFromId(2)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        UnitBehaviorAdd(UnitLastCreated(), "ClusterRocketsAIIgnis", UnitLastCreated(), 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M2BradleyIFV", 0, 15, RegionRandomPoint(RegionFromId(2)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    }

    if ((gv_gamemode >= 4)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(RandomInt(2, 6), "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(1)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ignis", 0, 15, RegionRandomPoint(RegionFromId(1)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "M2BradleyIFV", 0, 15, RegionRandomPoint(RegionFromId(2)));
        UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RAFacility_Init () {
    gt_RAFacility = TriggerCreate("gt_RAFacility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter RA Facility
//--------------------------------------------------------------------------------------------------
bool gt_EnterRAFacility_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_detainScientistChat[1] = StringExternal("Param/Value/616AC023");
    gv_detainScientistChat[2] = StringExternal("Param/Value/6456DF83");
    gv_detainScientistChat[3] = StringExternal("Param/Value/00830A4B");
    gv_detainScientistChat[4] = StringExternal("Param/Value/7ECA7CFC");
    gv_detainScientistChat[5] = StringExternal("Param/Value/52317597");
    gv_detainScientistResponse[1] = StringExternal("Param/Value/B9E612D6");
    gv_detainScientistResponse[2] = StringExternal("Param/Value/06BF7C96");
    gv_detainScientistResponse[3] = StringExternal("Param/Value/702E8E44");
    gv_detainScientistResponse[4] = StringExternal("Param/Value/DAE0DACB");
    gv_detainScientistResponse[5] = StringExternal("Param/Value/7154BA48");
    gf_MissionText(StringExternal("Param/Value/C85D52D9"));
    UnitCreate(1, "ColonistShipFlying", 0, 13, PointWithOffset(RegionGetCenter(RegionFromId(15)), -15.0, 0.0), 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_mEDEVAC = UnitLastCreated();
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), RegionGetCenter(RegionFromId(15))), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/EF0654A0"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(15)), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 10.0, 270.0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/35982AD7"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/4950B045"));
    TimerStart(gv_missiontimer, (320.0 - (IntToFixed(gv_gamemode) * 20.0)), false, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_DetainScientist, true);
    TriggerEnable(gt_ExtractScientist, true);
    TriggerEnable(gt_RAFacilityEnd, true);
    UnitGroupLoopBegin(gv_survivors);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterRAFacility_Init () {
    gt_EnterRAFacility = TriggerCreate("gt_EnterRAFacility_Func");
    TriggerEnable(gt_EnterRAFacility, false);
    TriggerAddEventUnitRegion(gt_EnterRAFacility, null, RegionFromId(101), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detain Scientist
//--------------------------------------------------------------------------------------------------
bool gt_DetainScientist_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_playerHeroes[EventPlayer()]))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_survivors, OrderGetTargetUnit(EventUnitOrder())) == true))) {
            return false;
        }

        if (!((UnitGetOwner(OrderGetTargetUnit(EventUnitOrder())) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder()))) <= 3.0)) {
        gf_MissionText(StringExternal("Param/Value/680F67A6"));
        UnitSetOwner(OrderGetTargetUnit(EventUnitOrder()), EventPlayer(), true);
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + gv_detainScientistChat[RandomInt(1, 5)]), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
        Wait(2.0, c_timeGame);
        TextTagCreate((StringExternal("Param/Value/8B1F9C6B") + gv_detainScientistResponse[RandomInt(1, 5)]), 24, UnitGetPosition(OrderGetTargetUnit(EventUnitOrder())), 1.0, true, false, PlayerGroupAll());
        TextTagAttachToUnit(TextTagLastCreated(), OrderGetTargetUnit(EventUnitOrder()), 1.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 4.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/AEBE058F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetainScientist_Init () {
    gt_DetainScientist = TriggerCreate("gt_DetainScientist_Func");
    TriggerEnable(gt_DetainScientist, false);
    TriggerAddEventUnitOrder(gt_DetainScientist, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(gt_DetainScientist, null, AbilityCommand("move", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extract Scientist
//--------------------------------------------------------------------------------------------------
bool gt_ExtractScientist_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_survivors, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkipifOver();
    gf_SucceedMission(7, StringExternal("Param/Value/4FA37CCF"), 0);
    UnitGroupRemove(gv_survivors, EventUnit());
    UnitRemove(EventUnit());
    gv_scientistsextracted = (gv_scientistsextracted + 1);
    if ((UnitGroupCount(gv_survivors, c_unitCountAlive) == 0)) {
        TriggerExecute(gt_RAFacilityEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtractScientist_Init () {
    gt_ExtractScientist = TriggerCreate("gt_ExtractScientist_Func");
    TriggerEnable(gt_ExtractScientist, false);
    TriggerAddEventUnitRegion(gt_ExtractScientist, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RA Facility End
//--------------------------------------------------------------------------------------------------
bool gt_RAFacilityEnd_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DetainScientist, false);
    TriggerEnable(gt_ExtractScientist, false);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    if ((UnitGroupCount(gv_survivors, c_unitCountAlive) >= 1)) {
        UnitGroupLoopBegin(gv_survivors);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zombie", c_unitCreateIgnorePlacement, 14, UnitGetPosition(UnitGroupLoopCurrent()));
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }

    UnitIssueOrder(gv_mEDEVAC, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    UnitIssueOrder(gv_mEDEVAC, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
    Wait(7.0, c_timeGame);
    UnitRemove(gv_mEDEVAC);
    TriggerExecute(gt_Ch3Mission5, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RAFacilityEnd_Init () {
    gt_RAFacilityEnd = TriggerCreate("gt_RAFacilityEnd_Func");
    TriggerEnable(gt_RAFacilityEnd, false);
    TriggerAddEventTimer(gt_RAFacilityEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3 Mission 5
//--------------------------------------------------------------------------------------------------
bool gt_Ch3Mission5_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    gf_SkipifOver();
    TriggerExecute(gt_InfestedSilos, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3Mission5_Init () {
    gt_Ch3Mission5 = TriggerCreate("gt_Ch3Mission5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Silos
//--------------------------------------------------------------------------------------------------
bool gt_InfestedSilos_Func (bool testConds, bool runActions) {
    int autoB29D64EA_ae;
    int autoB29D64EA_ai;
    int autoAC176539_ae;
    int autoAC176539_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_basetime;
    point[6] lv_newsilopoint;

    // Variable Initialization
    lv_basetime = (300 - (gv_gamemode * 20));

    // Actions
    if (!runActions) {
        return true;
    }

    gv_silosite[1] = RegionFromId(52);
    gv_silosite[2] = RegionFromId(53);
    gv_silosite[3] = RegionFromId(54);
    gv_silosite[4] = RegionFromId(102);
    gv_silosite[5] = RegionFromId(103);
    lv_newsilopoint[1] = PointFromId(2009);
    lv_newsilopoint[2] = PointFromId(2503);
    lv_newsilopoint[3] = PointFromId(2504);
    lv_newsilopoint[4] = PointFromId(2505);
    lv_newsilopoint[5] = PointFromId(2506);
    autoB29D64EA_ae = 5;
    autoB29D64EA_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoB29D64EA_ai >= 0 && lv_loopint <= autoB29D64EA_ae) || (autoB29D64EA_ai <= 0 && lv_loopint >= autoB29D64EA_ae) ) ; lv_loopint += autoB29D64EA_ai ) {
        if ((RandomInt(0, 1) == 1)) {
            RegionSetCenter(gv_silosite[lv_loopint], lv_newsilopoint[lv_loopint]);
        }

    }
    if ((PlayerGroupCount(gv_players) <= 3)) {
        lv_basetime = (lv_basetime + 40);
    }

    gf_MissionText(StringExternal("Param/Value/31878289"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F358FBF0"));
    Wait(12.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/31507665"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/A1B6BE50"));
    SoundPlay(SoundLink("THanson03AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    autoAC176539_ae = 5;
    autoAC176539_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoAC176539_ai >= 0 && lv_loopint <= autoAC176539_ae) || (autoAC176539_ai <= 0 && lv_loopint >= autoAC176539_ae) ) ; lv_loopint += autoAC176539_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedSilo", c_unitCreateIgnorePlacement, 15, RegionGetCenter(gv_silosite[lv_loopint]));
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        gv_infestedsilos[lv_loopint] = UnitLastCreated();
        gv_silotimeremaining[lv_loopint] = RandomInt((lv_basetime - 90), (lv_basetime + 60));
        gv_silotimemax[lv_loopint] = gv_silotimeremaining[lv_loopint];
        TextTagCreate(IntToText(gv_silotimeremaining[lv_loopint]), 32, UnitGetPosition(UnitLastCreated()), 5.0, true, false, PlayerGroupAll());
        gv_silotexttag[lv_loopint] = TextTagLastCreated();
    }
    TriggerEnable(gt_InfestedSiloLoop, true);
    TriggerEnable(gt_DisableSilo, true);
    gf_SpawnUndead(1, "Cacumen", 1);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(3, "Lacerti", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Grotesque", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(2, "Raisuli", 1);
        gf_SpawnUndead(12, "Krill", 1);
        gf_SpawnUndead(1, "Arachnathid", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(12, "Krill", 1);
        gf_SpawnUndead(4, "Raisuli", 1);
        gf_SpawnUndead(1, "Ares", 1);
        gf_SpawnUndead(1, "Ignis", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedSilos_Init () {
    gt_InfestedSilos = TriggerCreate("gt_InfestedSilos_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested Silo Loop
//--------------------------------------------------------------------------------------------------
bool gt_InfestedSiloLoop_Func (bool testConds, bool runActions) {
    int auto4FD38E14_ae;
    int auto4FD38E14_ai;

    // Variable Declarations
    int lv_loopint;
    fixed lv_fraction;
    bool lv_allsilosfinal;

    // Variable Initialization
    lv_allsilosfinal = true;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4FD38E14_ae = 5;
    auto4FD38E14_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto4FD38E14_ai >= 0 && lv_loopint <= auto4FD38E14_ae) || (auto4FD38E14_ai <= 0 && lv_loopint >= auto4FD38E14_ae) ) ; lv_loopint += auto4FD38E14_ai ) {
        if ((gv_silodisabled[lv_loopint] == false) && (gv_siloboomed[lv_loopint] == false)) {
            lv_allsilosfinal = false;
            gv_silotimeremaining[lv_loopint] = (gv_silotimeremaining[lv_loopint] - 1);
            lv_fraction = (IntToFixed(gv_silotimeremaining[lv_loopint]) / IntToFixed(gv_silotimemax[lv_loopint]));
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_infestedsilos[lv_loopint]), Color((100.0 - (100.0 * lv_fraction)), (100.0 * lv_fraction), 0.0), 0.99, 270.0);
            TextTagSetText(gv_silotexttag[lv_loopint], IntToText(gv_silotimeremaining[lv_loopint]));
            TextTagSetColor(gv_silotexttag[lv_loopint], c_textTagColorText, Color((100.0 - (100.0 * lv_fraction)), (100.0 * lv_fraction), 0.0));
            if ((gv_silotimeremaining[lv_loopint] == 40)) {
                gf_MissionText(StringExternal("Param/Value/612AEA1E"));
                SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_infestedsilos[lv_loopint]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0, 270.0);
            }

            if ((gv_silotimeremaining[lv_loopint] == 10)) {
                gf_MissionText(StringExternal("Param/Value/8D9D05CD"));
                SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_infestedsilos[lv_loopint]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, 270.0);
            }

            if ((gv_silotimeremaining[lv_loopint] <= 0) && (gv_siloboomed[lv_loopint] == false)) {
                gv_siloboomed[lv_loopint] = true;
                gv_anysiloboomed = true;
                TextTagShow(gv_silotexttag[lv_loopint], PlayerGroupAll(), false);
                gf_FailMission(10, StringExternal("Param/Value/A795E357"), 4);
                PlayerGroupLoopBegin(PlayerGroupAll());
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    VisRevealerCreate(PlayerGroupLoopCurrent(), gv_silosite[lv_loopint]);
                }
                PlayerGroupLoopEnd();
                libNtve_gf_CreateModelAtPoint("InfestedSiloExplode", UnitGetPosition(gv_infestedsilos[lv_loopint]));
                libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
                UnitCreateEffectPoint(gv_infestedsilos[lv_loopint], "InfestedSiloExplosionDamage", UnitGetPosition(gv_infestedsilos[lv_loopint]));
                SoundPlayAtPoint(SoundLink("Odin_NukeExplode", -1), PlayerGroupAll(), UnitGetPosition(gv_infestedsilos[lv_loopint]), 0.0, 100.0, 0.0);
                UnitKill(gv_infestedsilos[lv_loopint]);
            }

        }

    }
    if ((lv_allsilosfinal == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        if ((gv_anysiloboomed == true)) {
            TriggerExecute(gt_GameEndCinematicafail, true, false);
        }
        else {
            TriggerExecute(gt_GameEndCinematica, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestedSiloLoop_Init () {
    gt_InfestedSiloLoop = TriggerCreate("gt_InfestedSiloLoop_Func");
    TriggerEnable(gt_InfestedSiloLoop, false);
    TriggerAddEventTimePeriodic(gt_InfestedSiloLoop, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Silo
//--------------------------------------------------------------------------------------------------
bool gt_DisableSilo_Func (bool testConds, bool runActions) {
    int autoDC9BD2A2_ae;
    int autoDC9BD2A2_ai;
    int auto1BC41FC1_ae;
    int auto1BC41FC1_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_silo;
    bool lv_leftregion;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, c_playerAny, EventUnitRegion(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDC9BD2A2_ae = 5;
    autoDC9BD2A2_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoDC9BD2A2_ai >= 0 && lv_loopint <= autoDC9BD2A2_ae) || (autoDC9BD2A2_ai <= 0 && lv_loopint >= autoDC9BD2A2_ae) ) ; lv_loopint += autoDC9BD2A2_ai ) {
        if ((EventUnitRegion() == gv_silosite[lv_loopint])) {
            lv_silo = lv_loopint;
        }

    }
    if ((gv_siloboomed[lv_silo] == false) && (gv_silodisabled[lv_silo] == false)) {
    }
    else {
        return true;
    }
    gf_MissionText(StringExternal("Param/Value/BF54474A"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_infestedsilos[lv_silo]), Color(0.00, 100.00, 0.00), 10.0, 270.0);
    auto1BC41FC1_ae = 20;
    auto1BC41FC1_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto1BC41FC1_ai >= 0 && lv_loopint <= auto1BC41FC1_ae) || (auto1BC41FC1_ai <= 0 && lv_loopint >= auto1BC41FC1_ae) ) ; lv_loopint += auto1BC41FC1_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), EventUnitRegion()) == true) && (UnitIsAlive(EventUnit()) == true)) {
        }
        else {
            gf_MissionText(StringExternal("Param/Value/76FDFD68"));
            lv_leftregion = true;
            break;
        }
        Wait(1.0, c_timeGame);
    }
    if ((lv_leftregion == false)) {
        gv_silodisabled[lv_silo] = true;
        gf_SucceedMission(57, StringExternal("Param/Value/225AA498"), -2);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_infestedsilos[lv_silo]), Color(0.00, 100.00, 0.00), 5.0, 270.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableSilo_Init () {
    gt_DisableSilo = TriggerCreate("gt_DisableSilo_Func");
    TriggerEnable(gt_DisableSilo, false);
    TriggerAddEventUnitRegion(gt_DisableSilo, null, RegionFromId(52), true);
    TriggerAddEventUnitRegion(gt_DisableSilo, null, RegionFromId(53), true);
    TriggerAddEventUnitRegion(gt_DisableSilo, null, RegionFromId(54), true);
    TriggerAddEventUnitRegion(gt_DisableSilo, null, RegionFromId(102), true);
    TriggerAddEventUnitRegion(gt_DisableSilo, null, RegionFromId(103), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 3 - Citius, Altius, Fortius
//--------------------------------------------------------------------------------------------------
bool gt_Chapter3CitiusAltiusFortius_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hull;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FlareGun", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AmmoCase", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGunPacked", 0, 0, RegionRandomPoint(RegionFromId(76)));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGunPacked", 0, 0, RegionRandomPoint(RegionFromId(76)));
    gf_ChapterIntermissionOn();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/F82227B8"));
    SoundPlay(SoundLink("UI_MissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), c_transitionDurationImmediate);
    Wait(3.0, c_timeGame);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UnitCreate(1, "Hull", 0, 0, PointFromId(2472), 270.0);
    lv_hull = UnitLastCreated();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2487), 0.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_BnetError", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/0C9562B7"));
    Wait(4.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogCreate(1200, 800, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 800, c_anchorCenter, 0, 0, StringExternal("Param/Value/9CD9017F"), ColorWithAlpha(0,0,0,0), true, 10.0);
    SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(20.0, c_timeGame);
    SoundPlay(SoundLink("TRaynor01MusicEventA", -1), PlayerGroupAll(), 100.0, 0.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogDestroy(DialogLastCreated());
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitRemove(lv_hull);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2564), 0.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == false) && (gv_mod_1life == false)) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "ReviveModifyUnit", UnitGroupLoopCurrent());
            Wait(0.1, c_timeGame);
        }

        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(19)), false);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionGetCenter(RegionFromId(76)), 4.0, (30.0 * IntToFixed(UnitGetOwner(UnitGroupLoopCurrent()))))), c_orderQueueReplace);
        }

        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_transitionalgroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(19)), false);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(76))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C38B8D65"));
    Wait(6.5, c_timeGame);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2565), 6.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(2.5, c_timeGame);
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), c_transitionDurationDefault);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    Wait(3.5, c_timeGame);
    gf_ChapterIntermissionOff();
    TriggerExecute(gt_Ch3bMission1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter3CitiusAltiusFortius_Init () {
    gt_Chapter3CitiusAltiusFortius = TriggerCreate("gt_Chapter3CitiusAltiusFortius_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3b Mission 1
//--------------------------------------------------------------------------------------------------
bool gt_Ch3bMission1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkipifOver();
    libNtve_gf_SetAlliance(13, 15, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Enemy);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 15, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_Ch3bHeliport, true, false);
    if ((RandomInt(0, 3) == 1)) {
        while (!((gv_fogevent == false))) {
            Wait(1.0, c_timeGame);
        }
        gf_BlendFog(50.0, 50.0, 50.0, 6.0, 1.0, 5.0, 1000);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3bMission1_Init () {
    gt_Ch3bMission1 = TriggerCreate("gt_Ch3bMission1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3b Heliport
//--------------------------------------------------------------------------------------------------
bool gt_Ch3bHeliport_Func (bool testConds, bool runActions) {
    int autoDB1CB86E_ae;
    int autoDB1CB86E_ai;
    int auto58FE4CB6_ae;
    int auto58FE4CB6_ai;
    int auto653C7467_ae;
    int auto653C7467_ai;
    int auto29A4EF02_ae;
    int auto29A4EF02_ai;
    int auto6936D40C_ae;
    int auto6936D40C_ai;
    int autoCEDE5778_ae;
    int autoCEDE5778_ai;
    int auto429ECC30_ae;
    int auto429ECC30_ai;
    int auto22240ACE_ae;
    int auto22240ACE_ai;
    int auto2F87D0F4_ae;
    int auto2F87D0F4_ai;
    int autoE8751CF4_ae;
    int autoE8751CF4_ai;
    int autoF41E5547_ae;
    int autoF41E5547_ai;
    int auto4386DCD3_ae;
    int auto4386DCD3_ai;

    // Variable Declarations
    region[5] lv_heliportdockingbays;
    int lv_currentbay;
    int lv_loopint;
    int lv_landedphantoms;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heliportdockingbays[1] = RegionFromId(67);
    lv_heliportdockingbays[2] = RegionFromId(70);
    lv_heliportdockingbays[3] = RegionFromId(71);
    lv_heliportdockingbays[4] = RegionFromId(72);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/AF3A8140"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/BDDB470A"));
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/CA0FC3C2"));
    Wait(8.0, c_timeGame);
    TimerStart(gv_missiontimer, 60.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/39DE613B"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(60.0, c_timeGame);
    gf_SkipifOver();
    lv_currentbay = RandomInt(1, 4);
    gf_LandPhantom(RegionGetCenter(lv_heliportdockingbays[lv_currentbay]));
    gf_MissionText(StringExternal("Param/Value/4B73E1C1"));
    Wait(10.0, c_timeGame);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 8.0, 270.0);
    autoDB1CB86E_ae = 2;
    autoDB1CB86E_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoDB1CB86E_ai >= 0 && lv_loopint <= autoDB1CB86E_ae) || (autoDB1CB86E_ai <= 0 && lv_loopint >= autoDB1CB86E_ae) ) ; lv_loopint += autoDB1CB86E_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(74));
        Wait(1.0, c_timeGame);
    }
    gf_MissionText(StringExternal("Param/Value/2D3B42BD"));
    auto58FE4CB6_ae = 2;
    auto58FE4CB6_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto58FE4CB6_ai >= 0 && lv_loopint <= auto58FE4CB6_ae) || (auto58FE4CB6_ai <= 0 && lv_loopint >= auto58FE4CB6_ae) ) ; lv_loopint += auto58FE4CB6_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(75));
        Wait(1.0, c_timeGame);
    }
    auto653C7467_ae = 2;
    auto653C7467_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto653C7467_ai >= 0 && lv_loopint <= auto653C7467_ae) || (auto653C7467_ai <= 0 && lv_loopint >= auto653C7467_ae) ) ; lv_loopint += auto653C7467_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(68));
        Wait(1.0, c_timeGame);
    }
    auto29A4EF02_ae = 2;
    auto29A4EF02_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto29A4EF02_ai >= 0 && lv_loopint <= auto29A4EF02_ae) || (auto29A4EF02_ai <= 0 && lv_loopint >= auto29A4EF02_ae) ) ; lv_loopint += auto29A4EF02_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(69));
        Wait(1.0, c_timeGame);
    }
    Wait(8.0, c_timeGame);
    TimerStart(gv_missiontimer, 90.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/3C6E20A8"));
    gf_TakeoffPhantom(gv_lastlandedphantom);
    gf_SpawnUndead(1, "Minerva", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 1);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead(1, "Lacerti", 1);
    }

    Wait(90.0, c_timeGame);
    gf_SkipifOver();
    if ((UnitGroupCount(UnitGroup(null, 14, RegionFromId(126), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 8) && (UnitGroupCount(UnitGroup(null, 14, RegionFromId(126), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        gf_MissionText(StringExternal("Param/Value/142AEEC7"));
        lv_currentbay = RandomInt(1, 4);
        lv_landedphantoms = (lv_landedphantoms + 1);
        gf_LandPhantom(RegionGetCenter(lv_heliportdockingbays[lv_currentbay]));
        Wait(10.0, c_timeGame);
        SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 8.0, 270.0);
        auto6936D40C_ae = 2;
        auto6936D40C_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto6936D40C_ai >= 0 && lv_loopint <= auto6936D40C_ae) || (auto6936D40C_ai <= 0 && lv_loopint >= auto6936D40C_ae) ) ; lv_loopint += auto6936D40C_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(74));
            Wait(1.0, c_timeGame);
        }
        autoCEDE5778_ae = 2;
        autoCEDE5778_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoCEDE5778_ai >= 0 && lv_loopint <= autoCEDE5778_ae) || (autoCEDE5778_ai <= 0 && lv_loopint >= autoCEDE5778_ae) ) ; lv_loopint += autoCEDE5778_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(75));
            Wait(1.0, c_timeGame);
        }
        auto429ECC30_ae = 2;
        auto429ECC30_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto429ECC30_ai >= 0 && lv_loopint <= auto429ECC30_ae) || (auto429ECC30_ai <= 0 && lv_loopint >= auto429ECC30_ae) ) ; lv_loopint += auto429ECC30_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(68));
            Wait(1.0, c_timeGame);
        }
        auto22240ACE_ae = 2;
        auto22240ACE_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto22240ACE_ai >= 0 && lv_loopint <= auto22240ACE_ae) || (auto22240ACE_ai <= 0 && lv_loopint >= auto22240ACE_ae) ) ; lv_loopint += auto22240ACE_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(69));
            Wait(1.0, c_timeGame);
        }
        Wait(8.0, c_timeGame);
        gf_TakeoffPhantom(gv_lastlandedphantom);
        gf_SucceedMission(25, StringExternal("Param/Value/1DD35CEF"), -1);
    }
    else {
        gf_MissionText(StringExternal("Param/Value/31CF3D3C"));
        gv_infestationLevel = (gv_infestationLevel + 1);
    }
    TimerStart(gv_missiontimer, 90.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/C66986F7"));
    gf_SpawnUndead(1, "Lacerti", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(20, "Hopper", 1);
    gf_SpawnUndead(1, "Arachnathid", 1);
    Wait(90.0, c_timeGame);
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_SkipifOver();
    if ((UnitGroupCount(UnitGroup(null, 14, RegionFromId(126), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) <= 8) && (UnitGroupCount(UnitGroup(null, 14, RegionFromId(126), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        gf_MissionText(StringExternal("Param/Value/32CF79B8"));
        lv_currentbay = RandomInt(1, 4);
        lv_landedphantoms = (lv_landedphantoms + 1);
        gf_LandPhantom(RegionGetCenter(lv_heliportdockingbays[lv_currentbay]));
        Wait(10.0, c_timeGame);
        SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_lastlandedphantom), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 8.0, 270.0);
        auto2F87D0F4_ae = 2;
        auto2F87D0F4_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto2F87D0F4_ai >= 0 && lv_loopint <= auto2F87D0F4_ae) || (auto2F87D0F4_ai <= 0 && lv_loopint >= auto2F87D0F4_ae) ) ; lv_loopint += auto2F87D0F4_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(74));
            Wait(1.0, c_timeGame);
        }
        autoE8751CF4_ae = 2;
        autoE8751CF4_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoE8751CF4_ai >= 0 && lv_loopint <= autoE8751CF4_ae) || (autoE8751CF4_ai <= 0 && lv_loopint >= autoE8751CF4_ae) ) ; lv_loopint += autoE8751CF4_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(75));
            Wait(1.0, c_timeGame);
        }
        autoF41E5547_ae = 2;
        autoF41E5547_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoF41E5547_ai >= 0 && lv_loopint <= autoF41E5547_ae) || (autoF41E5547_ai <= 0 && lv_loopint >= autoF41E5547_ae) ) ; lv_loopint += autoF41E5547_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(68));
            Wait(1.0, c_timeGame);
        }
        auto4386DCD3_ae = 2;
        auto4386DCD3_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto4386DCD3_ai >= 0 && lv_loopint <= auto4386DCD3_ae) || (auto4386DCD3_ai <= 0 && lv_loopint >= auto4386DCD3_ae) ) ; lv_loopint += auto4386DCD3_ai ) {
            UnitCreate(1, gf_randomminitype(), 0, 13, RegionGetCenter(lv_heliportdockingbays[lv_currentbay]), 270.0);
            UnitGroupAdd(gv_patrol, UnitLastCreated());
            UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
            gf_MoveToGuardPos(UnitLastCreated(), RegionFromId(69));
            Wait(1.0, c_timeGame);
        }
        Wait(8.0, c_timeGame);
        gf_TakeoffPhantom(gv_lastlandedphantom);
        gf_SucceedMission(25, StringExternal("Param/Value/1DCA4DC8"), -1);
    }
    else {
        gf_MissionText(StringExternal("Param/Value/2A889C0C"));
        gv_infestationLevel = (gv_infestationLevel + 1);
    }
    if ((lv_landedphantoms >= 1)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
    }
    TriggerExecute(gt_Ch3bMission2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3bHeliport_Init () {
    gt_Ch3bHeliport = TriggerCreate("gt_Ch3bHeliport_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3b Mission 2
//--------------------------------------------------------------------------------------------------
bool gt_Ch3bMission2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkipifOver();
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_Ch3bDarkSky, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3bMission2_Init () {
    gt_Ch3bMission2 = TriggerCreate("gt_Ch3bMission2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ch3b Dark Sky
//--------------------------------------------------------------------------------------------------
bool gt_Ch3bDarkSky_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/FC966DD4"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/7E849330"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/4F3C311E"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/448A5EF0"));
    Wait(20.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/96801415"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/BD8E7244"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/769902FD"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AA5C5698"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/31A9EA2F"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E8A8682E"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/41CB3CA8"));
    Wait(9.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E6C52918"));
    Wait(7.0, c_timeGame);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_playermodevote[PlayerGroupLoopCurrent()] = 0;
    }
    PlayerGroupLoopEnd();
    DialogCreate(300, 350, c_anchorTopLeft, 0, 100, true);
    gv_dsdialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_dsdialog, 250, 150, c_anchorTop, 0, 25, StringExternal("Param/Value/EEB3649D"), StringExternal("Param/Value/B30D327D"), "");
    gv_dsdialogbuttons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_dsdialog, 250, 150, c_anchorBottom, 0, 25, StringExternal("Param/Value/5A28E86F"), StringExternal("Param/Value/892BF643"), "");
    gv_dsdialogbuttons[2] = DialogControlLastCreated();
    DialogSetVisible(gv_dsdialog, PlayerGroupAll(), true);
    TimerStart(gv_missiontimer, 40.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/31DB014D"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_DSVoteEnd, true);
    TriggerEnable(gt_DSDialogButton, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ch3bDarkSky_Init () {
    gt_Ch3bDarkSky = TriggerCreate("gt_Ch3bDarkSky_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS Dialog Button
//--------------------------------------------------------------------------------------------------
bool gt_DSDialogButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_dsdialog, EventPlayer()) == true))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_dsdialogbuttons[1]) || (EventDialogControl() == gv_dsdialogbuttons[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_dsdialog, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_dsdialogbuttons[1])) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/6682DAB3")));
        gv_dsvotes[1] = (gv_dsvotes[1] + 1);
        gv_playermodevote[EventPlayer()] = 1;
    }
    else {
        if ((EventDialogControl() == gv_dsdialogbuttons[2])) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/4A275F5E")));
            gv_dsvotes[2] = (gv_dsvotes[2] + 1);
            gv_playermodevote[EventPlayer()] = 2;
        }

    }
    if (((gv_dsvotes[1] + gv_dsvotes[2]) == PlayerGroupCount(gv_players))) {
        TriggerExecute(gt_DSVoteEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DSDialogButton_Init () {
    gt_DSDialogButton = TriggerCreate("gt_DSDialogButton_Func");
    TriggerEnable(gt_DSDialogButton, false);
    TriggerAddEventDialogControl(gt_DSDialogButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS Vote End
//--------------------------------------------------------------------------------------------------
bool gt_DSVoteEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DSDialogButton, false);
    DialogSetVisible(gv_dsdialog, PlayerGroupAll(), false);
    gv_dsvotes[1] = 0;
    gv_dsvotes[2] = 0;
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_dsvotes[gv_playermodevote[PlayerGroupLoopCurrent()]] = (gv_dsvotes[gv_playermodevote[PlayerGroupLoopCurrent()]] + 1);
    }
    PlayerGroupLoopEnd();
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((gv_dsvotes[1] > gv_dsvotes[2])) {
        TriggerExecute(gt_HelpDS, true, false);
    }
    else {
        TriggerExecute(gt_DoNotHelpDS, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DSVoteEnd_Init () {
    gt_DSVoteEnd = TriggerCreate("gt_DSVoteEnd_Func");
    TriggerEnable(gt_DSVoteEnd, false);
    TriggerAddEventTimer(gt_DSVoteEnd, gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help DS
//--------------------------------------------------------------------------------------------------
bool gt_HelpDS_Func (bool testConds, bool runActions) {
    int autoF0D79EAD_ae;
    int autoF0D79EAD_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(122)), 315.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[1] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(123)), 270.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[2] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    UnitCreate(1, "CombatWalker", 0, 0, RegionGetCenter(RegionFromId(125)), 180.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[3] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    gv_highlanders[1] = RegionFromId(127);
    gv_highlanders[2] = RegionFromId(128);
    gv_highlanders[3] = RegionFromId(129);
    gv_highlanders[4] = RegionFromId(130);
    gv_highlanders[5] = RegionFromId(131);
    gv_highlanderssearched[1] = false;
    gv_highlanderssearched[2] = false;
    gv_highlanderssearched[3] = false;
    gv_highlanderssearched[4] = false;
    gv_highlanderssearched[5] = false;
    gf_MissionText(StringExternal("Param/Value/1D1F67F2"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/49D6EF77"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/B614828F"));
    Wait(7.0, c_timeGame);
    autoF0D79EAD_ae = 5;
    autoF0D79EAD_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoF0D79EAD_ai >= 0 && lv_loopint <= autoF0D79EAD_ae) || (autoF0D79EAD_ai <= 0 && lv_loopint >= autoF0D79EAD_ae) ) ; lv_loopint += autoF0D79EAD_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(0.00, 50.20, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/643FCD40"));
        gv_highlanderpings[lv_loopint] = PingLastCreated();
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/4C9460C1"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/D8593DDD"));
    TriggerEnable(gt_ThalimApproachBuilding, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelpDS_Init () {
    gt_HelpDS = TriggerCreate("gt_HelpDS_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thalim Approach Building
//--------------------------------------------------------------------------------------------------
bool gt_ThalimApproachBuilding_Func (bool testConds, bool runActions) {
    int autoB0721925_ae;
    int autoB0721925_ai;
    int autoEE527488_ae;
    int autoEE527488_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_remainingcount;
    bool lv_lastone;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB0721925_ae = 5;
    autoB0721925_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoB0721925_ai >= 0 && lv_loopint <= autoB0721925_ae) || (autoB0721925_ai <= 0 && lv_loopint >= autoB0721925_ae) ) ; lv_loopint += autoB0721925_ai ) {
        if ((gv_highlanderssearched[lv_loopint] == false)) {
            lv_remainingcount = (lv_remainingcount + 1);
        }

    }
    if ((lv_remainingcount == 1)) {
        lv_lastone = true;
    }

    autoEE527488_ae = 5;
    autoEE527488_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoEE527488_ai >= 0 && lv_loopint <= autoEE527488_ae) || (autoEE527488_ai <= 0 && lv_loopint >= autoEE527488_ae) ) ; lv_loopint += autoEE527488_ai ) {
        if ((EventUnitRegion() == gv_highlanders[lv_loopint]) && (gv_highlanderssearched[lv_loopint] == false)) {
            gv_highlanderssearched[lv_loopint] = true;
            PingDestroy(gv_highlanderpings[lv_loopint]);
            if (((RandomInt(0, 5) == 1) || (lv_lastone == true))) {
                TriggerEnable(TriggerGetCurrent(), false);
                gf_MissionText(StringExternal("Param/Value/76AA6841"));
                ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
                PingDestroy(gv_highlanderpings[1]);
                PingDestroy(gv_highlanderpings[2]);
                PingDestroy(gv_highlanderpings[3]);
                PingDestroy(gv_highlanderpings[4]);
                PingDestroy(gv_highlanderpings[5]);
                Wait(8.0, c_timeGame);
                gf_SucceedMission(35, StringExternal("Param/Value/DF1549BB"), -1);
                Wait(8.0, c_timeGame);
                TriggerExecute(gt_DSKeyCard, true, false);
            }
            else {
                gf_MissionText(StringExternal("Param/Value/F3A8685C"));
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThalimApproachBuilding_Init () {
    gt_ThalimApproachBuilding = TriggerCreate("gt_ThalimApproachBuilding_Func");
    TriggerEnable(gt_ThalimApproachBuilding, false);
    TriggerAddEventUnitRegion(gt_ThalimApproachBuilding, null, RegionFromId(127), true);
    TriggerAddEventUnitRegion(gt_ThalimApproachBuilding, null, RegionFromId(128), true);
    TriggerAddEventUnitRegion(gt_ThalimApproachBuilding, null, RegionFromId(129), true);
    TriggerAddEventUnitRegion(gt_ThalimApproachBuilding, null, RegionFromId(130), true);
    TriggerAddEventUnitRegion(gt_ThalimApproachBuilding, null, RegionFromId(131), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS Key Card
//--------------------------------------------------------------------------------------------------
bool gt_DSKeyCard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_livid;
    bool lv_lividfound;
    bool lv_continue;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/BB2CF0CA"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5ABC9E54"));
    Wait(8.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(7)), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6ACA283C"));
    gv_missionping = PingLastCreated();
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/5095C7C9"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/91922410"));
    TimerStart(gv_missiontimer, 90.0, false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/6B53893B"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    while (true) {
        UnitGroupLoopBegin(gv_heroesGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(42)) == true) || (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(7)) == true))) {
                lv_continue = true;
            }

        }
        UnitGroupLoopEnd();
        if (((TimerGetRemaining(gv_missiontimer) == 0.0) || (lv_continue == true))) {
            break;
        }

        Wait(1.0, c_timeGame);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroy(gv_missionping);
    gf_SpawnUndead(1, "Livid", 1);
    lv_livid = UnitLastCreated();
    gf_SpawnUndead(1, "Arachnathid", 1);
    if ((TimerGetRemaining(gv_missiontimer) == 0.0)) {
        gf_MissionText(StringExternal("Param/Value/605DC402"));
        gf_FailMission(8, StringExternal("Param/Value/B073DFBA"), 4);
    }
    else {
        gf_MissionText(StringExternal("Param/Value/39A321E6"));
        gf_SucceedMission(15, StringExternal("Param/Value/199EF8F6"), -1);
    }
    while (true) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_livid, PlayerGroupLoopCurrent()) == true) && (lv_continue == true)) {
                lv_continue = false;
                SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
                gf_MissionText(StringExternal("Param/Value/BDF9CA9B"));
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(lv_livid), ColorWithAlpha(0.00, 50.20, 25.10, 49.80), 15.0, 270.0);
                PingSetUnit(PingLastCreated(), lv_livid);
                Wait(5.0, c_timeGame);
                gf_MissionText(StringExternal("Param/Value/16EF57B8"));
                break;
            }

        }
        PlayerGroupLoopEnd();
        if ((UnitIsAlive(lv_livid) == false)) {
            break;
        }

        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    gf_SpawnUndead(1, "Gourmand", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 1);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Risen", 1);
    }

    while (true) {
        if ((UnitIsAlive(lv_livid) == false)) {
            break;
        }

        Wait(1.0, c_timeGame);
    }
    gf_SucceedMission(47, StringExternal("Param/Value/B56FC52C"), 0);
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/8D2DAAD9"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/AE297A67"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E3536A49"));
    Wait(8.0, c_timeGame);
    TriggerExecute(gt_DSKECs, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DSKeyCard_Init () {
    gt_DSKeyCard = TriggerCreate("gt_DSKeyCard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS KECs
//--------------------------------------------------------------------------------------------------
bool gt_DSKECs_Func (bool testConds, bool runActions) {
    int auto513E89A5_ae;
    int auto513E89A5_ai;
    int auto0DC4BD65_n;
    int auto0DC4BD65_i;
    int auto2D21B10B_ae;
    int auto2D21B10B_ai;
    int auto7C6C3B69_ae;
    int auto7C6C3B69_ai;
    int auto413C9499_ae;
    int auto413C9499_ai;
    int auto30E87552_ae;
    int auto30E87552_ai;

    // Variable Declarations
    int lv_kecspawnregion;
    point lv_kecspawnpoint;
    point lv_kecspawnpointsafe;
    int lv_loopint;
    unit[4] lv_kECs;
    point[4] lv_kECSP;
    bool[4] lv_kECfound;
    bool lv_allfound;

    // Variable Initialization
    lv_kecspawnpointsafe = RegionGetCenter(RegionFromId(132));

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_darkness == false))) {
        Wait(1.0, c_timeGame);
    }
    gv_currentlighting = "UA3Day";
    GameSetLighting(gv_currentlighting, 600.0);
    gf_Reinforcements();
    gv_highlanders[1] = RegionFromId(132);
    gv_highlanders[2] = RegionFromId(133);
    gv_highlanders[3] = RegionFromId(134);
    gv_highlanders[4] = RegionFromId(38);
    gv_highlanders[5] = RegionFromId(30);
    gv_highlanders[6] = RegionFromId(21);
    gv_highlanders[7] = RegionFromId(34);
    gv_sensorset[1] = false;
    gv_sensorset[2] = false;
    gv_sensorset[3] = false;
    gv_sensorcount = 0;
    gf_MissionText(StringExternal("Param/Value/F05041EE"));
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/7279CEC4"));
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/F47CBA8D"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C2A238A4"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/FD5363CF"));
    Wait(12.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/98D4934C"));
    Wait(8.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/7D97DF77"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/9F578424"));
    auto513E89A5_ae = 3;
    auto513E89A5_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto513E89A5_ai >= 0 && lv_loopint <= auto513E89A5_ae) || (auto513E89A5_ai <= 0 && lv_loopint >= auto513E89A5_ae) ) ; lv_loopint += auto513E89A5_ai ) {
        auto0DC4BD65_n = 16;
        for (auto0DC4BD65_i = 1; auto0DC4BD65_i <= auto0DC4BD65_n; auto0DC4BD65_i += 1) {
            lv_kecspawnregion = RandomInt(1, 7);
            lv_kecspawnpoint = RegionRandomPoint(gv_highlanders[lv_kecspawnregion]);
            if ((PointPathingPassable(lv_kecspawnpoint) == true) && (PointPathingIsConnected(lv_kecspawnpoint, lv_kecspawnpointsafe) == true)) {
                break;
            }

            lv_kecspawnpoint = null;
            Wait(0.0625, c_timeGame);
        }
        if ((lv_kecspawnpoint == null)) {
            lv_kecspawnpoint = lv_kecspawnpointsafe;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "KEC", c_unitCreateIgnorePlacement, 0, lv_kecspawnpoint);
        lv_kECs[lv_loopint] = UnitLastCreated();
        lv_kECSP[lv_loopint] = UnitGetPosition(UnitLastCreated());
    }
    TimerStart(gv_missiontimer, (360.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 6.0)), false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/F67543CD"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    auto2D21B10B_ae = 7;
    auto2D21B10B_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto2D21B10B_ai >= 0 && lv_loopint <= auto2D21B10B_ae) || (auto2D21B10B_ai <= 0 && lv_loopint >= auto2D21B10B_ae) ) ; lv_loopint += auto2D21B10B_ai ) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(0.00, 50.20, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/C093CB5B"));
        gv_highlanderpings[lv_loopint] = PingLastCreated();
    }
    while (true) {
        auto7C6C3B69_ae = 3;
        auto7C6C3B69_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto7C6C3B69_ai >= 0 && lv_loopint <= auto7C6C3B69_ae) || (auto7C6C3B69_ai <= 0 && lv_loopint >= auto7C6C3B69_ae) ) ; lv_loopint += auto7C6C3B69_ai ) {
            if ((UnitGetPosition(lv_kECs[lv_loopint]) != lv_kECSP[lv_loopint]) && (gv_sensorset[lv_loopint] == false)) {
                gv_sensorset[lv_loopint] = true;
                gv_sensorcount = (gv_sensorcount + 1);
                gf_SucceedMission(12, StringExternal("Param/Value/2EF1283D"), -1);
                UnitRemove(lv_kECs[lv_loopint]);
            }

        }
        lv_allfound = true;
        auto413C9499_ae = 3;
        auto413C9499_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto413C9499_ai >= 0 && lv_loopint <= auto413C9499_ae) || (auto413C9499_ai <= 0 && lv_loopint >= auto413C9499_ae) ) ; lv_loopint += auto413C9499_ai ) {
            if ((gv_sensorset[lv_loopint] == false)) {
                lv_allfound = false;
            }

        }
        if (((lv_allfound == true) || (TimerGetRemaining(gv_missiontimer) <= 1.0))) {
            break;
        }

        Wait(1.0, c_timeGame);
    }
    if ((gv_sensorcount >= 2)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        gv_infestationLevel = (gv_infestationLevel + 2);
    }
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
    UnitRemove(lv_kECs[1]);
    UnitRemove(lv_kECs[2]);
    UnitRemove(lv_kECs[3]);
    auto30E87552_ae = 7;
    auto30E87552_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto30E87552_ai >= 0 && lv_loopint <= auto30E87552_ae) || (auto30E87552_ai <= 0 && lv_loopint >= auto30E87552_ae) ) ; lv_loopint += auto30E87552_ai ) {
        PingDestroy(gv_highlanderpings[lv_loopint]);
    }
    TriggerExecute(gt_DSOperators, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DSKECs_Init () {
    gt_DSKECs = TriggerCreate("gt_DSKECs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS Operators
//--------------------------------------------------------------------------------------------------
bool gt_DSOperators_Func (bool testConds, bool runActions) {
    int auto7BBA5DA5_ae;
    int auto7BBA5DA5_ai;
    int auto63FF579A_ae;
    int auto63FF579A_ai;
    int auto63C07DB9_ae;
    int auto63C07DB9_ai;
    int autoE4EE9B3D_ae;
    int autoE4EE9B3D_ai;

    // Variable Declarations
    unit[4] lv_operators;
    int lv_loopint;
    region[4] lv_motorpool;
    bool lv_continue;
    region[7] lv_guslaniguards;

    // Variable Initialization
    lv_continue = true;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_motorpool[1] = RegionFromId(122);
    lv_motorpool[2] = RegionFromId(123);
    lv_motorpool[3] = RegionFromId(125);
    lv_guslaniguards[1] = RegionFromId(137);
    lv_guslaniguards[2] = RegionFromId(138);
    lv_guslaniguards[3] = RegionFromId(12);
    lv_guslaniguards[4] = RegionFromId(135);
    lv_guslaniguards[5] = RegionFromId(136);
    lv_guslaniguards[6] = RegionFromId(133);
    gf_MissionText(StringExternal("Param/Value/1D027646"));
    Wait(10.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/84DD463F"));
    Wait(15.0, c_timeGame);
    if ((gv_sensorcount == 0)) {
        TriggerExecute(gt_DSLastStand, true, false);
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/E4333673"));
    Wait(8.0, c_timeGame);
    UnitGroupLoopBegin(gv_patrol);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_MoveToGuardPos(UnitGroupLoopCurrent(), lv_guslaniguards[RandomInt(1, 6)]);
    }
    UnitGroupLoopEnd();
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(139)), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 8.0, 270.0);
    auto7BBA5DA5_ae = 15;
    auto7BBA5DA5_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto7BBA5DA5_ai >= 0 && lv_loopint <= auto7BBA5DA5_ae) || (auto7BBA5DA5_ai <= 0 && lv_loopint >= auto7BBA5DA5_ae) ) ; lv_loopint += auto7BBA5DA5_ai ) {
        UnitCreate(1, gf_randomminitype(), 0, 15, RegionGetCenter(RegionFromId(139)), 90.0);
        UnitGroupAdd(gv_patrol, UnitLastCreated());
        UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalDS");
        gf_MoveToGuardPos(UnitLastCreated(), lv_guslaniguards[RandomInt(1, 6)]);
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/0B86E17C"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/E1D48302"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(19)), ColorWithAlpha(32.55, 32.55, 100.00, 0.00), 15.0, 270.0);
    Wait(12.0, c_timeGame);
    auto63FF579A_ae = gv_sensorcount;
    auto63FF579A_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto63FF579A_ai >= 0 && lv_loopint <= auto63FF579A_ae) || (auto63FF579A_ai <= 0 && lv_loopint >= auto63FF579A_ae) ) ; lv_loopint += auto63FF579A_ai ) {
        UnitCreate(1, "CombatEngineerMini", 0, 15, RegionRandomPoint(RegionFromId(19)), 90.0);
        lv_operators[lv_loopint] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalDS");
        gf_MoveToGuardPos(UnitLastCreated(), lv_motorpool[lv_loopint]);
        Wait(1.0, c_timeGame);
    }
    while (true) {
        auto63C07DB9_ae = gv_sensorcount;
        auto63C07DB9_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto63C07DB9_ai >= 0 && lv_loopint <= auto63C07DB9_ae) || (auto63C07DB9_ai <= 0 && lv_loopint >= auto63C07DB9_ae) ) ; lv_loopint += auto63C07DB9_ai ) {
            if ((libNtve_gf_UnitInRegion(lv_operators[lv_loopint], lv_motorpool[lv_loopint]) == true)) {
                gf_SucceedMission(14, StringExternal("Param/Value/C9AF3F5A"), 0);
                UnitRemove(lv_operators[lv_loopint]);
                UnitSetOwner(gv_sentryguns[lv_loopint], 15, false);
                UnitBehaviorRemove(gv_sentryguns[lv_loopint], "Unpowered", 1);
                UnitGroupAdd(gv_undeadTargetGroup, gv_sentryguns[lv_loopint]);
                SoundPlayOnUnit(SoundLink("Raynor_PenetratorRoundChargeUp", -1), PlayerGroupAll(), gv_sentryguns[lv_loopint], 1.0, 100.0, 0.0);
                gf_MoveToGuardPos(gv_sentryguns[lv_loopint], lv_guslaniguards[lv_loopint]);
            }

        }
        lv_continue = true;
        autoE4EE9B3D_ae = gv_sensorcount;
        autoE4EE9B3D_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoE4EE9B3D_ai >= 0 && lv_loopint <= autoE4EE9B3D_ae) || (autoE4EE9B3D_ai <= 0 && lv_loopint >= autoE4EE9B3D_ae) ) ; lv_loopint += autoE4EE9B3D_ai ) {
            if ((UnitIsAlive(lv_operators[lv_loopint]) == true)) {
                lv_continue = false;
            }

        }
        if ((lv_continue == true)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_DSLastStand, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DSOperators_Init () {
    gt_DSOperators = TriggerCreate("gt_DSOperators_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DS Last Stand
//--------------------------------------------------------------------------------------------------
bool gt_DSLastStand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_biores;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/7AD9A765"));
    UnitCreate(1, "BioResonator", c_unitCreateIgnorePlacement, 15, PointFromId(381), 270.0);
    UnitGroupAdd(gv_undeadTargetGroup, UnitLastCreated());
    lv_biores = UnitLastCreated();
    SoundPlayOnUnit(SoundLink("Purifier_PrePlanetCrackerEnergyBuildUp", -1), PlayerGroupAll(), UnitLastCreated(), 0.0, 100.0, 0.0);
    Wait(10.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/361EE2E9"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/0D362E4B"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(381), ColorWithAlpha(32.55, 32.55, 100.00, 0.00), 60.0, 270.0);
    TimerStart(gv_missiontimer, (260.0 + (IntToFixed(gv_gamemode) * 10.0)), false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/7AC9BC79"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    Wait(10.0, c_timeGame);
    gf_SpawnUndead(2, "Gourmand", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(1, "Immussilus", 1);
    gf_SpawnUndead(3, "Lacerti", 1);
    gf_SpawnUndead(1, "Grotesque", 1);
    Wait(60.0, c_timeGame);
    gf_SpawnUndead(3, "Hunter", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(2, "Raisuli", 1);
    Wait(45.0, c_timeGame);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(12, "Krill", 1);
        gf_SpawnUndead(1, "Arachnathid", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        Wait(30.0, c_timeGame);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(12, "Krill", 1);
        gf_SpawnUndead(4, "Raisuli", 1);
        gf_SpawnUndead(1, "Ares", 1);
        Wait(30.0, c_timeGame);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(3, "Hunter", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Gargoyle", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndead(2, "StalkerZombie", 1);
        gf_SpawnUndead(1, "Cacumen", 1);
    }

    while (true) {
        if ((UnitIsAlive(lv_biores) == false) && (gv_gameOver == false)) {
            gf_FailMission(5, StringExternal("Param/Value/32BB0521"), 8);
            TimerPause(gv_missiontimer, true);
            TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
            gv_pauseSpawning = true;
            Wait(1.0, c_timeGame);
            gf_MissionText(StringExternal("Param/Value/8DEA0341"));
            Wait(5.0, c_timeGame);
            PlayerGroupLoopBegin(PlayerGroupAll());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionXY, 2.0, 40.0, 2.0, 5.0);
            }
            PlayerGroupLoopEnd();
            libNtve_gf_CreateModelAtPoint("BioResExplode", PointFromId(381));
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            GameSetLighting("BioResonator", 1.0);
            GameSetSpeedValue(c_gameSpeedSlower);
            SoundPlay(SoundLink("Raynor_MorosDeviceStart", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundPlay(SoundLink("Terran_ExplosionLarge", -1), PlayerGroupAll(), 100.0, 0.0);
            UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
                UnitKill(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            Wait(1.0, c_timeGame);
            gf_ResetLighting(20.0);
            Wait(5.0, c_timeGame);
            GameSetSpeedValue(c_gameSpeedNormal);
            break;
        }

        if ((UnitIsAlive(lv_biores) == true) && (TimerGetRemaining(gv_missiontimer) == 0.0) && (gv_gameOver == false)) {
            gf_SucceedMission(200, StringExternal("Param/Value/3BA097ED"), -4);
            SoundPlayOnUnit(SoundLink("Purifier_PrePlanetCrackerEnergySwirl", -1), PlayerGroupAll(), lv_biores, 0.0, 100.0, 0.0);
            gv_pauseSpawning = true;
            Wait(5.0, c_timeGame);
            PlayerGroupLoopBegin(PlayerGroupAll());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionXY, 2.0, 40.0, 2.0, 5.0);
            }
            PlayerGroupLoopEnd();
            GameSetLighting("BioResonator", 1.0);
            GameSetSpeedValue(c_gameSpeedSlower);
            SoundPlay(SoundLink("Raynor_MorosDeviceStart", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundPlay(SoundLink("Terran_ExplosionLarge", -1), PlayerGroupAll(), 100.0, 0.0);
            UnitGroupLoopBegin(gv_undeadGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
                UnitKill(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            Wait(1.0, c_timeGame);
            gf_ResetLighting(15.0);
            Wait(5.0, c_timeGame);
            GameSetSpeedValue(c_gameSpeedNormal);
            Wait(10.0, c_timeGame);
            gf_SetNewLighting("UA3Day", 600.0);
            TriggerExecute(gt_GameEndCinematicb, true, false);
            break;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DSLastStand_Init () {
    gt_DSLastStand = TriggerCreate("gt_DSLastStand_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Do Not Help DS
//--------------------------------------------------------------------------------------------------
bool gt_DoNotHelpDS_Func (bool testConds, bool runActions) {
    int autoE8AD5147_ae;
    int autoE8AD5147_ai;
    int auto3685AEB2_ae;
    int auto3685AEB2_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_DNHMission4, true, false);
    gf_ResetMissionComplete();
    UnitCreate(1, "M2BradleyIFV", 0, 0, RegionGetCenter(RegionFromId(124)), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[1] = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    UnitCreate(1, "ColonistTransport", 0, 0, RegionGetCenter(RegionFromId(123)), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "Plus1MS", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[2] = UnitLastCreated();
    UnitCreate(1, "ColonistTransport", 0, 0, RegionGetCenter(RegionFromId(125)), 180.0);
    UnitBehaviorAdd(UnitLastCreated(), "Plus1MS", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "Unpowered", UnitLastCreated(), 1);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
    gv_sentryguns[3] = UnitLastCreated();
    gv_highlanders[1] = RegionFromId(5);
    gv_highlanders[2] = RegionFromId(29);
    gv_highlanders[3] = RegionFromId(86);
    gv_highlanders[4] = RegionFromId(140);
    gv_highlanders[5] = RegionFromId(141);
    gv_highlanderssearched[1] = false;
    gv_highlanderssearched[2] = false;
    gv_highlanderssearched[3] = false;
    gv_highlanderssearched[4] = false;
    gv_highlanderssearched[5] = false;
    gf_MissionText(StringExternal("Param/Value/7B732BA5"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/9A4864A7"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/064E71CB"));
    TimerStart(gv_missiontimer, (360.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 6.0)), false, c_timeGame);
    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/86F382C3"));
    TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(76)), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 40.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/05BE6571"));
    autoE8AD5147_ae = 5;
    autoE8AD5147_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoE8AD5147_ai >= 0 && lv_loopint <= autoE8AD5147_ae) || (autoE8AD5147_ai <= 0 && lv_loopint >= autoE8AD5147_ae) ) ; lv_loopint += autoE8AD5147_ai ) {
        UnitCreate(1, "SatchelCharge", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(76)), 270.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Sanies", c_unitCreateIgnorePlacement, 14, RegionGetCenter(gv_highlanders[lv_loopint]));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/4373D718"));
        gv_highlanderpings[lv_loopint] = PingLastCreated();
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/1D531D24"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/251E2FB5"));
    TriggerEnable(gt_DNHPlaceSatchel, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DNHMission2, true, false);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    while (!(((TimerGetRemaining(gv_missiontimer) <= 0.5) || (TriggerIsEnabled(gt_DNHPlaceSatchel) == false)))) {
        Wait(1.0, c_timeGame);
    }
    if ((TriggerIsEnabled(gt_DNHPlaceSatchel) == true)) {
        auto3685AEB2_ae = 5;
        auto3685AEB2_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto3685AEB2_ai >= 0 && lv_loopint <= auto3685AEB2_ae) || (auto3685AEB2_ai <= 0 && lv_loopint >= auto3685AEB2_ae) ) ; lv_loopint += auto3685AEB2_ai ) {
            PingDestroy(gv_highlanderpings[lv_loopint]);
        }
        gf_FailMission(5, StringExternal("Param/Value/F475D144"), 5);
        ObjectiveSetState(gv_mainObj, c_objectiveStateFailed);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TriggerEnable(gt_DNHPlaceSatchel, false);
        gv_missioncomplete[1] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoNotHelpDS_Init () {
    gt_DoNotHelpDS = TriggerCreate("gt_DoNotHelpDS_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DNH Place Satchel
//--------------------------------------------------------------------------------------------------
bool gt_DNHPlaceSatchel_Func (bool testConds, bool runActions) {
    int autoE3AE9D83_ae;
    int autoE3AE9D83_ai;
    int auto5BBCE9E3_ae;
    int auto5BBCE9E3_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_inaregion;
    bool lv_allsensorsset;
    int lv_planter;
    int lv_arrayint;

    // Variable Initialization
    lv_allsensorsset = true;
    lv_planter = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "SatchelCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE3AE9D83_ae = 5;
    autoE3AE9D83_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoE3AE9D83_ai >= 0 && lv_loopint <= autoE3AE9D83_ae) || (autoE3AE9D83_ai <= 0 && lv_loopint >= autoE3AE9D83_ae) ) ; lv_loopint += autoE3AE9D83_ai ) {
        if ((libNtve_gf_UnitInRegion(UnitInventoryUnit(EventUnitInventoryItem()), gv_highlanders[lv_loopint]) == true) && (gv_highlanderssearched[lv_loopint] == false)) {
            UnitRemove(EventUnitInventoryItem());
            gv_highlanderssearched[lv_loopint] = true;
            lv_inaregion = true;
            lv_arrayint = lv_loopint;
            PingDestroy(gv_highlanderpings[lv_loopint]);
            gf_MissionText(StringExternal("Param/Value/82830690"));
            SoundPlay(SoundLink("TUISecret", -1), PlayerGroupAll(), 100.0, 0.0);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 14.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/17BC9A99"));
        }

    }
    auto5BBCE9E3_ae = 5;
    auto5BBCE9E3_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto5BBCE9E3_ai >= 0 && lv_loopint <= auto5BBCE9E3_ae) || (auto5BBCE9E3_ai <= 0 && lv_loopint >= auto5BBCE9E3_ae) ) ; lv_loopint += auto5BBCE9E3_ai ) {
        if ((gv_highlanderssearched[lv_loopint] == false)) {
            lv_allsensorsset = false;
        }

    }
    if ((lv_allsensorsset == true)) {
        ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
        TimerWindowShow(gv_missiontimerwindow, PlayerGroupAll(), false);
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(4.0, c_timeGame);
        gv_missioncomplete[1] = true;
    }

    if ((lv_inaregion == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()))), c_messageAreaSubtitle, StringExternal("Param/Value/1D4D6D07"));
    }
    else {
        Wait(15.0, c_timeGame);
        PlayerCreateEffectPoint(lv_planter, "SatchelExplosionDamage", RegionGetCenter(gv_highlanders[lv_arrayint]));
        gf_SucceedMission(15, StringExternal("Param/Value/092FB16A"), -2);
        UnitGroupLoopBegin(UnitGroup(null, 14, gv_highlanders[lv_arrayint], UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DNHPlaceSatchel_Init () {
    gt_DNHPlaceSatchel = TriggerCreate("gt_DNHPlaceSatchel_Func");
    TriggerEnable(gt_DNHPlaceSatchel, false);
    TriggerAddEventUnitInventoryChange(gt_DNHPlaceSatchel, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DNH Mission 2
//--------------------------------------------------------------------------------------------------
bool gt_DNHMission2_Func (bool testConds, bool runActions) {
    int auto8C8D8570_ae;
    int auto8C8D8570_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_int;
    string lv_lzstring;
    int lv_lzstringlength;
    timer lv_lZTimer;
    int lv_lZTimerWindow;

    // Variable Initialization
    lv_lzstring = "12345";
    lv_lZTimer = TimerCreate();
    lv_lZTimerWindow = c_timerWindowNone;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/C2366C32"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/7827FD46"));
    Wait(7.0, c_timeGame);
    auto8C8D8570_ae = 8;
    auto8C8D8570_ai = 1;
    lv_loopint = 6;
    for ( ; ( (auto8C8D8570_ai >= 0 && lv_loopint <= auto8C8D8570_ae) || (auto8C8D8570_ai <= 0 && lv_loopint >= auto8C8D8570_ae) ) ; lv_loopint += auto8C8D8570_ai ) {
        gv_highlanderssearched[lv_loopint] = false;
        lv_int = RandomInt(1, StringLength(lv_lzstring));
        gv_highlanders[lv_loopint] = gv_lZs[StringToInt(StringSub(lv_lzstring, lv_int, lv_int))];
        if ((lv_int == 1)) {
            lv_lzstring = StringSub(lv_lzstring, 2, StringLength(lv_lzstring));
        }
        else {
            lv_lzstring = (StringSub(lv_lzstring, 1, (lv_int - 1)) + StringSub(lv_lzstring, (lv_int + 1), StringLength(lv_lzstring)));
        }
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_highlanders[lv_loopint]), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A8620799"));
        gv_highlanderpings[lv_loopint] = PingLastCreated();
    }
    ObjectiveSetState(gv_secondObj, c_objectiveStateActive);
    ObjectiveSetName(gv_secondObj, StringExternal("Param/Value/3050E836"));
    ObjectiveSetDescription(gv_secondObj, StringExternal("Param/Value/6399CA7B"));
    TimerStart(lv_lZTimer, (200.0 - (IntToFixed(PlayerGroupCount(gv_players)) * 6.0)), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/C103BDDD"), true, false);
    lv_lZTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(lv_lZTimerWindow, PlayerGroupAll(), true);
    TriggerEnable(gt_DNHEnterLZ, true);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_DNHMission3, true, false);
    while (!(((TimerGetRemaining(lv_lZTimer) <= 0.5) || (TriggerIsEnabled(gt_DNHEnterLZ) == false)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowShow(lv_lZTimerWindow, PlayerGroupAll(), false);
    if ((gv_highlanderssearched[6] == true) && (gv_highlanderssearched[7] == true) && (gv_highlanderssearched[8] == true)) {
    }
    else {
        gf_FailMission(5, StringExternal("Param/Value/8E6584A9"), 5);
        ObjectiveSetState(gv_secondObj, c_objectiveStateFailed);
        TriggerEnable(gt_DNHEnterLZ, false);
        gv_missioncomplete[2] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DNHMission2_Init () {
    gt_DNHMission2 = TriggerCreate("gt_DNHMission2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DNH Enter LZ
//--------------------------------------------------------------------------------------------------
bool gt_DNHEnterLZ_Func (bool testConds, bool runActions) {
    int auto4579C3C6_ae;
    int auto4579C3C6_ai;

    // Variable Declarations
    int lv_loopint;
    actor lv_mark;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4579C3C6_ae = 8;
    auto4579C3C6_ai = 1;
    lv_loopint = 6;
    for ( ; ( (auto4579C3C6_ai >= 0 && lv_loopint <= auto4579C3C6_ae) || (auto4579C3C6_ai <= 0 && lv_loopint >= auto4579C3C6_ae) ) ; lv_loopint += auto4579C3C6_ai ) {
        if ((EventUnitRegion() == gv_highlanders[lv_loopint]) && (gv_highlanderssearched[lv_loopint] == false)) {
            gv_highlanderssearched[lv_loopint] = true;
            PingDestroy(gv_highlanderpings[lv_loopint]);
            gf_MissionText(StringExternal("Param/Value/FB97C97F"));
            gf_SucceedMission(12, StringExternal("Param/Value/5EA579BD"), -1);
            libNtve_gf_CreateModelAtPoint("GhostNukeTarget", RegionGetCenter(gv_highlanders[lv_loopint]));
            lv_mark = libNtve_gf_ActorLastCreated();
            if ((gv_highlanderssearched[6] == true) && (gv_highlanderssearched[7] == true) && (gv_highlanderssearched[8] == true)) {
                TriggerEnable(TriggerGetCurrent(), false);
                ObjectiveSetState(gv_secondObj, c_objectiveStateCompleted);
                gv_missioncomplete[2] = true;
            }

            Wait(12.0, c_timeGame);
            libNtve_gf_KillModel(lv_mark);
            gf_AirDropItemLoc("MK79SentryGunPacked", RegionRandomPoint(gv_highlanders[lv_loopint]), 1);
            gf_AirDropItemLoc("ExplosiveCharge", RegionRandomPoint(gv_highlanders[lv_loopint]), 1);
            gf_AirDropItemLoc("ExplosiveCharge", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("AmmoCase", RegionRandomPoint(gv_highlanders[lv_loopint]), 1);
            gf_AirDropItemLoc("MRL", RegionRandomPoint(gv_highlanders[lv_loopint]), 1);
            gf_AirDropItemLoc("GroundFlareItem", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("SmokeGrenadeItem", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("HK42", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("FlareGun", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
            gf_AirDropItemLoc("Magazines", RegionRandomPoint(gv_highlanders[lv_loopint]), 2);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DNHEnterLZ_Init () {
    gt_DNHEnterLZ = TriggerCreate("gt_DNHEnterLZ_Func");
    TriggerEnable(gt_DNHEnterLZ, false);
    TriggerAddEventUnitRegion(gt_DNHEnterLZ, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_DNHEnterLZ, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_DNHEnterLZ, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_DNHEnterLZ, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_DNHEnterLZ, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DNH Mission 3
//--------------------------------------------------------------------------------------------------
bool gt_DNHMission3_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[3] lv_airthreats;
    int[3] lv_bosspings;
    unit[3] lv_airboss;
    bool[3] lv_threatsdestroyed;
    timer lv_airTimer;
    int lv_airTimerWindow;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_airthreats[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_bosspings[init_i] = c_invalidPingId;
    }
    lv_airTimer = TimerCreate();
    lv_airTimerWindow = c_timerWindowNone;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Reinforcements();
    Wait(15.0, c_timeGame);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CASOnStation", -1);
    }
    PlayerGroupLoopEnd();
    gf_MissionText(StringExternal("Param/Value/06FF6867"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_thirdObj, c_objectiveStateActive);
    ObjectiveSetName(gv_thirdObj, StringExternal("Param/Value/34606553"));
    ObjectiveSetDescription(gv_thirdObj, StringExternal("Param/Value/F41A8949"));
    TimerStart(lv_airTimer, (300.0 - (IntToFixed(gv_gamemode) * 6.0)), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/78FB93F4"), true, false);
    lv_airTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(lv_airTimerWindow, PlayerGroupAll(), true);
    UnitCreate(7, "Gargoyle", 0, 14, RegionRandomPoint(RegionFromId(1)), 270.0);
    UnitGroupAddUnitGroup(lv_airthreats[1], UnitLastCreatedGroup());
    UnitCreate(1, "Immussilus", 0, 14, UnitGroupCenterOfGroup(lv_airthreats[1]), 270.0);
    UnitGroupAddUnitGroup(lv_airthreats[1], UnitLastCreatedGroup());
    lv_airboss[1] = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EB842F30"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    lv_bosspings[1] = PingLastCreated();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UnitCreate(15, "Shredder", 0, 14, RegionRandomPoint(RegionFromId(1)), 270.0);
    UnitGroupAddUnitGroup(lv_airthreats[2], UnitLastCreatedGroup());
    UnitCreate(1, "Metasis", 0, 14, UnitGroupCenterOfGroup(lv_airthreats[2]), 270.0);
    UnitGroupAddUnitGroup(lv_airthreats[2], UnitLastCreatedGroup());
    lv_airboss[2] = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EC996AC1"));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    lv_bosspings[2] = PingLastCreated();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    while (true) {
        if ((UnitIsAlive(lv_airboss[1]) == false)) {
            PingDestroy(lv_bosspings[1]);
        }

        if ((UnitIsAlive(lv_airboss[2]) == false)) {
            PingDestroy(lv_bosspings[2]);
        }

        if ((UnitGroupCount(lv_airthreats[1], c_unitCountAlive) == 0) && (lv_threatsdestroyed[1] == false)) {
            lv_threatsdestroyed[1] = true;
            gf_SucceedMission(27, StringExternal("Param/Value/561694EC"), -2);
        }
        else {
            UnitGroupIssueOrder(lv_airthreats[1], OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(62))), c_orderQueueReplace);
        }
        if ((UnitGroupCount(lv_airthreats[2], c_unitCountAlive) == 0) && (lv_threatsdestroyed[2] == false)) {
            lv_threatsdestroyed[2] = true;
            gf_SucceedMission(27, StringExternal("Param/Value/B4661659"), -2);
        }
        else {
            UnitGroupIssueOrder(lv_airthreats[2], OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(63))), c_orderQueueReplace);
        }
        if ((lv_threatsdestroyed[1] == true) && (lv_threatsdestroyed[2] == true)) {
            ObjectiveSetState(gv_thirdObj, c_objectiveStateCompleted);
            TimerWindowShow(lv_airTimerWindow, PlayerGroupAll(), false);
            gv_missioncomplete[3] = true;
            break;
        }
        else {
            if ((TimerGetRemaining(lv_airTimer) <= 0.5)) {
                ObjectiveSetState(gv_thirdObj, c_objectiveStateFailed);
                TimerWindowShow(lv_airTimerWindow, PlayerGroupAll(), false);
                gv_missioncomplete[3] = true;
                break;
            }

        }
        Wait(8.0, c_timeGame);
    }
    while (!((UnitGroupCount(lv_airthreats[1], c_unitCountAlive) == 0) && (UnitGroupCount(lv_airthreats[2], c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_skiesclear = true;
    gf_SpawnItemLoc("LLDR", 1, RegionGetCenter(RegionFromId(122)));
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MissionText(StringExternal("Param/Value/00520369"));
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "CASOnStation", 1);
    }
    PlayerGroupLoopEnd();
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/7E114B9A"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(122)), ColorWithAlpha(0.00, 50.20, 50.20, 0.00), 45.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/6880C588"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DNHMission3_Init () {
    gt_DNHMission3 = TriggerCreate("gt_DNHMission3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DNH Mission 4
//--------------------------------------------------------------------------------------------------
bool gt_DNHMission4_Func (bool testConds, bool runActions) {
    int auto93BE1267_ae;
    int auto93BE1267_ai;
    int autoA9262C6C_ae;
    int autoA9262C6C_ai;
    int auto7D9C7039_ae;
    int auto7D9C7039_ai;

    // Variable Declarations
    unit[4] lv_operators;
    int lv_loopint;
    region[4] lv_motorpool;
    bool lv_continue;
    region[7] lv_cityguards;

    // Variable Initialization
    lv_continue = true;

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowSetTitle(gv_missiontimerwindow, StringExternal("Param/Value/887EDBD6"));
    while (!((gv_missioncomplete[1] == true) && (gv_missioncomplete[2] == true) && (gv_missioncomplete[3] == true))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_thirdObj, c_objectiveStateHidden);
    ObjectiveSetState(gv_secondObj, c_objectiveStateHidden);
    lv_motorpool[1] = RegionFromId(124);
    lv_motorpool[2] = RegionFromId(123);
    lv_motorpool[3] = RegionFromId(125);
    lv_cityguards[1] = RegionFromId(143);
    lv_cityguards[2] = RegionFromId(144);
    lv_cityguards[3] = RegionFromId(145);
    lv_cityguards[4] = RegionFromId(146);
    gf_MissionText(StringExternal("Param/Value/3DFD6D71"));
    Wait(15.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/1D11B898"));
    Wait(7.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/E08D3CB7"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/50A2FEB5"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/8D538655"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(19)), ColorWithAlpha(32.55, 32.55, 100.00, 0.00), 15.0, 270.0);
    UnitGroupLoopBegin(gv_patrol);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_MoveToGuardPos(UnitGroupLoopCurrent(), lv_cityguards[RandomInt(1, 4)]);
    }
    UnitGroupLoopEnd();
    Wait(12.0, c_timeGame);
    auto93BE1267_ae = 3;
    auto93BE1267_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto93BE1267_ai >= 0 && lv_loopint <= auto93BE1267_ae) || (auto93BE1267_ai <= 0 && lv_loopint >= auto93BE1267_ae) ) ; lv_loopint += auto93BE1267_ai ) {
        UnitCreate(1, "CombatEngineerMini", 0, 13, RegionRandomPoint(RegionFromId(19)), 90.0);
        lv_operators[lv_loopint] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "TextureSelectById DecalRavensword");
        gf_MoveToGuardPos(UnitLastCreated(), lv_motorpool[lv_loopint]);
        Wait(1.0, c_timeGame);
    }
    while (true) {
        autoA9262C6C_ae = 3;
        autoA9262C6C_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoA9262C6C_ai >= 0 && lv_loopint <= autoA9262C6C_ae) || (autoA9262C6C_ai <= 0 && lv_loopint >= autoA9262C6C_ae) ) ; lv_loopint += autoA9262C6C_ai ) {
            if ((libNtve_gf_UnitInRegion(lv_operators[lv_loopint], lv_motorpool[lv_loopint]) == true)) {
                gf_SucceedMission(14, StringExternal("Param/Value/051F7032"), 0);
                UnitRemove(lv_operators[lv_loopint]);
                UnitSetOwner(gv_sentryguns[lv_loopint], 13, false);
                UnitBehaviorRemove(gv_sentryguns[lv_loopint], "Unpowered", 1);
                UnitGroupAdd(gv_undeadTargetGroup, gv_sentryguns[lv_loopint]);
                SoundPlayOnUnit(SoundLink("Raynor_PenetratorRoundChargeUp", -1), PlayerGroupAll(), gv_sentryguns[lv_loopint], 1.0, 100.0, 0.0);
                gf_MoveToGuardPos(gv_sentryguns[lv_loopint], lv_cityguards[lv_loopint]);
            }

        }
        lv_continue = true;
        auto7D9C7039_ae = 3;
        auto7D9C7039_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto7D9C7039_ai >= 0 && lv_loopint <= auto7D9C7039_ae) || (auto7D9C7039_ai <= 0 && lv_loopint >= auto7D9C7039_ae) ) ; lv_loopint += auto7D9C7039_ai ) {
            if ((UnitIsAlive(lv_operators[lv_loopint]) == true)) {
                lv_continue = false;
            }

        }
        if ((lv_continue == true)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    ObjectiveSetState(gv_mainObj, c_objectiveStateCompleted);
    Wait(20.0, c_timeGame);
    TriggerExecute(gt_DNHAllIn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DNHMission4_Init () {
    gt_DNHMission4 = TriggerCreate("gt_DNHMission4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DNH All In
//--------------------------------------------------------------------------------------------------
bool gt_DNHAllIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_tier1s;

    // Variable Initialization
    lv_tier1s = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MissionText(StringExternal("Param/Value/EA26C13C"));
    Wait(7.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/83DBD5CA"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/91D7E1C5"));
    Wait(50.0, c_timeGame);
    SoundPlay(SoundLink("THanson03AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Metasis", 1);
    gf_SpawnUndead(1, "Darreus", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(2, "Arachnathid", 1);
    gf_SpawnUndead(5, "StalkerZombie", 1);
    gf_SpawnUndead(5, "StalkerZombie", 1);
    gf_SpawnUndead(1, "Cacumen", 1);
    gf_SpawnUndead(1, "Grotesque", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Morbus", 1);
        gf_SpawnUndead(1, "Gourmand", 1);
        gf_SpawnUndead(1, "Minerva", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Immussilus", 1);
        gf_SpawnUndead(1, "Ignis", 1);
        gf_SpawnUndead(1, "Ares", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(1, "Darreus", 1);
    }

    UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(lv_tier1s, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    while (true) {
        UnitGroupLoopBegin(lv_tier1s);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 2.0, 270.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/369ADD5E"));
            }
            else {
                UnitGroupRemove(lv_tier1s, UnitGroupLoopCurrent());
            }
        }
        UnitGroupLoopEnd();
        if ((UnitGroupCount(lv_tier1s, c_unitCountAlive) == 0) && (gv_gameOver == false)) {
            break;
        }

        Wait(5.0, c_timeGame);
    }
    gf_SucceedMission(100, StringExternal("Param/Value/790005CA"), -3);
    Wait(7.0, c_timeGame);
    TriggerExecute(gt_GameEndCinematicb, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DNHAllIn_Init () {
    gt_DNHAllIn = TriggerCreate("gt_DNHAllIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game End Cinematic a
//--------------------------------------------------------------------------------------------------
bool gt_GameEndCinematica_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_invulnerable;
    unit lv_graham;
    unit lv_jashan;
    unit lv_guard;

    // Variable Initialization
    lv_invulnerable = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pauseSpawning = true;
    Wait(2.0, c_timeGame);
    UnitPauseAll(true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gv_transitionalgroup = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    UnitGroupLoopBegin(gv_transitionalgroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    lv_invulnerable = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_invulnerable);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(4.0, c_timeGame);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        UnitClearSelection(PlayerGroupLoopCurrent());
        CameraSave(PlayerGroupLoopCurrent());
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2473), 0.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    UnitCreate(1, "Planet", c_unitCreateIgnorePlacement, 0, PointFromId(2472), 270.0);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundPlay(SoundLink("TValerian02AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    DialogCreate(800, 800, c_anchorBottomLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 800, c_anchorCenter, 0, 0, StringExternal("Param/Value/E2800C1D"), ColorWithAlpha(0,0,0,0), true, 10.0);
    SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    Wait(15.0, c_timeGame);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(3.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2445), 0.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("FireMedium", PointFromId(2481));
    libNtve_gf_CreateModelAtPoint("FireMedium", PointFromId(2482));
    libNtve_gf_CreateModelAtPoint("FireMedium", PointFromId(2483));
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(2.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, 15, PointFromId(2484));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2474)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, 15, PointFromId(2484));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2475)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, 15, PointFromId(2484));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2476)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 15, PointFromId(2484));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2478)), c_orderQueueReplace);
    lv_graham = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DrJashan", 0, 15, PointFromId(2484));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2479)), c_orderQueueReplace);
    lv_jashan = UnitLastCreated();
    Wait(10.0, c_timeGame);
    TextTagCreate(StringExternal("Param/Value/CE170384"), 32, UnitGetPosition(lv_jashan), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(4.0, c_timeGame);
    libNtve_gf_MakeUnitLookAtUnit(lv_graham, "FastHeadOnly", lv_jashan, "Ref_Head");
    TextTagCreate(StringExternal("Param/Value/4B0DC76D"), 32, UnitGetPosition(lv_graham), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(6.0, c_timeGame);
    TextTagCreate(StringExternal("Param/Value/72C904AF"), 32, UnitGetPosition(lv_jashan), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(6.0, c_timeGame);
    TextTagCreate(StringExternal("Param/Value/12630C82"), 32, UnitGetPosition(lv_graham), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(6.0, c_timeGame);
    TextTagCreate(StringExternal("Param/Value/BE5737E8"), 32, UnitGetPosition(lv_jashan), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(3.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, 15, PointFromId(2484));
    lv_guard = UnitLastCreated();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2477)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    libNtve_gf_MakeUnitFacePoint(lv_graham, PointFromId(2479), 0.5);
    libNtve_gf_MakeUnitLookAtUnit(lv_graham, "MedHeadOnly", lv_guard, "Ref_Head");
    TextTagCreate(StringExternal("Param/Value/FA50D4D0"), 32, UnitGetPosition(lv_guard), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(6.0, c_timeGame);
    libNtve_gf_MakeUnitLookAtUnit(lv_graham, "FastHeadOnly", lv_jashan, "Ref_Head");
    TextTagCreate(StringExternal("Param/Value/B9DC4C1B"), 32, UnitGetPosition(lv_jashan), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 9.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_guard, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2484)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    TextTagCreate(StringExternal("Param/Value/8CEB15A9"), 32, UnitGetPosition(lv_graham), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(lv_jashan, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2480)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    TextTagCreate(StringExternal("Param/Value/32CA4A6F"), 32, UnitGetPosition(lv_jashan), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(6.0, c_timeGame);
    libNtve_gf_SimpleLookAtStop(lv_graham, "FastStanding");
    TextTagCreate(StringExternal("Param/Value/DA6D16A4"), 32, UnitGetPosition(lv_graham), 1.0, true, false, PlayerGroupAll());
    gf_SetTTFadeandDuration(TextTagLastCreated(), 7.0);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_graham, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2484)), c_orderQueueReplace);
    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((gv_averageXP >= 20000) && (gv_gamemode >= 3)) {
        TriggerExecute(gt_ProjectZulu, true, false);
    }
    else {
        UnitGroupLoopBegin(gv_transitionalgroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(lv_invulnerable);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            CameraRestore(PlayerGroupLoopCurrent(), 0.0, -1, 10);
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), 0.0, -1, 10, false);
            CameraLockInput(PlayerGroupLoopCurrent(), false);
        }
        PlayerGroupLoopEnd();
        Wait(2.0, c_timeGame);
        CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        TriggerExecute(gt_RegularGameCompleted, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameEndCinematica_Init () {
    gt_GameEndCinematica = TriggerCreate("gt_GameEndCinematica_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game End Cinematic a fail
//--------------------------------------------------------------------------------------------------
bool gt_GameEndCinematicafail_Func (bool testConds, bool runActions) {
    int autoCC5536ED_n;
    int autoCC5536ED_i;

    // Variable Declarations
    unitgroup lv_invulnerable;

    // Variable Initialization
    lv_invulnerable = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pauseSpawning = true;
    Wait(2.0, c_timeGame);
    UnitPauseAll(true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    lv_invulnerable = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_invulnerable);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(4.0, c_timeGame);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        UnitClearSelection(PlayerGroupLoopCurrent());
        CameraSave(PlayerGroupLoopCurrent());
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2473), 0.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    UnitCreate(1, "Planet", c_unitCreateIgnorePlacement, 0, PointFromId(2472), 270.0);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundPlay(SoundLink("TValerian02AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    DialogCreate(800, 800, c_anchorBottomLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 800, c_anchorCenter, 0, 0, StringExternal("Param/Value/C9D4711C"), ColorWithAlpha(0,0,0,0), true, 10.0);
    SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    Wait(15.0, c_timeGame);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(3.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2587), 0.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("FireMedium", PointFromId(2588));
    UnitCreate(20, "Zombie", 0, 14, RegionRandomPoint(RegionFromId(17)), 270.0);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
    UnitCreate(12, "InfestedCivilian", 0, 14, RegionRandomPoint(RegionFromId(17)), 270.0);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
    UnitCreate(3, "Glutton", 0, 14, RegionRandomPoint(RegionFromId(17)), 270.0);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
    UnitCreate(1, "PoliceOfficerShotgun", 0, 0, RegionRandomPoint(RegionFromId(29)), libNtve_gf_RandomAngle());
    autoCC5536ED_n = 2;
    for (autoCC5536ED_i = 1; autoCC5536ED_i <= autoCC5536ED_n; autoCC5536ED_i += 1) {
        UnitCreate(1, "PoliceOfficer", 0, 0, RegionRandomPoint(RegionFromId(29)), libNtve_gf_RandomAngle());
    }
    Wait(1.0, c_timeGame);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    gf_TextChat(UnitLastCreated(), StringExternal("Param/Value/CA1B6A81"));
    Wait(2.0, c_timeGame);
    UnitCreate(5, "Zombie", 0, 14, PointFromId(1776), 270.0);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
    UnitCreate(12, "InfestedCivilian", 0, 14, RegionRandomPoint(RegionFromId(17)), 270.0);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
    UnitCreate(3, "Glutton", 0, 14, RegionRandomPoint(RegionFromId(17)), 270.0);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(29))), c_orderQueueReplace);
    Wait(15.0, c_timeGame);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(2.5, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_invulnerable);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        CameraRestore(PlayerGroupLoopCurrent(), 0.0, -1, 10);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), 0.0, -1, 10, false);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    TriggerExecute(gt_RegularGameCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameEndCinematicafail_Init () {
    gt_GameEndCinematicafail = TriggerCreate("gt_GameEndCinematicafail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game End Cinematic b
//--------------------------------------------------------------------------------------------------
bool gt_GameEndCinematicb_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_invulnerable;

    // Variable Initialization
    lv_invulnerable = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pauseSpawning = true;
    Wait(2.0, c_timeGame);
    UnitPauseAll(true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    lv_invulnerable = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_invulnerable);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(4.0, c_timeGame);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    VisEnable(c_visTypeMask, false);
    VisEnable(c_visTypeFog, false);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        UnitClearSelection(PlayerGroupLoopCurrent());
        CameraSave(PlayerGroupLoopCurrent());
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2473), 0.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    UnitCreate(1, "Planet", c_unitCreateIgnorePlacement, 0, PointFromId(2472), 270.0);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundPlay(SoundLink("TValerian02AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    DialogCreate(800, 800, c_anchorBottomLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 800, c_anchorCenter, 0, 0, StringExternal("Param/Value/35EB9C2F"), ColorWithAlpha(0,0,0,0), true, 10.0);
    SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    Wait(15.0, c_timeGame);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(3.0, c_timeGame);
    UnitRemove(UnitLastCreated());
    TriggerExecute(gt_PolicePatrols, true, false);
    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_invulnerable);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        CameraRestore(PlayerGroupLoopCurrent(), 0.0, -1, 10);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), 0.0, -1, 10, false);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    TriggerExecute(gt_RegularGameCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameEndCinematicb_Init () {
    gt_GameEndCinematicb = TriggerCreate("gt_GameEndCinematicb_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Project Zulu
//--------------------------------------------------------------------------------------------------
bool gt_ProjectZulu_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_UndeadSpawning3, false);
    TriggerEnable(gt_UndeadSpawning2, false);
    TriggerEnable(gt_UndeadSpawning1, false);
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    gf_SetNewLighting("UA3Dawn", 3.0);
    Wait(2.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2584), 0.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(1.0, c_timeGame);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundPlay(SoundLink("TValerian02AMusicEventF", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    DialogCreate(800, 800, c_anchorBottomLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 800, c_anchorCenter, 0, 0, StringExternal("Param/Value/43500525"), ColorWithAlpha(0,0,0,0), true, 10.0);
    SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    Wait(15.0, c_timeGame);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_PolicePatrols, true, false);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitPauseAll(false);
    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == false) && (gv_mod_1life == false)) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "ReviveModifyUnit", UnitGroupLoopCurrent());
            Wait(0.1, c_timeGame);
        }

        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionFromId(18)), false);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 100.0);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(30))), c_orderQueueReplace);
        }

        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_transitionalgroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        CameraRestore(PlayerGroupLoopCurrent(), 0.0, -1, 10);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), 0.0, -1, 10, false);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    Wait(1.0, c_timeGame);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    VisEnable(c_visTypeMask, true);
    VisEnable(c_visTypeFog, true);
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/3F8E4756"));
    TriggerExecute(gt_PZMission1, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProjectZulu_Init () {
    gt_ProjectZulu = TriggerCreate("gt_ProjectZulu_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zulu Hit
//--------------------------------------------------------------------------------------------------
bool gt_ZuluHit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zulu"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayOnUnit(SoundLink("Zealot_Death_NP", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    Wait(3.0, c_timeGame);
    gf_TextChat(EventUnitTarget(), StringExternal("Param/Value/E49065BA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZuluHit_Init () {
    gt_ZuluHit = TriggerCreate("gt_ZuluHit_Func");
    TriggerEnable(gt_ZuluHit, false);
    TriggerAddEventUnitAttacked(gt_ZuluHit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PZ Mission 1
//--------------------------------------------------------------------------------------------------
bool gt_PZMission1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pauseSpawning = false;
    Wait(4.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/54808B3A"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/1AEBD02C"));
    Wait(30.0, c_timeGame);
    TriggerEnable(gt_UndeadSpawningZulu, true);
    TriggerEnable(gt_ZuluHit, true);
    TriggerEnable(gt_InitialContact, true);
    TriggerExecute(gt_UndeadSpawningZulu, true, false);
    gf_MissionText(StringExternal("Param/Value/DC33D93D"));
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/DF905ADB"));
    Wait(4.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/612836FC"));
    Wait(8.0, c_timeGame);
    gf_MissionText(StringExternal("Param/Value/80075FAE"));
    Wait(4.0, c_timeGame);
    ObjectiveSetState(gv_mainObj, c_objectiveStateActive);
    ObjectiveSetName(gv_mainObj, StringExternal("Param/Value/D5EE50CA"));
    ObjectiveSetDescription(gv_mainObj, StringExternal("Param/Value/DA3ED418"));
    gf_SpawnUndead(3, "Zulu", 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DrJashan", 0, 0, RegionRandomPoint(RegionFromId(27)));
    gv_drJashan = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(6, "Zulu", 0, 14, RegionRandomPoint(RegionFromId(27)));
    UnitGroupAddUnitGroup(gv_drJashanGuards, UnitLastCreatedGroup());
    TriggerEnable(gt_DrJashanLoop, true);
    while (true) {
        if ((lv_int == true)) {
            break;
        }

        if ((UnitIsAlive(gv_drJashan) == false) && (lv_int == false)) {
            gf_FailMission(5, StringExternal("Param/Value/D95DE502"), 0);
            Wait(2.0, c_timeGame);
            TriggerExecute(gt_RegularGameCompleted, true, false);
            break;
        }

        UnitGroupLoopBegin(gv_heroesGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_drJashan)) <= 4.0) && (libNtve_gf_UnitGroupIsDead(gv_drJashanGuards) == true) && (lv_int == false)) {
                TriggerEnable(gt_DrJashanLoop, false);
                TriggerEnable(gt_UndeadSpawningZulu, false);
                lv_int = true;
                libNtve_gf_MakeUnitInvulnerable(gv_drJashan, true);
                UnitIssueOrder(gv_drJashan, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                gf_TextChat(UnitGroupLoopCurrent(), StringExternal("Param/Value/433576CF"));
                Wait(2.0, c_timeGame);
                gf_TextChat(gv_drJashan, StringExternal("Param/Value/B5FC7AA0"));
                Wait(2.0, c_timeGame);
                gf_SucceedMission(150, StringExternal("Param/Value/7E0B3940"), 0);
                Wait(2.0, c_timeGame);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_drJashan));
                UnitSetOwner(gv_drJashan, 14, true);
                libNtve_gf_ReplaceUnit(gv_drJashan, "Boomer", libNtve_ge_ReplaceUnitOptions_NewUnitssMax);
                Wait(20.0, c_timeGame);
                if ((gv_gamemode == 5)) {
                    PlayerGroupLoopBegin(gv_players);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/FEA63D37"));
                        gv_sIunlocked[17][PlayerGroupLoopCurrent()] = true;
                    }
                    PlayerGroupLoopEnd();
                }

                if ((gv_gamemode == 8) && (gv_mod_rifle == true)) {
                    PlayerGroupLoopBegin(gv_players);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        if ((gv_playermassivekills[PlayerGroupLoopCurrent()] >= 30)) {
                            gf_AwardMedal(13, PlayerGroupLoopCurrent(), 1800, StringExternal("Param/Value/DB16953D"));
                        }

                    }
                    PlayerGroupLoopEnd();
                }

                if ((gv_gamemode == 8) && (gv_mod_rifle == true)) {
                    PlayerGroupLoopBegin(gv_players);
                    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/70D4D071"));
                        gv_playercamounlocked[18][PlayerGroupLoopCurrent()] = true;
                    }
                    PlayerGroupLoopEnd();
                }

                TriggerExecute(gt_GameEndCinematicZulu, true, false);
                break;
            }

        }
        UnitGroupLoopEnd();
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PZMission1_Init () {
    gt_PZMission1 = TriggerCreate("gt_PZMission1_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dr Jashan Loop
//--------------------------------------------------------------------------------------------------
bool gt_DrJashanLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targ;

    // Variable Initialization
    lv_targ = RegionRandomPoint(RegionPlayableMap());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_drJashan, OrderTargetingPoint(AbilityCommand("attack", 0), lv_targ), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_drJashanGuards, OrderTargetingPoint(AbilityCommand("attack", 0), lv_targ), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DrJashanLoop_Init () {
    gt_DrJashanLoop = TriggerCreate("gt_DrJashanLoop_Func");
    TriggerEnable(gt_DrJashanLoop, false);
    TriggerAddEventTimePeriodic(gt_DrJashanLoop, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game End Cinematic Zulu
//--------------------------------------------------------------------------------------------------
bool gt_GameEndCinematicZulu_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_pauseSpawning = true;
    Wait(2.0, c_timeGame);
    UnitPauseAll(true);
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gf_BlendFog(50.0, 50.0, 50.0, 6.0, 1.0, 5.0, 500);
    Wait(4.0, c_timeGame);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
        UnitClearSelection(PlayerGroupLoopCurrent());
        CameraSave(PlayerGroupLoopCurrent());
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2585), 0.0, -1, 10, true);
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionEntireMap());
    }
    PlayerGroupLoopEnd();
    UnitCreate(1, "Zulu", 0, 14, PointFromId(2586), 260.0);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(1.0, c_timeGame);
    CinematicFade(true, 3.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundPlay(SoundLink("TValerian02AMusicEventC", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    DialogCreate(800, 800, c_anchorBottomLeft, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 800, c_anchorCenter, 0, 0, StringExternal("Param/Value/5C34B950"), ColorWithAlpha(0,0,0,0), true, 10.0);
    SoundPlay(SoundLink("UI_ObjectiveText", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    Wait(15.0, c_timeGame);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    CinematicFade(false, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    Wait(3.0, c_timeGame);
    TriggerExecute(gt_PolicePatrols, true, false);
    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        CameraRestore(PlayerGroupLoopCurrent(), 0.0, -1, 10);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), 0.0, -1, 10, false);
        CameraLockInput(PlayerGroupLoopCurrent(), false);
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeGame);
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    TriggerExecute(gt_RegularGameCompleted, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameEndCinematicZulu_Init () {
    gt_GameEndCinematicZulu = TriggerCreate("gt_GameEndCinematicZulu_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regular Game Completed
//--------------------------------------------------------------------------------------------------
bool gt_RegularGameCompleted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/583E08BA"));
    gv_victory = true;
    gv_gameOver = true;
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_gamesWon[gv_gamemode][PlayerGroupLoopCurrent()] = (gv_gamesWon[gv_gamemode][PlayerGroupLoopCurrent()] + 1);
    }
    PlayerGroupLoopEnd();
    if ((gv_gamemode == 2)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playercamounlocked[9][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/F138ECA1"));
                gv_playercamounlocked[9][PlayerGroupLoopCurrent()] = true;
            }

        }
        PlayerGroupLoopEnd();
    }

    if ((gv_gamemode >= 3) && (gv_mod_rifle == true)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playercamounlocked[7][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/8C3E0C73"));
                gv_playercamounlocked[7][PlayerGroupLoopCurrent()] = true;
            }

        }
        PlayerGroupLoopEnd();
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_gamemode >= 3) && (gv_playerhits[PlayerGroupLoopCurrent()] == 0)) {
            if ((gv_playercamounlocked[10][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/6049A7AD"));
                gv_playercamounlocked[10][PlayerGroupLoopCurrent()] = true;
            }

        }

    }
    PlayerGroupLoopEnd();
    if ((gv_gamemode == 3)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playercamounlocked[4][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/FCDBD93E"));
                gv_playercamounlocked[4][PlayerGroupLoopCurrent()] = true;
            }

            if ((gv_playerhits[PlayerGroupLoopCurrent()] <= 5) && (gv_playerkills[PlayerGroupLoopCurrent()] >= 800) && (gv_playermassivekills[PlayerGroupLoopCurrent()] >= 5) && (gv_infestationLevel <= 25) && (gv_medalsunlocked[4][PlayerGroupLoopCurrent()] == false)) {
                gv_medalsunlocked[4][PlayerGroupLoopCurrent()] = true;
                gf_AwardPlayerXP(625, StringExternal("Param/Value/8A91FEFE"), PlayerGroupLoopCurrent());
            }

        }
        PlayerGroupLoopEnd();
    }

    if ((gv_gamemode == 4)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if (((gv_playercamounlocked[2][PlayerGroupLoopCurrent()] == false) || (gv_playerdecalunlocked[6][PlayerGroupLoopCurrent()] == false))) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/89861AE8"));
                gv_playercamounlocked[2][PlayerGroupLoopCurrent()] = true;
                gv_playerdecalunlocked[6][PlayerGroupLoopCurrent()] = true;
            }

            if ((gv_playerhits[PlayerGroupLoopCurrent()] <= 5) && (gv_playerkills[PlayerGroupLoopCurrent()] >= 1000) && (gv_playermassivekills[PlayerGroupLoopCurrent()] >= 8) && (gv_infestationLevel <= 25) && (gv_medalsunlocked[5][PlayerGroupLoopCurrent()] == false)) {
                gv_medalsunlocked[5][PlayerGroupLoopCurrent()] = true;
                gf_AwardPlayerXP(950, StringExternal("Param/Value/A0EAD2B5"), PlayerGroupLoopCurrent());
            }

            if ((UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()]) == "CombatMedic") && (gv_playercamounlocked[13][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/11E22B62"));
                gv_playercamounlocked[13][PlayerGroupLoopCurrent()] = true;
            }

        }
        PlayerGroupLoopEnd();
    }

    if ((gv_gamemode == 5)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerhits[PlayerGroupLoopCurrent()] <= 5) && (gv_playerkills[PlayerGroupLoopCurrent()] >= 1200) && (gv_playermassivekills[PlayerGroupLoopCurrent()] >= 10) && (gv_infestationLevel <= 25) && (gv_medalsunlocked[6][PlayerGroupLoopCurrent()] == false)) {
                gv_medalsunlocked[6][PlayerGroupLoopCurrent()] = true;
                gf_AwardPlayerXP(1500, StringExternal("Param/Value/7D8226BC"), PlayerGroupLoopCurrent());
            }

            if ((UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()]) == "CavalryScout") && ((gv_playerdecalunlocked[3][PlayerGroupLoopCurrent()] == false) || (gv_sIunlocked[14][PlayerGroupLoopCurrent()] == false))) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/B5AEB87A"));
                gv_playerdecalunlocked[3][PlayerGroupLoopCurrent()] = true;
                gv_sIunlocked[14][PlayerGroupLoopCurrent()] = true;
            }

            if ((UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()]) == "CombatMedic") && (gv_sIunlocked[19][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/139F2934"));
                gv_sIunlocked[19][PlayerGroupLoopCurrent()] = true;
            }
            else {
                if (((gv_playercamounlocked[5][PlayerGroupLoopCurrent()] == false) || (gv_playerdecalunlocked[4][PlayerGroupLoopCurrent()] == false))) {
                    UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/136C51F0"));
                    gv_playercamounlocked[5][PlayerGroupLoopCurrent()] = true;
                    gv_playerdecalunlocked[4][PlayerGroupLoopCurrent()] = true;
                }

            }
        }
        PlayerGroupLoopEnd();
    }

    if ((gv_gamemode == 5) && (gv_mod_1life == true)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playercamounlocked[11][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/E074B74E"));
                gv_playercamounlocked[11][PlayerGroupLoopCurrent()] = true;
            }

        }
        PlayerGroupLoopEnd();
    }

    if ((gv_gamemode == 8) && (gv_mod_rifle == true)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playercamounlocked[12][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/B76BED0E"));
                gv_playercamounlocked[12][PlayerGroupLoopCurrent()] = true;
            }

        }
        PlayerGroupLoopEnd();
    }

    if ((gv_gamemode == 8) && (gv_mod_1life == true)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerdecalunlocked[5][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/6E69AC23"));
                gv_playerdecalunlocked[5][PlayerGroupLoopCurrent()] = true;
            }

        }
        PlayerGroupLoopEnd();
    }

    if ((gv_gamemode == 4) && (gv_mod_rifle == true) && (gv_startingplayers <= 4) && (gv_startingplayers >= 2)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerdecalunlocked[1][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/ED426C6C"));
                gv_playerdecalunlocked[1][PlayerGroupLoopCurrent()] = true;
            }

        }
        PlayerGroupLoopEnd();
    }

    if ((gv_gamemode == 5) && (gv_startingplayers <= 4) && (gv_startingplayers >= 2)) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerdecalunlocked[9][PlayerGroupLoopCurrent()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/A12F8C16"));
                gv_playerdecalunlocked[9][PlayerGroupLoopCurrent()] = true;
            }

        }
        PlayerGroupLoopEnd();
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()] >= gv_playerStartingXP[PlayerGroupLoopCurrent()])) {
            gf_SavePlayerProgress(PlayerGroupLoopCurrent());
        }
        else {
            gf_VisorTextDialog(StringExternal("Param/Value/A1E3D3AA"), PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/5658657C"));
    Wait(15.0, c_timeGame);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegularGameCompleted_Init () {
    gt_RegularGameCompleted = TriggerCreate("gt_RegularGameCompleted_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilians Init
//--------------------------------------------------------------------------------------------------
bool gt_CiviliansInit_Func (bool testConds, bool runActions) {
    int autoF27B77FB_ae;
    int autoF27B77FB_ai;
    int auto6FDE0070_ae;
    int auto6FDE0070_ai;
    int auto58E33AFF_ae;
    int auto58E33AFF_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_cityRegions[1] = RegionFromId(24);
    gv_cityRegions[2] = RegionFromId(25);
    gv_cityRegions[3] = RegionFromId(26);
    libNtve_gf_MakeUnitInvulnerable(gv_farmerakma, true);
    UnitGroupAdd(gv_civilians, UnitFromId(1328));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(274), true);
    autoF27B77FB_ae = RandomInt(8, 12);
    autoF27B77FB_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoF27B77FB_ai >= 0 && lv_loopint <= autoF27B77FB_ae) || (autoF27B77FB_ai <= 0 && lv_loopint >= autoF27B77FB_ae) ) ; lv_loopint += autoF27B77FB_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[1]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[1], UnitLastCreatedGroup());
    }
    auto6FDE0070_ae = RandomInt(3, 6);
    auto6FDE0070_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto6FDE0070_ai >= 0 && lv_loopint <= auto6FDE0070_ae) || (auto6FDE0070_ai <= 0 && lv_loopint >= auto6FDE0070_ae) ) ; lv_loopint += auto6FDE0070_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[2]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[2], UnitLastCreatedGroup());
    }
    auto58E33AFF_ae = RandomInt(3, 6);
    auto58E33AFF_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto58E33AFF_ai >= 0 && lv_loopint <= auto58E33AFF_ae) || (auto58E33AFF_ai <= 0 && lv_loopint >= auto58E33AFF_ae) ) ; lv_loopint += auto58E33AFF_ai ) {
        UnitCreate(1, "Civilian", 0, 0, RegionRandomPoint(gv_cityRegions[3]), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(gv_wanderers[3], UnitLastCreatedGroup());
    }
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "Civilian") || (UnitGetType(UnitGroupLoopCurrent()) == "CivilianFemale"))) {
            UnitGroupAdd(gv_civilians, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CiviliansInit_Init () {
    gt_CiviliansInit = TriggerCreate("gt_CiviliansInit_Func");
    TriggerAddEventGeneric(gt_CiviliansInit, "Initialize Civilians");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wandering Loop
//--------------------------------------------------------------------------------------------------
bool gt_WanderingLoop_Func (bool testConds, bool runActions) {
    int auto5FFDB96B_ae;
    int auto5FFDB96B_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(gv_wanderers[1], c_unitCountAlive) >= 1) || (UnitGroupCount(gv_wanderers[2], c_unitCountAlive) >= 1) || (UnitGroupCount(gv_wanderers[3], c_unitCountAlive) >= 1))) {
        auto5FFDB96B_ae = 3;
        auto5FFDB96B_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto5FFDB96B_ai >= 0 && lv_loopint <= auto5FFDB96B_ae) || (auto5FFDB96B_ai <= 0 && lv_loopint >= auto5FFDB96B_ae) ) ; lv_loopint += auto5FFDB96B_ai ) {
            UnitGroupLoopBegin(gv_wanderers[lv_loopint]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_cityRegions[lv_loopint])), c_orderQueueAddToEnd);
            }
            UnitGroupLoopEnd();
        }
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WanderingLoop_Init () {
    gt_WanderingLoop = TriggerCreate("gt_WanderingLoop_Func");
    TriggerAddEventTimePeriodic(gt_WanderingLoop, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Police Patrols
//--------------------------------------------------------------------------------------------------
bool gt_PolicePatrols_Func (bool testConds, bool runActions) {
    int autoCFC8F59B_ae;
    int autoCFC8F59B_ai;
    int autoDDAB3DDA_n;
    int autoDDAB3DDA_i;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_policePatrols[1].lv_route[0] = PointFromId(2325);
    gv_policePatrols[1].lv_route[1] = PointFromId(1778);
    gv_policePatrols[1].lv_route[2] = PointFromId(1777);
    gv_policePatrols[1].lv_route[3] = PointFromId(1785);
    gv_policePatrols[1].lv_route[4] = PointFromId(1786);
    gv_policePatrols[1].lv_route[5] = PointFromId(1787);
    gv_policePatrols[1].lv_route[6] = PointFromId(1788);
    gv_policePatrols[1].lv_route[7] = PointFromId(1793);
    gv_policePatrols[1].lv_route[8] = PointFromId(2326);
    gv_policePatrols[1].lv_routemax = 8;
    gv_policePatrols[2].lv_route[0] = PointFromId(1788);
    gv_policePatrols[2].lv_route[1] = PointFromId(1789);
    gv_policePatrols[2].lv_route[2] = PointFromId(1790);
    gv_policePatrols[2].lv_route[3] = PointFromId(1791);
    gv_policePatrols[2].lv_route[4] = PointFromId(2332);
    gv_policePatrols[2].lv_route[5] = PointFromId(2331);
    gv_policePatrols[2].lv_route[6] = PointFromId(870);
    gv_policePatrols[2].lv_route[7] = PointFromId(2330);
    gv_policePatrols[2].lv_routemax = 7;
    gv_policePatrols[3].lv_route[0] = PointFromId(1784);
    gv_policePatrols[3].lv_route[1] = PointFromId(1783);
    gv_policePatrols[3].lv_route[2] = PointFromId(1782);
    gv_policePatrols[3].lv_route[3] = PointFromId(1781);
    gv_policePatrols[3].lv_route[4] = PointFromId(2320);
    gv_policePatrols[3].lv_route[5] = PointFromId(2321);
    gv_policePatrols[3].lv_route[6] = PointFromId(2322);
    gv_policePatrols[3].lv_routemax = 6;
    autoCFC8F59B_ae = 3;
    autoCFC8F59B_ai = 1;
    lv_int = 1;
    for ( ; ( (autoCFC8F59B_ai >= 0 && lv_int <= autoCFC8F59B_ae) || (autoCFC8F59B_ai <= 0 && lv_int >= autoCFC8F59B_ae) ) ; lv_int += autoCFC8F59B_ai ) {
        autoDDAB3DDA_n = 2;
        for (autoDDAB3DDA_i = 1; autoDDAB3DDA_i <= autoDDAB3DDA_n; autoDDAB3DDA_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficer", 0, 0, gv_policePatrols[lv_int].lv_route[0]);
            UnitGroupAdd(gv_policePatrols[lv_int].lv_group, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "PatrollingSlow", UnitLastCreated(), 1);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply Slow");
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficerShotgun", 0, 0, gv_policePatrols[lv_int].lv_route[0]);
        UnitGroupAdd(gv_policePatrols[lv_int].lv_group, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "PatrollingSlow", UnitLastCreated(), 1);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimGroupApply Slow");
    }
    TriggerEnable(gt_PolicePatrolLoop, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PolicePatrols_Init () {
    gt_PolicePatrols = TriggerCreate("gt_PolicePatrols_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Police Patrol Loop
//--------------------------------------------------------------------------------------------------
bool gt_PolicePatrolLoop_Func (bool testConds, bool runActions) {
    int autoEE56DEF3_ae;
    int autoEE56DEF3_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEE56DEF3_ae = 3;
    autoEE56DEF3_ai = 1;
    lv_int = 1;
    for ( ; ( (autoEE56DEF3_ai >= 0 && lv_int <= autoEE56DEF3_ae) || (autoEE56DEF3_ai <= 0 && lv_int >= autoEE56DEF3_ae) ) ; lv_int += autoEE56DEF3_ai ) {
        if ((libNtve_gf_UnitGroupIsDead(gv_policePatrols[lv_int].lv_group) == false)) {
            if ((DistanceBetweenPoints(gv_policePatrols[lv_int].lv_route[gv_policePatrols[lv_int].lv_routenext], UnitGetPosition(UnitGroupRandomUnit(gv_policePatrols[lv_int].lv_group, c_unitCountAlive))) <= 4.0)) {
                if ((gv_policePatrols[lv_int].lv_routenext == gv_policePatrols[lv_int].lv_routemax)) {
                    if ((gv_policePatrols[lv_int].lv_returning == true)) {
                        gv_policePatrols[lv_int].lv_routenext = (gv_policePatrols[lv_int].lv_routenext + 1);
                        gv_policePatrols[lv_int].lv_returning = false;
                    }
                    else {
                        gv_policePatrols[lv_int].lv_routenext = (gv_policePatrols[lv_int].lv_routenext - 1);
                        gv_policePatrols[lv_int].lv_returning = true;
                    }
                }
                else {
                    if ((gv_policePatrols[lv_int].lv_returning == true)) {
                        gv_policePatrols[lv_int].lv_routenext = (gv_policePatrols[lv_int].lv_routenext - 1);
                    }
                    else {
                        gv_policePatrols[lv_int].lv_routenext = (gv_policePatrols[lv_int].lv_routenext + 1);
                    }
                }
            }

            UnitGroupIssueOrder(gv_policePatrols[lv_int].lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), gv_policePatrols[lv_int].lv_route[gv_policePatrols[lv_int].lv_routenext]), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PolicePatrolLoop_Init () {
    gt_PolicePatrolLoop = TriggerCreate("gt_PolicePatrolLoop_Func");
    TriggerEnable(gt_PolicePatrolLoop, false);
    TriggerAddEventTimePeriodic(gt_PolicePatrolLoop, 9.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Combining
//--------------------------------------------------------------------------------------------------
bool gt_ItemCombining_Func (bool testConds, bool runActions) {
    int auto4CB98095_ae;
    int auto4CB98095_ai;

    // Variable Declarations
    unit lv_unit;
    string lv_itemtype;
    int lv_loopint;
    fixed lv_difference;
    unit lv_loopitem;

    // Variable Initialization
    lv_unit = UnitInventoryUnit(EventUnitInventoryItem());
    lv_itemtype = UnitGetType(EventUnitInventoryItem());

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_itemtype == "Magazines") || (lv_itemtype == "AmmoCase") || (lv_itemtype == "QuikClot") || (lv_itemtype == "FragGrenade") || (lv_itemtype == "EnergyCell") || (lv_itemtype == "GroundFlareItem") || (lv_itemtype == "FlareGun") || (lv_itemtype == "SmokeGrenadeItem") || (lv_itemtype == "FirstAidKit") || (lv_itemtype == "40mmGrenadeItem") || (lv_itemtype == "MGL") || (lv_itemtype == "M5MAR") || (lv_itemtype == "ExplosiveCharge"))) {
        auto4CB98095_ae = 6;
        auto4CB98095_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto4CB98095_ai >= 0 && lv_loopint <= auto4CB98095_ae) || (auto4CB98095_ai <= 0 && lv_loopint >= auto4CB98095_ae) ) ; lv_loopint += auto4CB98095_ai ) {
            lv_loopitem = UnitInventoryItem(lv_unit, lv_loopint);
            if ((UnitGetType(lv_loopitem) == "Magazines") && (gf_CountItemTypeUsed("AmmoCase", lv_unit, "AmmoCharges") >= 1) && (UnitGetChargeUsed(gf_FirstAmmoCaseUsed(lv_unit), "AmmoCharges") >= 1.0)) {
                gf_DonateItems(gf_FirstAmmoCaseUsed(lv_unit), lv_loopitem, "AmmoCharges", 3.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "40mmGrenadeItem") && (gf_CountItemTypeUsed("MGL", lv_unit, "ItemCharges") >= 1) && (UnitGetChargeUsed(gf_FirstItemType("MGL", lv_unit), "ItemCharges") >= 1.0)) {
                gf_DonateItems(gf_First40mmGrenadeUsed(lv_unit), lv_loopitem, "ItemCharges", 10.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "40mmGrenadeItem") && (gf_CountItemTypeUsed("M5MAR", lv_unit, "ItemCharges") >= 1) && (UnitGetChargeUsed(gf_FirstItemType("M5MAR", lv_unit), "ItemCharges") >= 1.0)) {
                gf_DonateItems(gf_First40mmGrenadeUsed(lv_unit), lv_loopitem, "ItemCharges", 10.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "40mmGrenadeItem") && (gf_CountItemTypeUsed("40mmGrenadeItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 10.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "Magazines") && (gf_CountItemTypeUsed("Magazines", lv_unit, "AmmoCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "AmmoCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "AmmoCharges"), "AmmoCharges", 3.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "QuikClot") && (gf_CountItemTypeUsed("QuikClot", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 3.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "EnergyCell") && (gf_CountItemTypeUsed("EnergyCell", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 3.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "FragGrenade") && (gf_CountItemTypeUsed("FragGrenade", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 5.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "SmokeGrenadeItem") && (gf_CountItemTypeUsed("SmokeGrenadeItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 5.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "GroundFlareItem") && (gf_CountItemTypeUsed("GroundFlareItem", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 5.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "FlareGun") && (gf_CountItemTypeUsed("FlareGun", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 5.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "FirstAidKit") && (gf_CountItemTypeUsed("FirstAidKit", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 5.0);
                Wait(0.1, c_timeGame);
            }

            if ((UnitGetType(lv_loopitem) == "ExplosiveCharge") && (gf_CountItemTypeUsed("ExplosiveCharge", lv_unit, "ItemCharges") >= 2) && (UnitGetChargeUsed(lv_loopitem, "ItemCharges") >= 1.0)) {
                gf_CombineItems(lv_loopitem, gf_SameItemTypeUsed(lv_unit, lv_loopitem, "ItemCharges"), "ItemCharges", 12.0);
                Wait(0.1, c_timeGame);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemCombining_Init () {
    gt_ItemCombining = TriggerCreate("gt_ItemCombining_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemCombining, null, c_unitInventoryChangeUses, null);
    TriggerAddEventUnitInventoryChange(gt_ItemCombining, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_ItemCombining, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_ItemCombining, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pickup Item
//--------------------------------------------------------------------------------------------------
bool gt_PickupItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    unit lv_unit;

    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_unit = UnitInventoryUnit(lv_item);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(lv_item, true);
    SoundPlayOnUnit(SoundLink("PickupItem", -1), PlayerGroupAll(), lv_unit, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickupItem_Init () {
    gt_PickupItem = TriggerCreate("gt_PickupItem_Func");
    TriggerAddEventUnitInventoryChange(gt_PickupItem, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_PickupItem, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_PickupItem, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Item
//--------------------------------------------------------------------------------------------------
bool gt_DropItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    string lv_itemtype;
    unit lv_unit;

    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_itemtype = UnitGetType(lv_item);
    lv_unit = UnitInventoryUnit(lv_item);

    // Conditions
    if (testConds) {
        if (!((lv_item != null))) {
            return false;
        }

        if (!((lv_itemtype != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_itemtype, "FlagArray[" + IntToString(c_unitFlagInvulnerable) + "]", c_playerAny) == 0)) {
        libNtve_gf_MakeUnitInvulnerable(lv_item, false);
    }

    SoundPlayOnUnit(SoundLink("PickupItem", -1), PlayerGroupAll(), lv_unit, 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropItem_Init () {
    gt_DropItem = TriggerCreate("gt_DropItem_Func");
    TriggerAddEventUnitInventoryChange(gt_DropItem, null, c_unitInventoryChangeDrops, null);
    TriggerAddEventUnitInventoryChange(gt_DropItem, null, c_unitInventoryChangeLoses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reload Sentry Gun
//--------------------------------------------------------------------------------------------------
bool gt_ReloadSentryGun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_item;
    string lv_itemtype;
    unit lv_user;
    string lv_usertype;

    // Variable Initialization
    lv_item = EventUnitInventoryItem();
    lv_itemtype = UnitGetType(lv_item);
    lv_user = UnitInventoryUnit(lv_item);
    lv_usertype = UnitGetType(lv_user);

    // Conditions
    if (testConds) {
        if (!(((lv_usertype == "MK44SentryGun") || (lv_usertype == "MK79SentryGun") || (lv_usertype == "M1SentryGun")))) {
            return false;
        }

        if (!(((lv_itemtype == "Magazines") || (lv_itemtype == "AmmoCase")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_usertype == "MK79SentryGun")) {
        gf_ReloadSentry(lv_user, lv_item, 100.0);
    }
    else {
        gf_ReloadSentry(lv_user, lv_item, 200.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReloadSentryGun_Init () {
    gt_ReloadSentryGun = TriggerCreate("gt_ReloadSentryGun_Func");
    TriggerAddEventUnitInventoryChange(gt_ReloadSentryGun, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_ReloadSentryGun, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_ReloadSentryGun, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Gun Item Drops
//--------------------------------------------------------------------------------------------------
bool gt_SentryGunItemDrops_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sentrygun;

    // Variable Initialization
    lv_sentrygun = UnitInventoryUnit(EventUnitInventoryItem());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItem()) == "KineticIntegrator") || (UnitGetType(EventUnitInventoryItem()) == "EnergyBattery") || (UnitGetType(EventUnitInventoryItem()) == "MuscleRelaxant")))) {
            return false;
        }

        if (!(((UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "MK44SentryGun") || (UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "MK79SentryGun") || (UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "M1SentryGun")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnitInventoryItem()), 0, 0, PointWithOffset(UnitGetPosition(lv_sentrygun), 1.0, -1.0));
    UnitInventoryRemove(EventUnitInventoryItem());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryGunItemDrops_Init () {
    gt_SentryGunItemDrops = TriggerCreate("gt_SentryGunItemDrops_Func");
    TriggerAddEventUnitInventoryChange(gt_SentryGunItemDrops, null, c_unitInventoryChangePicksUp, null);
    TriggerAddEventUnitInventoryChange(gt_SentryGunItemDrops, null, c_unitInventoryChangeReceives, null);
    TriggerAddEventUnitInventoryChange(gt_SentryGunItemDrops, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Place SAM Site
//--------------------------------------------------------------------------------------------------
bool gt_PlaceSAMSite_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitCreatedUnit(), 13, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlaceSAMSite_Init () {
    gt_PlaceSAMSite = TriggerCreate("gt_PlaceSAMSite_Func");
    TriggerAddEventUnitCreated(gt_PlaceSAMSite, null, "SAMSite", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Spawn 1
//--------------------------------------------------------------------------------------------------
bool gt_ItemSpawn1_Func (bool testConds, bool runActions) {
    int autoF1832E78_ae;
    int autoF1832E78_ai;
    int autoB38E923C_ae;
    int autoB38E923C_ai;
    int auto041860F9_ae;
    int auto041860F9_ai;
    int autoF10FF55D_ae;
    int autoF10FF55D_ai;
    int auto30B86C11_ae;
    int auto30B86C11_ai;
    int auto7DC186FC_ae;
    int auto7DC186FC_ai;
    int auto42BD1F1A_ae;
    int auto42BD1F1A_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF1832E78_ae = (6 + (PlayerGroupCount(gv_players) / 2));
    autoF1832E78_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoF1832E78_ai >= 0 && lv_loopint <= autoF1832E78_ae) || (autoF1832E78_ai <= 0 && lv_loopint >= autoF1832E78_ae) ) ; lv_loopint += autoF1832E78_ai ) {
        gf_SpawnItem("Magazines", 1);
    }
    autoB38E923C_ae = 2;
    autoB38E923C_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoB38E923C_ai >= 0 && lv_loopint <= autoB38E923C_ae) || (autoB38E923C_ai <= 0 && lv_loopint >= autoB38E923C_ae) ) ; lv_loopint += autoB38E923C_ai ) {
        gf_SpawnItem("QuikClot", 1);
    }
    auto041860F9_ae = 2;
    auto041860F9_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto041860F9_ai >= 0 && lv_loopint <= auto041860F9_ae) || (auto041860F9_ai <= 0 && lv_loopint >= auto041860F9_ae) ) ; lv_loopint += auto041860F9_ai ) {
        gf_SpawnItem("FragGrenade", 2);
    }
    autoF10FF55D_ae = 2;
    autoF10FF55D_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoF10FF55D_ai >= 0 && lv_loopint <= autoF10FF55D_ae) || (autoF10FF55D_ai <= 0 && lv_loopint >= autoF10FF55D_ae) ) ; lv_loopint += autoF10FF55D_ai ) {
        gf_SpawnItem("EnergyCell", 2);
    }
    auto30B86C11_ae = 2;
    auto30B86C11_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto30B86C11_ai >= 0 && lv_loopint <= auto30B86C11_ae) || (auto30B86C11_ai <= 0 && lv_loopint >= auto30B86C11_ae) ) ; lv_loopint += auto30B86C11_ai ) {
        gf_SpawnItem("SmokeGrenadeItem", 2);
    }
    auto7DC186FC_ae = 2;
    auto7DC186FC_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto7DC186FC_ai >= 0 && lv_loopint <= auto7DC186FC_ae) || (auto7DC186FC_ai <= 0 && lv_loopint >= auto7DC186FC_ae) ) ; lv_loopint += auto7DC186FC_ai ) {
        gf_SpawnItem("FirstAidKit", 2);
    }
    auto42BD1F1A_ae = 4;
    auto42BD1F1A_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto42BD1F1A_ai >= 0 && lv_loopint <= auto42BD1F1A_ae) || (auto42BD1F1A_ai <= 0 && lv_loopint >= auto42BD1F1A_ae) ) ; lv_loopint += auto42BD1F1A_ai ) {
        gf_SpawnItem("AmmoCase", 3);
    }
    if ((gv_allowShotguns == true)) {
        gf_SpawnItem("ISS7", 9);
    }

    if ((gv_allowDMR == true)) {
        gf_SpawnItem("IDMR2", 9);
    }

    if ((gv_allowRifles == true)) {
        gf_SpawnItem("HK42", 6);
        gf_SpawnItem("USMCR", 6);
        gf_SpawnItem("SOFAR", 9);
        gf_SpawnItem("M5MAR", 9);
        gf_SpawnItem("StynerBR2", 6);
    }

    if ((gv_allowMachineGuns == true)) {
        gf_SpawnItem("M41SAW", 9);
    }

    gf_SpawnItem("AimAssist", 2);
    gf_SpawnItem("Flashlight", 1);
    gf_SpawnItem("GroundFlareItem", 1);
    gf_SpawnItem("FlareGun", 1);
    gf_SpawnItem("ExplosiveCharge", 1);
    gf_SpawnItem("KevlarBodyArmor", 2);
    gf_SpawnItem("MGL", 2);
    gf_SpawnItem("40mmGrenadeItem", 1);
    gf_SpawnItem("APRounds", 9);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemSpawn1_Init () {
    gt_ItemSpawn1 = TriggerCreate("gt_ItemSpawn1_Func");
    TriggerAddEventTimePeriodic(gt_ItemSpawn1, 380.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_ItemSpawn1, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Spawn 2
//--------------------------------------------------------------------------------------------------
bool gt_ItemSpawn2_Func (bool testConds, bool runActions) {
    int auto0299B6B5_ae;
    int auto0299B6B5_ai;
    int auto99749AA3_ae;
    int auto99749AA3_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0299B6B5_ae = 2;
    auto0299B6B5_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto0299B6B5_ai >= 0 && lv_loopint <= auto0299B6B5_ae) || (auto0299B6B5_ai <= 0 && lv_loopint >= auto0299B6B5_ae) ) ; lv_loopint += auto0299B6B5_ai ) {
        gf_SpawnItem("QuikClot", 2);
    }
    auto99749AA3_ae = 2;
    auto99749AA3_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto99749AA3_ai >= 0 && lv_loopint <= auto99749AA3_ae) || (auto99749AA3_ai <= 0 && lv_loopint >= auto99749AA3_ae) ) ; lv_loopint += auto99749AA3_ai ) {
        gf_SpawnItem("FragGrenade", 2);
    }
    if ((gv_allowShotguns == true)) {
        gf_SpawnItem("ISS7", 2);
    }

    if ((gv_allowDMR == true)) {
        gf_SpawnItem("IDMR2", 2);
        gf_SpawnItem("M92Torrent", 2);
    }

    if ((gv_gamemode != 6)) {
        gf_SpawnItem("OPA", 2);
    }

    if ((gv_allowRifles == true)) {
        gf_SpawnItem("HK42", 1);
        gf_SpawnItem("SOFAR", 2);
        gf_SpawnItem("M5MAR", 2);
        gf_SpawnItem("USMCR", 2);
        gf_SpawnItem("StynerBR2", 1);
    }

    if ((gv_allowPlasmaRifles == true)) {
        gf_SpawnItem("IPR", 3);
    }

    if ((gv_allowMachineGuns == true)) {
        gf_SpawnItem("M241MMG", 2);
        gf_SpawnItem("M135Minigun", 3);
        gf_SpawnItem("M41SAW", 2);
    }

    if ((gv_allowFlamethrowers == true)) {
        gf_SpawnItem("M79Flamethrower", 2);
    }

    gf_SpawnItem("AimAssist", 2);
    gf_SpawnItem("LiftBoots", 2);
    gf_SpawnItem("DURounds", 4);
    gf_SpawnItem("SPCS", 2);
    gf_SpawnItem("MuscleRelaxant", 2);
    gf_SpawnItem("KineticIntegrator", 2);
    gf_SpawnItem("MGL", 2);
    gf_SpawnItem("40mmGrenadeItem", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemSpawn2_Init () {
    gt_ItemSpawn2 = TriggerCreate("gt_ItemSpawn2_Func");
    TriggerEnable(gt_ItemSpawn2, false);
    TriggerAddEventTimePeriodic(gt_ItemSpawn2, 370.0, c_timeGame);
    TriggerAddEventTimeElapsed(gt_ItemSpawn2, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Spawn Competitive
//--------------------------------------------------------------------------------------------------
bool gt_ItemSpawnCompetitive_Func (bool testConds, bool runActions) {
    int auto5A588A37_ae;
    int auto5A588A37_ai;
    int auto79211F66_ae;
    int auto79211F66_ai;
    int autoD4D3BCF4_ae;
    int autoD4D3BCF4_ai;
    int autoCA6D0B4E_ae;
    int autoCA6D0B4E_ai;
    int auto2EF27916_ae;
    int auto2EF27916_ai;
    int auto85CF7ADE_ae;
    int auto85CF7ADE_ai;
    int auto2DA16248_ae;
    int auto2DA16248_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gamemode == 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5A588A37_ae = 3;
    auto5A588A37_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto5A588A37_ai >= 0 && lv_loopint <= auto5A588A37_ae) || (auto5A588A37_ai <= 0 && lv_loopint >= auto5A588A37_ae) ) ; lv_loopint += auto5A588A37_ai ) {
        gf_SpawnItem("QuikClot", 2);
    }
    auto79211F66_ae = 2;
    auto79211F66_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto79211F66_ai >= 0 && lv_loopint <= auto79211F66_ae) || (auto79211F66_ai <= 0 && lv_loopint >= auto79211F66_ae) ) ; lv_loopint += auto79211F66_ai ) {
        gf_SpawnItem("FragGrenade", 2);
    }
    if ((gv_gamemode != 6)) {
        gf_SpawnItem("OPA", 2);
    }

    autoD4D3BCF4_ae = 2;
    autoD4D3BCF4_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoD4D3BCF4_ai >= 0 && lv_loopint <= autoD4D3BCF4_ae) || (autoD4D3BCF4_ai <= 0 && lv_loopint >= autoD4D3BCF4_ae) ) ; lv_loopint += autoD4D3BCF4_ai ) {
        gf_SpawnItem("FragGrenade", 2);
    }
    autoCA6D0B4E_ae = 2;
    autoCA6D0B4E_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoCA6D0B4E_ai >= 0 && lv_loopint <= autoCA6D0B4E_ae) || (autoCA6D0B4E_ai <= 0 && lv_loopint >= autoCA6D0B4E_ae) ) ; lv_loopint += autoCA6D0B4E_ai ) {
        gf_SpawnItem("EnergyCell", 2);
    }
    auto2EF27916_ae = 2;
    auto2EF27916_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto2EF27916_ai >= 0 && lv_loopint <= auto2EF27916_ae) || (auto2EF27916_ai <= 0 && lv_loopint >= auto2EF27916_ae) ) ; lv_loopint += auto2EF27916_ai ) {
        gf_SpawnItem("SmokeGrenadeItem", 2);
    }
    auto85CF7ADE_ae = 3;
    auto85CF7ADE_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto85CF7ADE_ai >= 0 && lv_loopint <= auto85CF7ADE_ae) || (auto85CF7ADE_ai <= 0 && lv_loopint >= auto85CF7ADE_ae) ) ; lv_loopint += auto85CF7ADE_ai ) {
        gf_SpawnItem("FirstAidKit", 2);
    }
    auto2DA16248_ae = 4;
    auto2DA16248_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto2DA16248_ai >= 0 && lv_loopint <= auto2DA16248_ae) || (auto2DA16248_ai <= 0 && lv_loopint >= auto2DA16248_ae) ) ; lv_loopint += auto2DA16248_ai ) {
        gf_SpawnItem("AmmoCase", 3);
    }
    if ((gv_allowRifles == true)) {
        gf_SpawnItem("HK42", 5);
        gf_SpawnItem("USMCR", 5);
        gf_SpawnItem("StynerBR2", 5);
        gf_SpawnItem("M5MAR", 9);
        gf_SpawnItem("HK42", 1);
        gf_SpawnItem("SOFAR", 2);
        gf_SpawnItem("M5MAR", 2);
        gf_SpawnItem("USMCR", 2);
        gf_SpawnItem("StynerBR2", 1);
        gf_SpawnItem("SOFAR", 9);
    }

    if ((gv_allowShotguns == true)) {
        gf_SpawnItem("ISS7", 2);
        gf_SpawnItem("ISS7", 9);
    }

    if ((gv_allowPlasmaRifles == true)) {
        gf_SpawnItem("IPR", 3);
    }

    if ((gv_allowMachineGuns == true)) {
        gf_SpawnItem("M41SAW", 2);
        gf_SpawnItem("M241MMG", 2);
        gf_SpawnItem("M135Minigun", 3);
        gf_SpawnItem("M41SAW", 9);
    }

    if ((gv_allowFlamethrowers == true)) {
        gf_SpawnItem("M79Flamethrower", 2);
    }

    if ((gv_allowDMR == true)) {
        gf_SpawnItem("IDMR2", 9);
        gf_SpawnItem("IDMR2", 2);
        gf_SpawnItem("M92Torrent", 4);
    }

    gf_SpawnItem("SPCS", 2);
    gf_SpawnItem("MuscleRelaxant", 2);
    gf_SpawnItem("KineticIntegrator", 2);
    gf_SpawnItem("MGL", 2);
    gf_SpawnItem("40mmGrenadeItem", 1);
    gf_SpawnItem("AimAssist", 2);
    gf_SpawnItem("LiftBoots", 2);
    gf_SpawnItem("AimAssist", 2);
    gf_SpawnItem("Flashlight", 1);
    gf_SpawnItem("GroundFlareItem", 1);
    gf_SpawnItem("FlareGun", 1);
    gf_SpawnItem("KevlarBodyArmor", 2);
    gf_SpawnItem("MGL", 2);
    gf_SpawnItem("40mmGrenadeItem", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemSpawnCompetitive_Init () {
    gt_ItemSpawnCompetitive = TriggerCreate("gt_ItemSpawnCompetitive_Func");
    TriggerEnable(gt_ItemSpawnCompetitive, false);
    TriggerAddEventTimePeriodic(gt_ItemSpawnCompetitive, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Weapon Caches
//--------------------------------------------------------------------------------------------------
bool gt_InitWeaponCaches_Func (bool testConds, bool runActions) {
    int autoEB260071_ae;
    int autoEB260071_ai;

    // Variable Declarations
    int lv_loopint;
    point lv_point;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_weaponcachesfound = 0;
    RegionAddRegion(RegionFromId(62), RegionFromId(63));
    RegionAddCircle(RegionFromId(62), false, RegionGetCenter(RegionFromId(6)), 20.0);
    gv_weaponcacheregion[1] = RegionFromId(57);
    gv_weaponcacheregion[2] = RegionFromId(58);
    gv_weaponcacheregion[3] = RegionFromId(59);
    gv_weaponcacheregion[4] = RegionFromId(60);
    gv_weaponcacheregion[5] = RegionFromId(61);
    autoEB260071_ae = 5;
    autoEB260071_ai = 1;
    lv_loopint = 1;
    for ( ; ( (autoEB260071_ai >= 0 && lv_loopint <= autoEB260071_ae) || (autoEB260071_ai <= 0 && lv_loopint >= autoEB260071_ae) ) ; lv_loopint += autoEB260071_ai ) {
        while (true) {
            lv_point = RegionRandomPoint(RegionFromId(62));
            if ((PointPathingPassable(lv_point) == true) && (PointPathingIsConnected(lv_point, PointFromId(2420)) == true)) {
                break;
            }

            Wait(0.0625, c_timeGame);
        }
        RegionSetCenter(gv_weaponcacheregion[lv_loopint], lv_point);
        libNtve_gf_CreateModelAtPoint("Rock", RegionGetCenter(gv_weaponcacheregion[lv_loopint]));
        ActorSend(libNtve_gf_ActorLastCreated(), "TextureSelectById WeaponsCacheRock");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.400000");
    }
    Wait(RandomFixed(20.0, 180.0), c_timeGame);
    gf_MissionText(StringExternal("Param/Value/5C91E12D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitWeaponCaches_Init () {
    gt_InitWeaponCaches = TriggerCreate("gt_InitWeaponCaches_Func");
    TriggerAddEventGeneric(gt_InitWeaponCaches, "Init Weapon Cache");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Find Weapons Cache
//--------------------------------------------------------------------------------------------------
bool gt_FindWeaponsCache_Func (bool testConds, bool runActions) {
    int auto46E9984F_ae;
    int auto46E9984F_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 6))) {
            return false;
        }

        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto46E9984F_ae = 5;
    auto46E9984F_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto46E9984F_ai >= 0 && lv_loopint <= auto46E9984F_ae) || (auto46E9984F_ai <= 0 && lv_loopint >= auto46E9984F_ae) ) ; lv_loopint += auto46E9984F_ai ) {
        if ((EventUnitRegion() == gv_weaponcacheregion[lv_loopint]) && (gv_weaponcachefound[lv_loopint] == false)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_weaponcacheregion[lv_loopint]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 25.0, 270.0);
            gv_weaponcachesfound += 1;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, libSwaC_gf_FormatTextWithReplacement(StringExternal("Param/Value/97345EB1"), IntToText(gv_weaponcachesfound), null, null, null));
            SoundPlay(SoundLink("UI_ObjectiveUpdate", -1), PlayerGroupAll(), 100.0, 0.0);
            gv_weaponcachefound[lv_loopint] = true;
            gf_WeaponCacheSpawnItem("Magazines", RandomInt(2, 4), gv_weaponcacheregion[lv_loopint]);
            gf_WeaponCacheSpawnItem("AmmoCase", RandomInt(1, 2), gv_weaponcacheregion[lv_loopint]);
            gf_WeaponCacheSpawnItem("QuikClot", RandomInt(0, 1), gv_weaponcacheregion[lv_loopint]);
            gf_WeaponCacheSpawnItem("EnergyCell", RandomInt(0, 2), gv_weaponcacheregion[lv_loopint]);
            gf_WeaponCacheSpawnItem("FlareGun", RandomInt(0, 1), gv_weaponcacheregion[lv_loopint]);
            gf_WeaponCacheSpawnItem("FirstAidKit", RandomInt(0, 1), gv_weaponcacheregion[lv_loopint]);
            gf_WeaponCacheSpawnItem("GroundFlareItem", RandomInt(0, 1), gv_weaponcacheregion[lv_loopint]);
            gf_WeaponCacheSpawnItem("ExplosiveCharge", RandomInt(0, 2), gv_weaponcacheregion[lv_loopint]);
            if ((lv_loopint == 1)) {
                gf_WeaponCacheSpawnItem("SPCS", 1, gv_weaponcacheregion[lv_loopint]);
                gf_WeaponCacheSpawnItem("MuscleRelaxant", 1, gv_weaponcacheregion[lv_loopint]);
                gf_WeaponCacheSpawnItem("MRL", 1, gv_weaponcacheregion[lv_loopint]);
                if ((gv_allowFlamethrowers == true)) {
                    gf_WeaponCacheSpawnItem("M79Flamethrower", 1, gv_weaponcacheregion[lv_loopint]);
                }

                if ((gv_allowShotguns == true)) {
                    gf_WeaponCacheSpawnItem("ISS7", RandomInt(0, 1), gv_weaponcacheregion[lv_loopint]);
                }

                if ((gv_allowRifles == true)) {
                    gf_WeaponCacheSpawnItem("USMCR", RandomInt(0, 1), gv_weaponcacheregion[lv_loopint]);
                }

            }

            if ((lv_loopint == 2)) {
                gf_WeaponCacheSpawnItem("StynerBR2", 1, gv_weaponcacheregion[lv_loopint]);
                gf_WeaponCacheSpawnItem("MK44SentryGunPacked", 1, gv_weaponcacheregion[lv_loopint]);
                if ((gv_allowDMR == true)) {
                    gf_WeaponCacheSpawnItem("IDMR2", RandomInt(0, 1), gv_weaponcacheregion[lv_loopint]);
                }

                if ((gv_allowRifles == true)) {
                    gf_WeaponCacheSpawnItem("M5MAR", RandomInt(0, 2), gv_weaponcacheregion[lv_loopint]);
                }

            }

            if ((lv_loopint == 3)) {
                if ((gv_allowRifles == true)) {
                    gf_WeaponCacheSpawnItem("HK42", 1, gv_weaponcacheregion[lv_loopint]);
                }

                gf_WeaponCacheSpawnItem("MRL", 1, gv_weaponcacheregion[lv_loopint]);
                gf_WeaponCacheSpawnItem("APRounds", RandomInt(0, 1), gv_weaponcacheregion[lv_loopint]);
            }

            if ((lv_loopint == 4)) {
                gf_WeaponCacheSpawnItem("KineticIntegrator", 2, gv_weaponcacheregion[lv_loopint]);
                gf_WeaponCacheSpawnItem("FragGrenade", 2, gv_weaponcacheregion[lv_loopint]);
                if ((gv_allowMachineGuns == true)) {
                    if ((RandomInt(0, 1) == 1)) {
                        gf_WeaponCacheSpawnItem("M41SAW", 1, gv_weaponcacheregion[lv_loopint]);
                    }
                    else {
                        gf_WeaponCacheSpawnItem("M241MMG", 1, gv_weaponcacheregion[lv_loopint]);
                    }
                }

            }

            if ((lv_loopint == 5)) {
                gf_WeaponCacheSpawnItem("KevlarBodyArmor", 1, gv_weaponcacheregion[lv_loopint]);
                gf_WeaponCacheSpawnItem("AimAssist", 1, gv_weaponcacheregion[lv_loopint]);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FindWeaponsCache_Init () {
    gt_FindWeaponsCache = TriggerCreate("gt_FindWeaponsCache_Func");
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(57), true);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(58), true);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(59), true);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_FindWeaponsCache, null, RegionFromId(61), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Helicopter AI
//--------------------------------------------------------------------------------------------------
bool gt_HelicopterAI_Func (bool testConds, bool runActions) {
    unitgroup autoEBDB6044_g;
    int autoEBDB6044_u;
    unitgroup autoCED1F6CE_g;
    int autoCED1F6CE_u;

    // Variable Declarations
    unit lv_aiunit;
    int lv_aiowner;
    point lv_aiposition;
    unitgroup lv_filterunitgroup;
    unit lv_filterunit;
    aifilter lv_filter;
    region lv_decisionregion;
    point lv_decisionpoint;
    unit lv_tempunit;
    fixed lv_tempreal;

    // Variable Initialization
    lv_aiunit = EventUnit();
    lv_aiowner = UnitGetOwner(lv_aiunit);
    lv_aiposition = UnitGetPosition(lv_aiunit);
    lv_filter = AIFilter(lv_aiowner);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_aiunit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((OrderGetAbilityCommand(UnitOrder(lv_aiunit, 1)) != AbilityCommand("move", 0)) && (OrderGetAbilityCommand(UnitOrder(lv_aiunit, 2)) != AbilityCommand("move", 0)) && (UnitGroupCount(UnitGroupSearch(null, lv_aiowner, lv_aiposition, 5.0, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) >= 1)) {
        lv_decisionregion = RegionCircle(lv_aiposition, 15.0);
        autoEBDB6044_g = UnitGroupSearch(null, lv_aiowner, lv_aiposition, 15.0, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        autoEBDB6044_u = 1;
        for ( ; autoEBDB6044_u <= UnitGroupCount(autoEBDB6044_g, c_unitCountAll) ; autoEBDB6044_u += BoolToInt(lv_filterunit == UnitGroupUnit(autoEBDB6044_g, autoEBDB6044_u)) ) {
            lv_filterunit = UnitGroupUnit(autoEBDB6044_g, autoEBDB6044_u);
            RegionAddCircle(lv_decisionregion, false, UnitGetPosition(lv_filterunit), 8.0);
        }
        lv_decisionpoint = RegionRandomPoint(lv_decisionregion);
        if ((lv_decisionpoint != null)) {
            UnitIssueOrder(lv_aiunit, OrderTargetingPoint(AbilityCommand("move", 0), lv_decisionpoint), c_orderQueueAddToFront);
        }

    }

    if ((UnitCheckAbilCmdState(lv_aiunit, AbilityCommand("JAG108Missile", 0), c_cmdStateHasCharges) == true)) {
        if ((UnitHasBehavior(lv_aiunit, "aidummychainjag") == true)) {
            lv_tempunit = UnitBehaviorEffectUnit(lv_aiunit, "aidummychainjag", c_effectUnitSource, 0);
        }

        if (((lv_tempunit == null) || (UnitHasBehavior(lv_tempunit, "LaserDesignator") != true))) {
            lv_tempreal = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "JAG108Missile", "Range[" + IntToString(0) + "]", lv_aiowner));
            lv_decisionregion = RegionCircle(lv_aiposition, lv_tempreal);
            RegionAddCircle(lv_decisionregion, false, lv_aiposition, 7.0);
            AISetFilterBehaviorCount(lv_filter, 1, 1, "LaserDesignator");
            lv_filterunitgroup = AIGetFilterGroup(lv_filter, UnitGroupFilterRegion(UnitGroupSearch(null, lv_aiowner, lv_aiposition, lv_tempreal, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), lv_decisionregion, 0));
            if ((UnitGroupCount(lv_filterunitgroup, c_unitCountAlive) > 0)) {
                lv_tempunit = UnitGroupRandomUnit(lv_filterunitgroup, c_unitCountAlive);
                gf_ChainJAG(lv_aiunit, lv_tempunit);
                gf_PlaySoundOnUnitForRelevant(lv_aiunit, SoundLink("Banshee_Attack", c_soundIndexAny));
            }
            else {
                if ((lv_tempunit == null)) {
                    lv_decisionregion = RegionCircle(lv_aiposition, lv_tempreal);
                    autoCED1F6CE_g = UnitGroupSearch(null, lv_aiowner, lv_aiposition, lv_tempreal, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
                    autoCED1F6CE_u = 1;
                    for ( ; autoCED1F6CE_u <= UnitGroupCount(autoCED1F6CE_g, c_unitCountAll) ; autoCED1F6CE_u += BoolToInt(lv_filterunit == UnitGroupUnit(autoCED1F6CE_g, autoCED1F6CE_u)) ) {
                        lv_filterunit = UnitGroupUnit(autoCED1F6CE_g, autoCED1F6CE_u);
                        RegionAddCircle(lv_decisionregion, false, UnitGetPosition(lv_filterunit), 7.0);
                    }
                    lv_filterunitgroup = UnitGroupEmpty();
                    UnitGroupAddUnitGroup(lv_filterunitgroup, UnitGroupSearch(null, lv_aiowner, lv_aiposition, lv_tempreal, UnitFilter((1 << c_targetFilterMassive) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    UnitGroupAddUnitGroup(lv_filterunitgroup, UnitGroupSearch(null, lv_aiowner, lv_aiposition, lv_tempreal, UnitFilter((1 << c_targetFilterMechanical) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    lv_filterunitgroup = UnitGroupFilterRegion(lv_filterunitgroup, lv_decisionregion, 0);
                    if ((UnitGroupCount(lv_filterunitgroup, c_unitCountAlive) > 0)) {
                        lv_tempunit = UnitGroupRandomUnit(lv_filterunitgroup, c_unitCountAlive);
                        gf_ChainJAG(lv_aiunit, lv_tempunit);
                        gf_PlaySoundOnUnitForRelevant(lv_aiunit, SoundLink("Banshee_Attack", c_soundIndexAny));
                    }
                    else {
                        lv_decisionpoint = AIBestTargetPoint(UnitGroupFilterRegion(UnitGroupSearch(null, lv_aiowner, lv_aiposition, lv_tempreal, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_decisionregion, 0), 16, 0, 0.0, 7.0, lv_aiposition, lv_tempreal, 0);
                        if ((lv_decisionpoint != null) && (RegionContainsPoint(lv_decisionregion, lv_decisionpoint) == true)) {
                            UnitIssueOrder(lv_aiunit, OrderTargetingPoint(AbilityCommand("JAG108Missile", 0), lv_decisionpoint), c_orderQueueAddToFront);
                            gf_PlaySoundOnUnitForRelevant(lv_aiunit, SoundLink("Banshee_Attack", c_soundIndexAny));
                        }

                    }
                }

            }
        }

    }

    UnitBehaviorAdd(lv_aiunit, "aidummyhelicopterrf", lv_aiunit, 1);
    UnitBehaviorSetDuration(lv_aiunit, "aidummyhelicopterrf", 2.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelicopterAI_Init () {
    gt_HelicopterAI = TriggerCreate("gt_HelicopterAI_Func");
    TriggerAddEventUnitBehaviorChange(gt_HelicopterAI, null, "aidummyhelicopterrf", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Army Modifier
//--------------------------------------------------------------------------------------------------
bool gt_ArmyModifier_Func (bool testConds, bool runActions) {
    string auto42CCF482_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 13))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto42CCF482_val = UnitGetType(EventUnit());
    if (auto42CCF482_val == "CombatEngineerMini") {
        UnitBehaviorAdd(EventUnit(), "ClusterRocketsAIGroupMech", EventUnit(), 1);
    }
    else if (auto42CCF482_val == "JavelinGunner") {
        UnitBehaviorAdd(EventUnit(), "MRLAIHeroMechanical", EventUnit(), 1);
    }
    else if (auto42CCF482_val == "74DFlamethrower") {
        UnitBehaviorAdd(EventUnit(), "FuelDischargeAIGroupHero", EventUnit(), 1);
    }
    else if (auto42CCF482_val == "68WCombatMedic") {
        UnitBehaviorAdd(EventUnit(), "MedicNanoAI", EventUnit(), 1);
        UnitBehaviorAdd(EventUnit(), "MedicBTAI", EventUnit(), 1);
    }
    else {
    }
    if ((gv_gamemode >= 3) && (gv_gamemode <= 5) && (gv_infestationLevel < 35)) {
        UnitBehaviorAdd(EventUnit(), "DifficultyModifierArmy", EventUnit(), (gv_gamemode - 2));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmyModifier_Init () {
    gt_ArmyModifier = TriggerCreate("gt_ArmyModifier_Func");
    TriggerAddEventUnitBehaviorChange(gt_ArmyModifier, null, "ApplyAI", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocket Warning
//--------------------------------------------------------------------------------------------------
bool gt_RocketWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_model;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TextChat(EventUnit(), StringExternal("Param/Value/C61C449C"));
    if (((EventUnitAbility() == AbilityCommand("ATRocket", 0)) || (EventUnitAbility() == AbilityCommand("ATRocketLN", 0)) || (EventUnitAbility() == AbilityCommand("HERocket", 0)) || (EventUnitAbility() == AbilityCommand("HERocketLN", 0)))) {
    }
    else {
        gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
    }
    libNtve_gf_CreateModelAtPoint("GhostNukeTarget", EventUnitTargetPoint());
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(1.5, c_timeGame);
    ActorSend(lv_model, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RocketWarning_Init () {
    gt_RocketWarning = TriggerCreate("gt_RocketWarning_Func");
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("ATRocket", 0), c_abilEffectStagePrep, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("ATRocketLN", 0), c_abilEffectStagePrep, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("HERocket", 0), c_abilEffectStagePrep, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("HERocketLN", 0), c_abilEffectStagePrep, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("MiniMRL", 0), c_abilEffectStagePrep, false);
    TriggerAddEventUnitAbility(gt_RocketWarning, null, AbilityCommand("MRL", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Charge Refund
//--------------------------------------------------------------------------------------------------
bool gt_LearnChargeRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetChargeUsed(lv_unit, "Abil/LearnAbilitiesMOS") != 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddChargeUsed(lv_unit, "Abil/LearnAbilitiesMOS", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnChargeRefund_Init () {
    gt_LearnChargeRefund = TriggerCreate("gt_LearnChargeRefund_Func");
    TriggerAddEventUnitLearnProgress(gt_LearnChargeRefund, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disarm
//--------------------------------------------------------------------------------------------------
bool gt_Disarm_Func (bool testConds, bool runActions) {
    string auto18BFE000_val;

    // Variable Declarations
    unit lv_target;
    unit lv_caster;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    auto18BFE000_val = UnitGetType(lv_target);
    if (auto18BFE000_val == "Claymore") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Claymore2", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitRemove(lv_target);
    }
    else if (auto18BFE000_val == "M1SentryGun") {
        if ((UnitGetOwner(lv_target) == UnitGetOwner(lv_caster))) {
            UnitRemove(lv_target);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_caster)), c_messageAreaError, StringExternal("Param/Value/E5AACD58"));
        }
    }
    else if (auto18BFE000_val == "ExplosiveChargeUnit") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ExplosiveCharge", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitAddChargeUsed(UnitLastCreated(), "ItemCharges", 11.0);
        UnitRemove(lv_target);
    }
    else if (auto18BFE000_val == "SatchelChargeCE") {
        if ((UnitGetCustomValue(lv_target, 0) != 1)) {
            UnitSetCustomValue(lv_target, 0, 1.0);
            ActorSend(libNtve_gf_MainActorofUnit(lv_target), "AnimBracketStart Work Work,Start Work Work,End");
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", UnitGetPosition(lv_target), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 10.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E06F2B23"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/CA103D9D"));
            SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
            SoundPlayOnUnit(SoundLink("NukePack_StandWorkStart", -1), PlayerGroupAll(), lv_target, 0.0, 100.0, 0.0);
            Wait(9.5, c_timeGame);
            ActorSend(libNtve_gf_MainActorofUnit(lv_target), "AnimBracketStop Work");
            Wait(0.5, c_timeGame);
            UnitCreateEffectPoint(lv_caster, "SatchelExplosionDamageCE", UnitGetPosition(lv_target));
            UnitKill(lv_target);
        }

    }
    else if (auto18BFE000_val == "MK44SentryGun") {
        gf_DropAllItemsImmediate(lv_target, 1.5);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK44SentryGunPacked", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitRemove(lv_target);
    }
    else if (auto18BFE000_val == "MK79SentryGun") {
        gf_DropAllItemsImmediate(lv_target, 1.5);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MK79SentryGunPacked", c_unitCreateIgnorePlacement, 0, UnitGetPosition(lv_target));
        UnitRemove(lv_target);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_caster)), c_messageAreaError, StringExternal("Param/Value/5D2204CA"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Disarm_Init () {
    gt_Disarm = TriggerCreate("gt_Disarm_Func");
    TriggerAddEventPlayerEffectUsed(gt_Disarm, c_playerAny, "Disarm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cyclone Missile Warning
//--------------------------------------------------------------------------------------------------
bool gt_CycloneMissileWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_model;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
    libNtve_gf_CreateActorAtPoint("CycloneMissilesWarning", EventUnitTargetPoint());
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(1.5, c_timeGame);
    ActorSend(lv_model, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CycloneMissileWarning_Init () {
    gt_CycloneMissileWarning = TriggerCreate("gt_CycloneMissileWarning_Func");
    TriggerAddEventUnitAbility(gt_CycloneMissileWarning, null, AbilityCommand("CycloneMissiles", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawned Unit Vision
//--------------------------------------------------------------------------------------------------
bool gt_SpawnedUnitVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pindex;

    // Variable Initialization
    lv_pindex = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, 0);
    libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, 13);
    if (((UnitGetType(EventUnitCreatedUnit()) == "FieldCamera") || (UnitGetType(EventUnitCreatedUnit()) == "MotionSensor"))) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(PlayerGroupLoopCurrent(), lv_pindex, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, PlayerGroupLoopCurrent());
            }

        }
        PlayerGroupLoopEnd();
    }
    else {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnedUnitVision_Init () {
    gt_SpawnedUnitVision = TriggerCreate("gt_SpawnedUnitVision_Func");
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunGhost", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunCS", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunItem", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FlareGunWO5", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "CyborgFlareGun", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "GroundFlareItem", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "ImprovedGroundFlare", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "GroundFlare", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "GroundFlareLN", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCameraCyborg", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCameraGhost", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCameraSDM", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCamera", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "FieldCameraLN", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "IonCannonGhost", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "IonCannon", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "MotionSensorGhost", null);
    TriggerAddEventUnitCreated(gt_SpawnedUnitVision, null, "MotionSensorCS", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critical Shot
//--------------------------------------------------------------------------------------------------
bool gt_CriticalShot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagesource;
    unit lv_damagetarget;
    int lv_level;
    int lv_chance;
    int lv_loopint;
    fixed lv_totaldamage;

    // Variable Initialization
    lv_damagesource = EventUnitDamageSourceUnit();
    lv_damagetarget = EventUnit();
    lv_level = UnitAbilityGetLevel(EventUnitDamageSourceUnit(), "Marksmanship");
    lv_chance = 8;
    lv_loopint = 1;

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() != "CriticalShotBonus"))) {
            return false;
        }

        if (!(((UnitHasBehavior(lv_damagesource, "Marksmanship1") == true) || (UnitHasBehavior(lv_damagesource, "Marksmanship2") == true) || (UnitHasBehavior(lv_damagesource, "Marksmanship3") == true) || (UnitHasBehavior(lv_damagesource, "Marksmanship4") == true) || (UnitHasBehavior(lv_damagesource, "MarksmanshipLN") == true) || (UnitHasBehavior(lv_damagesource, "MarksmanshipLNlesser") == true) || (UnitHasBehavior(lv_damagesource, "MarksmanshipMedic") == true) || (UnitHasBehavior(lv_damagesource, "Agility2") == true) || (UnitHasBehavior(lv_damagesource, "Agility3") == true)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damagetarget), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((PlayerGetAlliance(UnitGetOwner(lv_damagesource), c_allianceIdPassive, UnitGetOwner(lv_damagetarget)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior(EventUnitDamageSourceUnit(), "MarksmanshipLN") == true) || (UnitHasBehavior(EventUnitDamageSourceUnit(), "Agility3") == true))) {
        lv_level = 1;
    }

    if (((UnitHasBehavior(EventUnitDamageSourceUnit(), "Agility2") == true) || (UnitHasBehavior(EventUnitDamageSourceUnit(), "Agility3") == true))) {
        lv_chance = (lv_chance - 4);
    }

    if ((UnitHasBehavior(EventUnitDamageSourceUnit(), "SOFAR") == true)) {
        lv_chance = (lv_chance - 3);
    }

    if ((UnitHasBehavior(EventUnitDamageSourceUnit(), "FocusFire") == true)) {
        lv_chance = (lv_chance - 3);
        lv_level = (lv_level + 2);
    }

    lv_chance = RandomInt(1, lv_chance);
    if ((lv_chance != 1)) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayOnUnit(SoundLink("CriticalShot", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    lv_totaldamage = (EventUnitDamageAmount() * (lv_level + 2.0));
    UnitDamage(EventUnitDamageSourceUnit(), "CriticalShotBonus", EventUnit(), (EventUnitDamageAmount() * (lv_level + 1.0)));
    TextTagCreate((StringExternal("Param/Value/576A9F80") + TextWithColor(FixedToText(lv_totaldamage, 0), gv_cOLOURCOMBATEFFECT)), 24, UnitGetPosition(EventUnitDamageSourceUnit()), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), EventUnitDamageSourceUnit(), 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.25);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.5);
    TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CriticalShot_Init () {
    gt_CriticalShot = TriggerCreate("gt_CriticalShot_Func");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "DMRDamage");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "CavAssaultRifle");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "SteelSaberDamage");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "ShotgunCEDamage");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "ShotgunSFAATDamage");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "AssaultRiflePL");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "MachineGunDamage");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "Machinegun");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "RiflemanAssaultRifle");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "JavGunnerAssaultRifle");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "AssaultRifle");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "PlasmaRifleDamage");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "PlasmaRifleDamageDis");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "PlasmaRifleDamageIncendiary");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "PlasmaRifleDamageCryo");
    TriggerAddEventUnitDamaged(gt_CriticalShot, null, c_unitDamageTypeRanged, c_unitDamageEither, "AssaultRifleFSS");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Out Warning
//--------------------------------------------------------------------------------------------------
bool gt_FragOutWarning_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventUnitTargetPoint(), 4.0);
    if ((RandomFixed(0.0, 1.0) == 1)) {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/627C94FD")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    else {
        TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/ED4F0984")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    }
    TextTagAttachToUnit(TextTagLastCreated(), EventUnit(), 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragOutWarning_Init () {
    gt_FragOutWarning = TriggerCreate("gt_FragOutWarning_Func");
    TriggerAddEventUnitAbility(gt_FragOutWarning, null, AbilityCommand("FragGrenade", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_FragOutWarning, null, AbilityCommand("FragGrenadeLN", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Out Warning Item
//--------------------------------------------------------------------------------------------------
bool gt_FragOutWarningItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_player;

    // Variable Initialization
    lv_caster = UnitInventoryUnit(EventUnitInventoryItem());
    lv_player = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "FragGrenade"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate((StringExternal("Param/Value/ABC91ED0")), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), lv_caster, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragOutWarningItem_Init () {
    gt_FragOutWarningItem = TriggerCreate("gt_FragOutWarningItem_Func");
    TriggerAddEventUnitInventoryChange(gt_FragOutWarningItem, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake Small
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeSmall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 8.0) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            lv_magnitude = (2.2 - (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) / 4.0));
            lv_dist = DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionXY, lv_magnitude, 11.0, 5.0, 1.5);
            SoundPlay(SoundLink("EarRinging", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), (80.0 - (lv_dist * 10.0)), 0.0);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeSmall_Init () {
    gt_CameraShakeSmall = TriggerCreate("gt_CameraShakeSmall_Func");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage2");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage3");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "FragGrenadeDamage4");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "ClusterRocketsDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "MGLDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "VesaniaGLDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "BradleyHEDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "M1AbramsFireSet");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "OrbitalStrikeDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeSmall, c_playerAny, "CycloneMissileDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Camera Shake Large
//--------------------------------------------------------------------------------------------------
bool gt_CameraShakeLarge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magnitude;
    fixed lv_dist;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_heroesGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 10.0) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            lv_magnitude = (2.9 - (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) / 5.0));
            lv_dist = DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionXY, lv_magnitude, 11.0, 2.0, 1.5);
            SoundPlay(SoundLink("EarRinging", -1), PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), (100.0 - (lv_dist * 10.0)), 0.0);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CameraShakeLarge_Init () {
    gt_CameraShakeLarge = TriggerCreate("gt_CameraShakeLarge_Func");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "MRLDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ExplosiveChargeDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "CallforFirePLDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "HEDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "HEDamage2");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "HEDamage3");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "HEDamage4");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ATDamage1");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ATDamage2");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ATDamage3");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "ATDamage4");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "M1AbramsDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "TOWDamage");
    TriggerAddEventPlayerEffectUsed(gt_CameraShakeLarge, c_playerAny, "SatchelExplosionDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jump Injury
//--------------------------------------------------------------------------------------------------
bool gt_JumpInjury_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((WorldHeight(c_heightMapGround, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource))) - WorldHeight(c_heightMapGround, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint))) >= 3.0)) {
        Wait(0.35, c_timeGame);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitSource), "JumpInjury", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
    }

    if ((gf_CyborgMode(EventPlayerEffectUsedUnit(c_effectUnitSource)) == 1)) {
        Wait(0.35, c_timeGame);
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "RifleButtSearchAreaCSlam", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        libNtve_gf_CreateActorAtPoint("LargeBurrowDownEffects", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
        SoundPlayAtPoint(SoundLink("Zerg_UnburrowMedium", -1), PlayerGroupAll(), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0, 100.0, 0.0);
        SoundPlayAtPoint(SoundLink("Shockwave", -1), PlayerGroupAll(), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0, 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JumpInjury_Init () {
    gt_JumpInjury = TriggerCreate("gt_JumpInjury_Func");
    TriggerAddEventPlayerEffectUsed(gt_JumpInjury, c_playerAny, "JumpLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Marksman Skills
//--------------------------------------------------------------------------------------------------
bool gt_LearnMarksmanSkills_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityChangeLevel(EventUnit(), "BinocularsSDM", (UnitAbilityGetLevel(EventUnit(), "MarksmanSkills") - 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnMarksmanSkills_Init () {
    gt_LearnMarksmanSkills = TriggerCreate("gt_LearnMarksmanSkills_Func");
    TriggerAddEventUnitAbility(gt_LearnMarksmanSkills, null, AbilityCommand("LearnAbilitiesSDM", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prone
//--------------------------------------------------------------------------------------------------
bool gt_Prone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior(EventUnit(), "Prone") == true) || (UnitHasBehavior(EventUnit(), "Prone2") == true))) {
        UnitBehaviorRemove(EventUnit(), "Prone", 1);
        UnitBehaviorRemove(EventUnit(), "Prone2", 1);
        UnitBehaviorRemove(EventUnit(), "Evasion15", 1);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimGroupRemove Burrow");
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/18C7A3CA"));
    }
    else {
        if ((gv_gamemode == 8)) {
            UnitBehaviorAdd(EventUnit(), "Evasion15", EventUnit(), 1);
        }

        UnitBehaviorAdd(EventUnit(), "Prone", EventUnit(), 1);
        UnitBehaviorAdd(EventUnit(), "Prone2", EventUnit(), 1);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimGroupApply Burrow Burrow Unburrow");
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/5958D249"));
        UnitBehaviorRemove(EventUnit(), "Sprint", -1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Prone_Init () {
    gt_Prone = TriggerCreate("gt_Prone_Func");
    TriggerAddEventUnitAbility(gt_Prone, null, AbilityCommand("Prone", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Designator Reveal
//--------------------------------------------------------------------------------------------------
bool gt_LaserDesignatorReveal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetunit;

    // Variable Initialization
    lv_targetunit = EventUnitTargetUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_laserDesignatorDesignated, lv_targetunit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_laserDesignatorDesignated, lv_targetunit);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(lv_targetunit, true, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(UnitTypeGetName(UnitGetType(lv_targetunit)), Color(50.20, 0.00, 50.20)) + StringExternal("Param/Value/E18464F2")));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(lv_targetunit), ColorWithAlpha(50.20, 0.00, 50.20, 0.00), 4.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_targetunit);
    while (!((UnitHasBehavior(lv_targetunit, "LaserDesignator") == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitGroupRemove(gv_laserDesignatorDesignated, lv_targetunit);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(lv_targetunit, false, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserDesignatorReveal_Init () {
    gt_LaserDesignatorReveal = TriggerCreate("gt_LaserDesignatorReveal_Func");
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorCAV", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorPL", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorGhost", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_LaserDesignatorReveal, null, AbilityCommand("LaserDesignatorFSS", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Magazine
//--------------------------------------------------------------------------------------------------
bool gt_DropMagazine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((PlayerGetPropertyInt(lv_owner, c_playerPropVespene) >= 3) && (UnitGetType(gv_playerHeroes[lv_owner]) != "Flamethrower")) || ((PlayerGetPropertyInt(lv_owner, c_playerPropVespene) >= 200) && (UnitGetType(gv_playerHeroes[lv_owner]) == "Flamethrower")))) {
        if ((UnitGetType(gv_playerHeroes[lv_owner]) == "Flamethrower")) {
            PlayerModifyPropertyInt(lv_owner, c_playerPropVespene, c_playerPropOperSubtract, 200);
        }
        else {
            PlayerModifyPropertyInt(lv_owner, c_playerPropVespene, c_playerPropOperSubtract, 3);
        }
        if (((gf_CountItemTypeUsed("Magazines", EventUnit(), "AmmoCharges") >= 1))) {
            UnitAddChargeUsed(gf_FirstAmmoUsed(EventUnit()), "AmmoCharges", -1.0);
        }
        else {
            if ((UnitInventoryCount(EventUnit(), c_unitInventoryCountCarried) == 6)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazines", 0, 0, UnitGetPosition(EventUnit()));
            }
            else {
                UnitInventoryCreate(EventUnit(), "Magazines");
                UnitSetOwner(UnitInventoryLastCreated(), 0, true);
            }
        }
        SoundPlayOnUnit(SoundLink("AmmoUse", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/938E5D20"), SoundLink("UI_GenericError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropMagazine_Init () {
    gt_DropMagazine = TriggerCreate("gt_DropMagazine_Func");
    TriggerAddEventUnitAbility(gt_DropMagazine, null, AbilityCommand("DropMagazine", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flamethrower Magazines
//--------------------------------------------------------------------------------------------------
bool gt_FlamethrowerMagazines_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(gv_playerHeroes[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)]) == "Flamethrower"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), c_playerPropVespene, c_playerPropOperAdd, 197);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlamethrowerMagazines_Init () {
    gt_FlamethrowerMagazines = TriggerCreate("gt_FlamethrowerMagazines_Func");
    TriggerAddEventPlayerEffectUsed(gt_FlamethrowerMagazines, c_playerAny, "Magazines");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broken
//--------------------------------------------------------------------------------------------------
bool gt_Broken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_broken;

    // Variable Initialization
    lv_broken = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DropAllItemsImmediate(lv_broken, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Broken_Init () {
    gt_Broken = TriggerCreate("gt_Broken_Func");
    TriggerAddEventUnitBehaviorChange(gt_Broken, null, "Broken", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: JAG 108 LD
//--------------------------------------------------------------------------------------------------
bool gt_JAG108LD_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_target, "LaserDesignator") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(UnitBehaviorEffectUnit(lv_target, "LaserDesignator", c_effectUnitCaster, 0), "JAG108Damage3", lv_target);
    TextTagCreate(TextWithColor(StringExternal("Param/Value/31E502A9"), gv_cOLOURCOMBATEFFECT), 24, UnitGetPosition(lv_target), 1.0, true, true, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), lv_target, 1.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.25);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 0.5);
    TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JAG108LD_Init () {
    gt_JAG108LD = TriggerCreate("gt_JAG108LD_Func");
    TriggerAddEventPlayerEffectUsed(gt_JAG108LD, c_playerAny, "JAG108Damage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: 30 mm Chain Gun
//--------------------------------------------------------------------------------------------------
bool gt__30mmChainGun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attacker;

    // Variable Initialization
    lv_attacker = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_attacker, "BurstFireFullyAutomatic") != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_attacker, "BurstFireStacks", lv_attacker, 1);
    UnitBehaviorSetDuration(lv_attacker, "BurstFireStacks", 0.75);
    if ((UnitBehaviorCount(lv_attacker, "BurstFireStacks") >= 6)) {
        UnitBehaviorAdd(lv_attacker, "BurstFire2", lv_attacker, 1);
        UnitBehaviorSetDuration(lv_attacker, "BurstFire2", 1.25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt__30mmChainGun_Init () {
    gt__30mmChainGun = TriggerCreate("gt__30mmChainGun_Func");
    TriggerAddEventUnitStartedAttack2(gt__30mmChainGun, null, "30mmChainGun");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Overhaul Result
//--------------------------------------------------------------------------------------------------
bool gt_OverhaulResult_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    unit lv_target;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_owner = UnitGetOwner(lv_caster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(lv_owner, UnitGetOwner(lv_target), libNtve_ge_PlayerRelation_Enemy) == true)) {
        UnitSetOwner(lv_target, lv_owner, true);
    }

    UnitSetPropertyFixed(lv_target, c_unitPropLifePercent, 10.0);
    UnitSetPropertyFixed(lv_target, c_unitPropEnergy, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OverhaulResult_Init () {
    gt_OverhaulResult = TriggerCreate("gt_OverhaulResult_Func");
    TriggerAddEventPlayerEffectUsed(gt_OverhaulResult, c_playerAny, "OverhaulBrokenRemove");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Level Up
//--------------------------------------------------------------------------------------------------
bool gt_FragLevelUp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetLevel(EventUnit(), "FragGrenade") > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityChangeLevel(EventUnit(), "MGL", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragLevelUp_Init () {
    gt_FragLevelUp = TriggerCreate("gt_FragLevelUp_Func");
    TriggerAddEventUnitAbility(gt_FragLevelUp, null, AbilityCommand("LearnAbilitiesRifleman", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AR Skills
//--------------------------------------------------------------------------------------------------
bool gt_ARSkills_Func (bool testConds, bool runActions) {
    int autoCC8FF5B9_val;

    // Variable Declarations
    unit lv_user;
    int lv_owner;

    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);

    // Actions
    if (!runActions) {
        return true;
    }

    autoCC8FF5B9_val = UnitAbilityGetLevel(lv_user, "IncendiaryRounds");
    if (autoCC8FF5B9_val == 0) {
    }
    else if (autoCC8FF5B9_val == 1) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "IncendiaryRounds1", 1);
    }
    else if (autoCC8FF5B9_val == 2) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "IncendiaryRounds12", 1);
    }
    else if (autoCC8FF5B9_val == 3) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "IncendiaryRounds13", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/7C82607F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ARSkills_Init () {
    gt_ARSkills = TriggerCreate("gt_ARSkills_Func");
    TriggerAddEventUnitAbility(gt_ARSkills, null, AbilityCommand("LearnAbilitiesAutomaticRifleman", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Belt Linking Reload
//--------------------------------------------------------------------------------------------------
bool gt_BeltLinkingReload_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_reloading, EventUnit()) == true) || (EventPlayer() != UnitGetOwner(EventUnit()))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeltLinkingReload_Init () {
    gt_BeltLinkingReload = TriggerCreate("gt_BeltLinkingReload_Func");
    TriggerAddEventUnitAbility(gt_BeltLinkingReload, null, AbilityCommand("BeltLinking", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Belt Linking
//--------------------------------------------------------------------------------------------------
bool gt_BeltLinking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_magsize[lv_owner] += 100;
    gv_magsused[lv_owner] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeltLinking_Init () {
    gt_BeltLinking = TriggerCreate("gt_BeltLinking_Func");
    TriggerAddEventUnitAbility(gt_BeltLinking, null, AbilityCommand("LearnAbilitiesAutomaticRifleman", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: First Aid Kit Medic
//--------------------------------------------------------------------------------------------------
bool gt_FirstAidKitMedic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitInventoryUnit(EventUnitInventoryItem())) == "CombatMedic"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItem()) == "FirstAidKit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(UnitInventoryUnit(EventUnitInventoryItem()), "FirstAidKitBehaviorMedic", EventUnitInventoryItemTargetUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FirstAidKitMedic_Init () {
    gt_FirstAidKitMedic = TriggerCreate("gt_FirstAidKitMedic_Func");
    TriggerAddEventUnitInventoryChange(gt_FirstAidKitMedic, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battle Focus
//--------------------------------------------------------------------------------------------------
bool gt_BattleFocus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_battleFocusCasts += 1;
    if ((gv_battleFocusCasts != 1)) {
        return true;
    }

    GameSetGlobalTimeScale(0.5);
    SoundPlay(SoundLink("Shuttle_Unload", -1), PlayerGroupAll(), 100.0, 0.0);
    while ((gv_battleFocusCasts > 0)) {
        Wait(8.0, c_timeGame);
        gv_battleFocusCasts -= 1;
    }
    GameSetGlobalTimeScale(1.0);
    SoundPlay(SoundLink("Shuttle_Load", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattleFocus_Init () {
    gt_BattleFocus = TriggerCreate("gt_BattleFocus_Func");
    TriggerAddEventUnitAbility(gt_BattleFocus, null, AbilityCommand("BattleFocus", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Recon Skills
//--------------------------------------------------------------------------------------------------
bool gt_LearnReconSkills_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityChangeLevel(EventUnit(), "Camouflage", (UnitAbilityGetLevel(EventUnit(), "ReconnaissanceSkills") - 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnReconSkills_Init () {
    gt_LearnReconSkills = TriggerCreate("gt_LearnReconSkills_Func");
    TriggerAddEventUnitAbility(gt_LearnReconSkills, null, AbilityCommand("LearnAbilitiesCavalryScout", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heartbeat
//--------------------------------------------------------------------------------------------------
bool gt_Heartbeat_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Heartbeat_Init () {
    gt_Heartbeat = TriggerCreate("gt_Heartbeat_Func");
    TriggerAddEventPlayerEffectUsed(gt_Heartbeat, c_playerAny, "HeartbeatTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mono Wire
//--------------------------------------------------------------------------------------------------
bool gt_MonoWire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "MonoWire", (TechTreeUpgradeCount(lv_owner, "MonoWire", c_techCountCompleteOnly) + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MonoWire_Init () {
    gt_MonoWire = TriggerCreate("gt_MonoWire_Func");
    TriggerAddEventUnitAbility(gt_MonoWire, null, AbilityCommand("LearnAbilitiesSDM", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HE/AT Rocket Scatter
//--------------------------------------------------------------------------------------------------
bool gt_HEATRocketScatter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
    Wait(0.5, c_timeGame);
    VisRevealArea(EventPlayer(), RegionCircle(EventUnitTargetPoint(), 4.0), 8.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HEATRocketScatter_Init () {
    gt_HEATRocketScatter = TriggerCreate("gt_HEATRocketScatter_Func");
    TriggerAddEventUnitAbility(gt_HEATRocketScatter, null, AbilityCommand("ATRocket", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_HEATRocketScatter, null, AbilityCommand("HERocket", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_HEATRocketScatter, null, AbilityCommand("HERocketLN", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(gt_HEATRocketScatter, null, AbilityCommand("ATRocketLN", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Javelin Skills
//--------------------------------------------------------------------------------------------------
bool gt_JavelinSkills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_user;
    int lv_owner;

    // Variable Initialization
    lv_user = EventUnit();
    lv_owner = UnitGetOwner(lv_user);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetLevel(lv_user, "JavelinSkills") == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "JavSkills1", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "JavHEATup", 1);
    }
    else if ((UnitAbilityGetLevel(lv_user, "JavelinSkills") == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "JavSkills2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "JavHEATup", 2);
    }
    else if ((UnitAbilityGetLevel(lv_user, "JavelinSkills") == 2)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "JavSkills3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "JavHEATup", 3);
    }
    else if ((UnitAbilityGetLevel(lv_user, "JavelinSkills") == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "JavSkills4", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "JavHEATup", 4);
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/C46229D4"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JavelinSkills_Init () {
    gt_JavelinSkills = TriggerCreate("gt_JavelinSkills_Func");
    TriggerAddEventUnitAbility(gt_JavelinSkills, null, AbilityCommand("LearnAbilitiesJavelinGunner", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engineer Skills
//--------------------------------------------------------------------------------------------------
bool gt_EngineerSkills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesCombatEngineer", 2))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "Security", (TechTreeUpgradeCount(lv_owner, "Security", c_techCountCompleteOnly) + 1));
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesCombatEngineer", 3))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "EngineeringSkills", (TechTreeUpgradeCount(lv_owner, "EngineeringSkills", c_techCountCompleteOnly) + 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngineerSkills_Init () {
    gt_EngineerSkills = TriggerCreate("gt_EngineerSkills_Func");
    TriggerAddEventUnitAbility(gt_EngineerSkills, null, AbilityCommand("LearnAbilitiesCombatEngineer", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_EngineerSkills, null, AbilityCommand("LearnAbilitiesCombatEngineer", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stonewall Texture
//--------------------------------------------------------------------------------------------------
bool gt_StonewallTexture_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "TextureSelectById CyborgStonewall");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetTintColor 128,0,0 1.000000 OneShot t");
    SoundPlayOnUnit(SoundLink("Immortal_HardenedShieldImpact", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    while (!((UnitHasBehavior(EventUnit(), "StonewallProtocol") == false))) {
        Wait(0.5, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(EventUnit(), gv_playercamoactormsg[gv_playerCurrentCamo[EventPlayer()]]);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetTintColor 255,255,255 1.000000 OneShot t");
    SoundPlayOnUnit(SoundLink("Sentry_GuardianShieldDeath", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StonewallTexture_Init () {
    gt_StonewallTexture = TriggerCreate("gt_StonewallTexture_Func");
    TriggerAddEventUnitAbility(gt_StonewallTexture, null, AbilityCommand("StonewallProtocol", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Learn Ghost Skills and ISR
//--------------------------------------------------------------------------------------------------
bool gt_LearnGhostSkillsandISR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetLevel(EventUnit(), "GhostSkills") == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/63783692"));
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), true, false);
    }
    PlayerGroupLoopEnd();
    while (true) {
        if ((libNtve_gf_PlayerIsEnemy(lv_owner, 15, libNtve_ge_PlayerRelation_EnemyMutual) == true)) {
            UnitGroupLoopBegin(UnitGroup(null, 15, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((RandomInt(0, 1) == 1)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimpleSmall", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E57EFA54"));
                }

            }
            UnitGroupLoopEnd();
        }

        Wait(25.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LearnGhostSkillsandISR_Init () {
    gt_LearnGhostSkillsandISR = TriggerCreate("gt_LearnGhostSkillsandISR_Func");
    TriggerAddEventUnitAbility(gt_LearnGhostSkillsandISR, null, AbilityCommand("LearnAbilitiesGhost", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost Attack
//--------------------------------------------------------------------------------------------------
bool gt_GhostAttack_Func (bool testConds, bool runActions) {
    int auto397B735F_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto397B735F_val = UnitAbilityGetLevel(EventUnit(), "GhostSkills");
    if (auto397B735F_val == 0) {
        UnitBehaviorAdd(EventUnit(), "Decloaking1", EventUnit(), 1);
    }
    else if (auto397B735F_val == 1) {
        UnitBehaviorAdd(EventUnit(), "Decloaking2", EventUnit(), 1);
    }
    else if (auto397B735F_val == 2) {
        UnitBehaviorAdd(EventUnit(), "Decloaking3", EventUnit(), 1);
    }
    else if (auto397B735F_val == 3) {
        UnitBehaviorAdd(EventUnit(), "Decloaking4", EventUnit(), 1);
    }
    else if (auto397B735F_val == 4) {
        UnitBehaviorAdd(EventUnit(), "Decloaking5", EventUnit(), 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GhostAttack_Init () {
    gt_GhostAttack = TriggerCreate("gt_GhostAttack_Func");
    TriggerAddEventUnitStartedAttack2(gt_GhostAttack, null, "PlasmaRifle");
    TriggerAddEventUnitStartedAttack2(gt_GhostAttack, null, "PlasmaRifleDisruptor");
    TriggerAddEventUnitStartedAttack2(gt_GhostAttack, null, "PlasmaRifleIncendiary");
    TriggerAddEventUnitStartedAttack2(gt_GhostAttack, null, "PlasmaRifleCryo");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ion Cannon Selection
//--------------------------------------------------------------------------------------------------
bool gt_IonCannonSelection_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(UnitGetOwner(EventUnitCreatedUnit()));
    UnitSelect(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IonCannonSelection_Init () {
    gt_IonCannonSelection = TriggerCreate("gt_IonCannonSelection_Func");
    TriggerAddEventUnitCreated(gt_IonCannonSelection, null, "IonCannon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ion Cannon Warning
//--------------------------------------------------------------------------------------------------
bool gt_IonCannonWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_model;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AIScatterFromPoint(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 5.0);
    libNtve_gf_CreateModelAtPoint("GhostNukeTarget", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_model = libNtve_gf_ActorLastCreated();
    SoundPlay(SoundLink("NetScan", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8F803558"));
    Wait(2.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("IonCannonStart", -1), PlayerGroupAll(), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ActorSend(lv_model, "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IonCannonWarning_Init () {
    gt_IonCannonWarning = TriggerCreate("gt_IonCannonWarning_Func");
    TriggerAddEventPlayerEffectUsed(gt_IonCannonWarning, c_playerAny, "IonCannonDelay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LLDR CAS
//--------------------------------------------------------------------------------------------------
bool gt_LLDRCAS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_shocker;
    actor lv_warning;
    point lv_spawnpoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_warning = libNtve_gf_ActorLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/CC528258"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FE202D1E"));
    SoundPlay(SoundLink("UI_TerranHint", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_spawnpoint = PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 35.0, (AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) - 90.0));
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    libNtve_gf_UnitCreateFacingPoint(1, "Shocker", c_unitCreateIgnorePlacement, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), lv_spawnpoint, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_shocker = UnitLastCreated();
    UnitBehaviorAdd(lv_shocker, "KillsToCaster", EventUnit(), 1);
    UnitSetTeamColorIndex(UnitLastCreated(), 13);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("ClusterRocketsShocker", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    lv_spawnpoint = PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 30.0, UnitGetFacing(UnitLastCreated()));
    lv_spawnpoint = Point(libNtve_gf_ArithmeticRealClamp(PointGetX(lv_spawnpoint), PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetX(RegionGetBoundsMax(RegionPlayableMap()))), libNtve_gf_ArithmeticRealClamp(PointGetY(lv_spawnpoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(RegionGetBoundsMax(RegionPlayableMap()))));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_spawnpoint), c_orderQueueAddToEnd);
    Wait(1.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("CASImpact", -1), PlayerGroupAll(), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.0, 100.0, 0.0);
    Wait(13.5, c_timeGame);
    ActorSend(lv_warning, "Destroy");
    ActorSend(libNtve_gf_MainActorofUnit(lv_shocker), "SetOpacity 0.000000 2.000000 op");
    Wait(2.1, c_timeGame);
    UnitRemove(lv_shocker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LLDRCAS_Init () {
    gt_LLDRCAS = TriggerCreate("gt_LLDRCAS_Func");
    TriggerAddEventPlayerEffectUsed(gt_LLDRCAS, c_playerAny, "LLDR");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call For Fire
//--------------------------------------------------------------------------------------------------
bool gt_CallForFire_Func (bool testConds, bool runActions) {
    int auto53E72199_ae;
    int auto53E72199_ai;

    // Variable Declarations
    int lv_shells;
    fixed lv_radius;
    actor lv_warning;
    fixed lv_delaybasetime;
    fixed lv_distribution;
    fixed lv_interval;
    int lv_int;
    int lv_owner;
    point lv_dummypoint;
    int lv_failedshells;
    text lv_pluraltemp;

    // Variable Initialization
    lv_radius = gv_iDFRadius[EventPlayer()];
    lv_delaybasetime = 9.0;
    lv_distribution = gv_iDFDistro[EventPlayer()];
    lv_interval = gv_iDFInterval[EventPlayer()];
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_iDFAvailable == false)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/8C6F77BB"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return true;
    }

    if ((gv_iDFShellsGlobal == 0)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/01EE824E"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
        if ((gv_iDFShells[EventPlayer()] > gv_iDFShellsGlobal)) {
            lv_shells = gv_iDFShellsGlobal;
        }
        else {
            lv_shells = gv_iDFShells[EventPlayer()];
        }
        gv_iDFShellsGlobal -= lv_shells;
        lv_delaybasetime = (lv_delaybasetime - (IntToFixed(TechTreeUpgradeCount(lv_owner, "IDFSupport", c_techCountCompleteOnly)) * 1.5));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/7CB5A309") + IntToText(lv_shells)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/97F91BEB") + IntToText(gv_iDFShellsGlobal)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/E82FBB8C") + FixedToText(lv_radius, c_fixedPrecisionAny)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/7BE76364") + FixedToText(lv_interval, c_fixedPrecisionAny)));
        if ((lv_distribution == -1.0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/ECBACDC6"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/F0D11F3E") + FixedToText(lv_distribution, c_fixedPrecisionAny)));
        }
        libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitTargetPoint());
        lv_warning = libNtve_gf_ActorLastCreated();
        while (!((gv_fireMission == false))) {
            Wait(0.2, c_timeGame);
        }
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), PlayerGroupLoopCurrent(), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
                PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/955B9CAB"));
            }

        }
        PlayerGroupLoopEnd();
        gv_fireMission = true;
        Wait(lv_delaybasetime, c_timeGame);
        while (!((libNtve_gf_UnitIsPaused(EventUnit()) == false))) {
            Wait(1.0, c_timeGame);
        }
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(EventUnitTargetPoint(), 5.0), 8.0, false);
        }
        PlayerGroupLoopEnd();
        SoundPlayAtPoint(SoundLink("IDFIncoming", -1), PlayerGroupAll(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
        Wait(1.0, c_timeGame);
        gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
        ActorSend(lv_warning, "Destroy");
        auto53E72199_ae = lv_shells;
        auto53E72199_ai = 1;
        lv_int = 1;
        for ( ; ( (auto53E72199_ai >= 0 && lv_int <= auto53E72199_ae) || (auto53E72199_ai <= 0 && lv_int >= auto53E72199_ae) ) ; lv_int += auto53E72199_ai ) {
            if ((lv_distribution == -1.0)) {
                lv_dummypoint = PointWithOffsetPolar(EventUnitTargetPoint(), RandomFixed(0.0, lv_radius), libNtve_gf_RandomAngle());
            }
            else {
                lv_dummypoint = PointWithOffsetPolar(EventUnitTargetPoint(), ((lv_int - 1) * lv_radius), lv_distribution);
            }
            if ((RegionContainsPoint(RegionEntireMap(), lv_dummypoint) == true)) {
                gf_DropShellatTarget(lv_dummypoint, "CallForFirePLLaunch", lv_owner);
                if ((lv_int < lv_shells)) {
                    Wait((lv_interval + RandomFixed(-0.1, 0.1)), c_timeGame);
                }

            }
            else {
                lv_failedshells += 1;
            }
        }
        if ((lv_failedshells > 0)) {
            gv_iDFShellsGlobal += lv_failedshells;
            if ((lv_failedshells == 1)) {
                lv_pluraltemp = StringExternal("Param/Value/F68D9145");
            }
            else {
                lv_pluraltemp = StringExternal("Param/Value/987E4393");
            }
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaWarning, libSwaC_gf_FormatTextWithReplacement(StringExternal("Param/Value/0668AC65"), FormatNumber(lv_failedshells), lv_pluraltemp, null, null));
        }

        gv_fireMission = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallForFire_Init () {
    gt_CallForFire = TriggerCreate("gt_CallForFire_Func");
    TriggerAddEventUnitAbility(gt_CallForFire, null, AbilityCommand("CallForFirePL", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_CallForFire, null, AbilityCommand("CallForFireCS", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_CallForFire, null, AbilityCommand("CallForFireFSS", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Immediate Effects
//--------------------------------------------------------------------------------------------------
bool gt_ImmediateEffects_Func (bool testConds, bool runActions) {
    abilcmd autoA176F1B9_val;
    abilcmd auto5249B79E_val;
    abilcmd autoC397C08B_val;
    int auto34AC1D5A_n;
    int auto34AC1D5A_i;

    // Variable Declarations
    int lv_shells;
    actor lv_warning;
    fixed lv_delaybasetime;
    int lv_owner;

    // Variable Initialization
    lv_shells = 3;
    lv_delaybasetime = 9.0;
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_iDFAvailable == false)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/32E0B108"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        return true;
    }

    autoA176F1B9_val = EventUnitAbility();
    if (autoA176F1B9_val == AbilityCommand("WhitePhosphorous", 0)) {
        lv_shells = 7;
    }
    else if (autoA176F1B9_val == AbilityCommand("RailGun", 0)) {
        lv_shells = 6;
    }
    else {
    }
    if ((gv_iDFShellsGlobal < lv_shells)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/0F1836E4"), SoundLink("UI_GenericError", -1));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    else {
        gv_iDFShellsGlobal = (gv_iDFShellsGlobal - lv_shells);
        lv_delaybasetime = (lv_delaybasetime - (IntToFixed(TechTreeUpgradeCount(EventPlayer(), "IDFSupport", c_techCountCompleteOnly)) * 1.5));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/43EFD4D5") + IntToText(lv_shells)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/ED5C3CEC") + IntToText(gv_iDFShellsGlobal)));
        libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitTargetPoint());
        lv_warning = libNtve_gf_ActorLastCreated();
        while (!((gv_fireMission == false))) {
            Wait(0.2, c_timeGame);
        }
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), PlayerGroupLoopCurrent(), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                auto5249B79E_val = EventUnitAbility();
                if (auto5249B79E_val == AbilityCommand("WhitePhosphorous", 0)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(92.94, 32.16, 2.75, 0.00), 8.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/1695AF65"));
                }
                else if (auto5249B79E_val == AbilityCommand("ImmediateFlare", 0)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 8.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/BDB439AD"));
                }
                else if (auto5249B79E_val == AbilityCommand("immediateSmoke", 0)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(67.45, 67.45, 67.45, 0.00), 8.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/44490C2A"));
                }
                else if (auto5249B79E_val == AbilityCommand("RailGun", 0)) {
                    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(50.20, 50.20, 0.00, 0.00), 8.0, 270.0);
                    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B11CFB1B"));
                }
                else {
                }
            }

        }
        PlayerGroupLoopEnd();
        gv_fireMission = true;
        Wait(lv_delaybasetime, c_timeGame);
        while (!((libNtve_gf_UnitIsPaused(EventUnit()) == false))) {
            Wait(1.0, c_timeGame);
        }
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(EventUnitTargetPoint(), 5.0), 8.0, false);
        }
        PlayerGroupLoopEnd();
        SoundPlayAtPoint(SoundLink("IDFIncoming", -1), PlayerGroupAll(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
        Wait(1.0, c_timeGame);
        gf_AIScatterFromPoint(EventUnitTargetPoint(), 5.0);
        ActorSend(lv_warning, "Destroy");
        gv_fireMission = false;
        autoC397C08B_val = EventUnitAbility();
        if (autoC397C08B_val == AbilityCommand("WhitePhosphorous", 0)) {
            gf_DropShellatTarget(EventUnitTargetPoint(), "WhitePhosphorousLaunch", lv_owner);
        }
        else if (autoC397C08B_val == AbilityCommand("ImmediateFlare", 0)) {
            auto34AC1D5A_n = 3;
            for (auto34AC1D5A_i = 1; auto34AC1D5A_i <= auto34AC1D5A_n; auto34AC1D5A_i += 1) {
                gf_DropShellatTarget(EventUnitTargetPoint(), "FlareGunLaunchMissile", lv_owner);
                Wait(45.0, c_timeGame);
            }
        }
        else if (autoC397C08B_val == AbilityCommand("immediateSmoke", 0)) {
            gf_DropShellatTarget(EventUnitTargetPoint(), "ImmediateSmokeLaunch", lv_owner);
        }
        else if (autoC397C08B_val == AbilityCommand("RailGun", 0)) {
            gf_DropShellatTarget(EventUnitTargetPoint(), "RailGunLaunch", lv_owner);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImmediateEffects_Init () {
    gt_ImmediateEffects = TriggerCreate("gt_ImmediateEffects_Func");
    TriggerAddEventUnitAbility(gt_ImmediateEffects, null, AbilityCommand("ImmediateFlare", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_ImmediateEffects, null, AbilityCommand("immediateSmoke", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_ImmediateEffects, null, AbilityCommand("WhitePhosphorous", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_ImmediateEffects, null, AbilityCommand("RailGun", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Call For Fire Aspectus
//--------------------------------------------------------------------------------------------------
bool gt_CallForFireAspectus_Func (bool testConds, bool runActions) {
    int auto0CF33FF5_ae;
    int auto0CF33FF5_ai;
    int auto55E4B2CF_n;
    int auto55E4B2CF_i;

    // Variable Declarations
    int lv_shells;
    fixed lv_radius;
    actor lv_warning;
    fixed lv_distribution;
    fixed lv_interval;
    int lv_int;

    // Variable Initialization
    lv_shells = 5;
    lv_radius = 6.0;
    lv_distribution = -1.0;
    lv_interval = RandomFixed(0.1, 1.0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 1) == 1)) {
        lv_distribution = libNtve_gf_RandomAngle();
        lv_radius = RandomFixed(2.0, 5.0);
    }

    libNtve_gf_CreateActorAtPoint("CallForFireWarning", EventUnitTargetPoint());
    lv_warning = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingSimple", EventUnitTargetPoint(), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 8.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/EBD02DAA"));
    Wait(RandomFixed(3.0, 6.0), c_timeGame);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(EventUnitTargetPoint(), 5.0), 8.0, false);
    }
    PlayerGroupLoopEnd();
    SoundPlayAtPoint(SoundLink("IDFIncoming", -1), PlayerGroupAll(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    ActorSend(lv_warning, "Destroy");
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(EventUnitTargetPoint(), 5.0), 8.0, false);
    }
    PlayerGroupLoopEnd();
    if ((lv_distribution == -1.0)) {
        auto55E4B2CF_n = lv_shells;
        for (auto55E4B2CF_i = 1; auto55E4B2CF_i <= auto55E4B2CF_n; auto55E4B2CF_i += 1) {
            Wait(lv_interval, c_timeGame);
            gf_DropShellatTargetPMC(PointWithOffsetPolar(EventUnitTargetPoint(), RandomFixed(0.0, lv_radius), libNtve_gf_RandomAngle()), "CallForFirePLLaunch", EventPlayer());
        }
    }
    else {
        auto0CF33FF5_ae = lv_shells;
        auto0CF33FF5_ai = 1;
        lv_int = 1;
        for ( ; ( (auto0CF33FF5_ai >= 0 && lv_int <= auto0CF33FF5_ae) || (auto0CF33FF5_ai <= 0 && lv_int >= auto0CF33FF5_ae) ) ; lv_int += auto0CF33FF5_ai ) {
            Wait(lv_interval, c_timeGame);
            gf_DropShellatTargetPMC(PointWithOffsetPolar(EventUnitTargetPoint(), ((lv_int - 1) * lv_radius), lv_distribution), "CallForFirePLLaunch", EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CallForFireAspectus_Init () {
    gt_CallForFireAspectus = TriggerCreate("gt_CallForFireAspectus_Func");
    TriggerAddEventUnitAbility(gt_CallForFireAspectus, null, AbilityCommand("CallForFireAspectus", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Weapons Team
//--------------------------------------------------------------------------------------------------
bool gt_AttackWeaponsTeam_Func (bool testConds, bool runActions) {
    int auto520357BA_n;
    int auto520357BA_i;
    unitgroup auto9B9C6BE2_g;
    int auto9B9C6BE2_u;
    int auto3B8F554B_n;
    int auto3B8F554B_i;
    unitgroup autoB1263A44_g;
    int autoB1263A44_u;
    unitgroup autoA58C492B_g;
    int autoA58C492B_u;

    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    unitgroup lv_aWT;
    point lv_castpoint;
    region lv_area;
    unit lv_unit;
    playergroup lv_allies;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = EventPlayer();
    lv_aWT = UnitGroupEmpty();
    lv_castpoint = EventUnitTargetPoint();
    lv_area = RegionCircle(lv_castpoint, 15.0);
    lv_allies = PlayerGroupAlliance(c_playerGroupAlly, lv_owner);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_allies, lv_owner);
    libNtve_gf_CreatePingFacingAngle(lv_allies, "PingSimple", lv_castpoint, ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 3.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/203D0A22"));
    Wait(3.0, c_timeGame);
    auto520357BA_n = 1;
    for (auto520357BA_i = 1; auto520357BA_i <= auto520357BA_n; auto520357BA_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "AH25Hunter", 0, lv_owner, RegionRandomPoint(lv_area), lv_castpoint);
        lv_unit = UnitLastCreated();
        UnitGroupAdd(lv_aWT, lv_unit);
        UnitBehaviorAdd(lv_unit, "KillsToCaster", lv_caster, 1);
        UnitBehaviorAdd(lv_unit, "BurstFireFullyAutomatic", lv_caster, 1);
        libNtve_gf_MakeUnitUncommandable(lv_unit, true);
        UnitSetState(lv_unit, c_unitStateStunned, true);
        PlayerGroupLoopBegin(lv_allies);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_ShareVisionofUnit(lv_unit, true, PlayerGroupLoopCurrent());
        }
        PlayerGroupLoopEnd();
        UnitSetHeight(lv_unit, 20.0, 0.0);
        libNtve_gf_SendActorMessageToUnit(lv_unit, "SetOpacity");
        UnitSetHeight(lv_unit, 7.0, 3.0);
        libNtve_gf_SendActorMessageToUnit(lv_unit, "SetOpacity 1.000000 3.000000");
        gf_PlaySoundOnUnitForRelevant(lv_unit, SoundLink("TTosh03BBanshee00036", -1));
    }
    UnitGroupIssueOrder(lv_aWT, OrderSetAutoCast(AbilityCommand("JAG108Missile", 0), false), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    auto9B9C6BE2_g = lv_aWT;
    auto9B9C6BE2_u = 1;
    for ( ; auto9B9C6BE2_u <= UnitGroupCount(auto9B9C6BE2_g, c_unitCountAll) ; auto9B9C6BE2_u += BoolToInt(lv_unit == UnitGroupUnit(auto9B9C6BE2_g, auto9B9C6BE2_u)) ) {
        lv_unit = UnitGroupUnit(auto9B9C6BE2_g, auto9B9C6BE2_u);
        UnitSetState(lv_unit, c_unitStateStunned, false);
        UnitBehaviorAdd(lv_unit, "aidummyhelicopterrf", lv_unit, 1);
        UnitBehaviorSetDuration(lv_unit, "aidummyhelicopterrf", 0.0625);
    }
    auto3B8F554B_n = 4;
    for (auto3B8F554B_i = 1; auto3B8F554B_i <= auto3B8F554B_n; auto3B8F554B_i += 1) {
        UnitGroupIssueOrder(lv_aWT, OrderTargetingRelativePoint(AbilityCommand("move", 0), RegionRandomPoint(lv_area)), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
    }
    UnitGroupIssueOrder(lv_aWT, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    if ((libNtve_gf_UnitGroupIsDead(lv_aWT) == false)) {
        UnitGroupLoopBegin(lv_aWT);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_PlaySoundOnUnitForRelevant(UnitGroupLoopCurrent(), SoundLink("Banshee_Pissed", -1));
        }
        UnitGroupLoopEnd();
    }

    autoB1263A44_g = lv_aWT;
    autoB1263A44_u = 1;
    for ( ; autoB1263A44_u <= UnitGroupCount(autoB1263A44_g, c_unitCountAll) ; autoB1263A44_u += BoolToInt(lv_unit == UnitGroupUnit(autoB1263A44_g, autoB1263A44_u)) ) {
        lv_unit = UnitGroupUnit(autoB1263A44_g, autoB1263A44_u);
        UnitSetState(lv_unit, c_unitStateStunned, true);
        UnitSetHeight(lv_unit, 20.0, 3.0);
        libNtve_gf_SendActorMessageToUnit(lv_unit, "SetOpacity 0.000000 3.000000");
    }
    Wait(3.0, c_timeGame);
    autoA58C492B_g = lv_aWT;
    autoA58C492B_u = 1;
    for ( ; autoA58C492B_u <= UnitGroupCount(autoA58C492B_g, c_unitCountAll) ; autoA58C492B_u += BoolToInt(lv_unit == UnitGroupUnit(autoA58C492B_g, autoA58C492B_u)) ) {
        lv_unit = UnitGroupUnit(autoA58C492B_g, autoA58C492B_u);
        UnitRemove(lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttackWeaponsTeam_Init () {
    gt_AttackWeaponsTeam = TriggerCreate("gt_AttackWeaponsTeam_Func");
    TriggerAddEventUnitAbility(gt_AttackWeaponsTeam, null, AbilityCommand("AttackWeaponsTeam", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbital Strike
//--------------------------------------------------------------------------------------------------
bool gt_OrbitalStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dummyunit;
    int lv_owner;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "CasterDummy", c_unitCreateIgnorePlacement, lv_owner, PointWithOffsetPolar(EventUnitTargetPoint(), 4.0, RandomFixed(35.0, 55.0)), EventUnitTargetPoint());
    lv_dummyunit = UnitLastCreated();
    UnitBehaviorAdd(lv_dummyunit, "KillsToCaster", EventUnit(), 1);
    UnitCreateEffectPoint(lv_dummyunit, "OrbitalStrikeDamage1", EventUnitTargetPoint());
    Wait(2.0, c_timeGame);
    UnitRemove(lv_dummyunit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrbitalStrike_Init () {
    gt_OrbitalStrike = TriggerCreate("gt_OrbitalStrike_Func");
    TriggerAddEventUnitAbility(gt_OrbitalStrike, null, AbilityCommand("OrbitalStrike", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OSR
//--------------------------------------------------------------------------------------------------
bool gt_OSR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((libNtve_gf_PlayerIsEnemy(lv_owner, PlayerGroupLoopCurrent(), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
            PlayerCreateEffectPoint(PlayerGroupLoopCurrent(), "OrbitalSatteliteReconnaissance", EventUnitTargetPoint());
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OSR_Init () {
    gt_OSR = TriggerCreate("gt_OSR_Func");
    TriggerAddEventUnitAbility(gt_OSR, null, AbilityCommand("OrbitalSatteliteReconnaissance", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FSS Skills
//--------------------------------------------------------------------------------------------------
bool gt_FSSSkills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesFSS", 3))) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "IDFSupport", (TechTreeUpgradeCount(lv_owner, "IDFSupport", c_techCountCompleteOnly) + 1));
    }

    if ((EventUnitAbility() == AbilityCommand("LearnAbilitiesFSS", 1))) {
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "CallforFire", (TechTreeUpgradeCount(PlayerGroupLoopCurrent(), "CallforFire", c_techCountCompleteOnly) + 1));
        }
        PlayerGroupLoopEnd();
        gv_iDFShellsGlobal = (gv_iDFShellsGlobal + 25);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FSSSkills_Init () {
    gt_FSSSkills = TriggerCreate("gt_FSSSkills_Func");
    TriggerAddEventUnitAbility(gt_FSSSkills, null, AbilityCommand("LearnAbilitiesFSS", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_FSSSkills, null, AbilityCommand("LearnAbilitiesFSS", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SFAAT Learn Training
//--------------------------------------------------------------------------------------------------
bool gt_SFAATLearnTraining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_owner;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_owner = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "Training", (TechTreeUpgradeCount(lv_owner, "Training", c_techCountCompleteOnly) + 1));
    gv_lNMaximumNumber += 1;
    gv_lNDataEntries[0].lv_maximumnumber += 1;
    gv_sFAATRecruitMaximum[lv_owner] += 1;
    PlayerGroupAdd(gv_leadershipOwners, lv_owner);
    if ((TriggerIsEnabled(gt_LNInitialization) == false)) {
        TriggerEnable(gt_LNInitialization, true);
        TriggerExecute(gt_LNInitialization, true, false);
    }

    TriggerExecute(gt_LNPeriodicSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SFAATLearnTraining_Init () {
    gt_SFAATLearnTraining = TriggerCreate("gt_SFAATLearnTraining_Func");
    TriggerAddEventUnitAbility(gt_SFAATLearnTraining, null, AbilityCommand("LearnAbilitiesSFAAT", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SFAAT Learn Leadership
//--------------------------------------------------------------------------------------------------
bool gt_SFAATLearnLeadership_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_owner;
    int lv_abilitylevel;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_owner = UnitGetOwner(lv_unit);
    lv_abilitylevel = UnitAbilityGetLevel(lv_unit, "Leadership");

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "Leadership", (TechTreeUpgradeCount(lv_owner, "Leadership", c_techCountCompleteOnly) + 1));
    gv_totalLeadershipLevel += 1;
    if ((gv_totalLeadershipLevel < 4)) {
        gv_lNProtectionDuration = (30 + (gv_totalLeadershipLevel * 30));
    }
    else {
        gv_lNProtectionDuration = (90 + (gv_totalLeadershipLevel * 15));
    }
    gv_lNMaximumNumber += 2;
    if ((lv_abilitylevel == 0)) {
        gv_lNDataEntries[1].lv_maximumnumber += 1;
        gv_lNDataEntries[2].lv_maximumnumber += 1;
        PlayerGroupAdd(gv_leadershipOwners, lv_owner);
        if ((TriggerIsEnabled(gt_LNInitialization) == false)) {
            TriggerEnable(gt_LNInitialization, true);
            TriggerExecute(gt_LNInitialization, true, false);
        }

    }
    else if ((lv_abilitylevel == 1)) {
        gv_lNDataEntries[1].lv_maximumnumber += 1;
        gv_lNDataEntries[2].lv_maximumnumber += 1;
    }
    else if ((lv_abilitylevel == 2)) {
        gv_lNDataEntries[3].lv_maximumnumber += 1;
        gv_lNDataEntries[4].lv_maximumnumber += 1;
    }
    else if ((lv_abilitylevel == 3)) {
        gv_lNDataEntries[3].lv_maximumnumber += 1;
        gv_lNDataEntries[4].lv_maximumnumber += 1;
    }
    else if (true) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/087D5CEA"), SoundLink("UI_GenericError", -1));
    }
    TriggerExecute(gt_LNPeriodicSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SFAATLearnLeadership_Init () {
    gt_SFAATLearnLeadership = TriggerCreate("gt_SFAATLearnLeadership_Func");
    TriggerAddEventUnitAbility(gt_SFAATLearnLeadership, null, AbilityCommand("LearnAbilitiesSFAAT", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SFAAT Skill Training
//--------------------------------------------------------------------------------------------------
bool gt_SFAATSkillTraining_Func (bool testConds, bool runActions) {
    string auto7A5319E6_val;

    // Variable Declarations
    int lv_loopint;
    unit lv_unit;
    unit lv_target;
    string lv_targetunittype;
    int lv_owner;
    int lv_controller;
    int lv_traininglevel;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_targetunittype = UnitGetType(lv_target);
    lv_owner = UnitGetOwner(lv_unit);
    lv_controller = EventPlayer();
    lv_traininglevel = gf_CurrentLevelForHeroAbility("Training", lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_lNAll, lv_target) == false)) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_controller), StringExternal("Param/Value/D9E99000"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if ((UnitGroupHasUnit(gv_lNAvailable, lv_target) == false)) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_controller), StringExternal("Param/Value/85E56697"), SoundLink("UI_GenericError", -1));
        return true;
    }

    if ((UnitGroupCount(gv_sFAATRecruits[lv_owner], c_unitCountAlive) >= gv_sFAATRecruitMaximum[lv_owner])) {
        UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_controller), StringExternal("Param/Value/123CB836"), SoundLink("UI_GenericError", -1));
        return true;
    }

    while ((lv_loopint < gv_lNDataEntriesSize)) {
        if ((gv_lNDataEntries[lv_loopint].lv_lntype == lv_targetunittype)) {
            if ((gf_CurrentLevelForHeroAbility("Leadership", lv_unit) < gv_lNDataEntries[lv_loopint].lv_leadershiprequirementlevel)) {
                UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_controller), StringExternal("Param/Value/8141A326"), SoundLink("UI_GenericError", -1));
                return true;
            }

            break;
        }

        lv_loopint += 1;
    }
    UnitBehaviorRemove(lv_target, "SelfPreservation", 1);
    UnitBehaviorAdd(lv_target, "KillsToCaster", lv_unit, 1);
    UnitSetOwner(lv_target, lv_owner, true);
    UnitGroupAdd(gv_sFAATRecruits[lv_owner], lv_target);
    UnitGroupRemove(gv_lNAvailable, lv_target);
    UnitSelect(lv_target, lv_controller, true);
    UnitSetCustomValue(lv_target, 1, 0.0);
    auto7A5319E6_val = lv_targetunittype;
    if (auto7A5319E6_val == "LNJavelinGunner") {
        Wait(0.0625, c_timeGame);
        libNtve_gf_UnitRemoveChargeUsed(lv_target, "Abil/LNRocket");
        UnitAddChargeUsed(lv_target, "Abil/LNRocket", 3.0);
        libNtve_gf_UnitAbilityRemoveChargeUsed(lv_target, "HERocketLN", "Abil/LNRocket");
        UnitAbilityAddChargeUsed(lv_target, "HERocketLN", "Abil/LNRocket", 3.0);
        libNtve_gf_UnitAbilityRemoveChargeUsed(lv_target, "ATRocketLN", "Abil/LNRocket");
        UnitAbilityAddChargeUsed(lv_target, "ATRocketLN", "Abil/LNRocket", 3.0);
        UnitAddChargeUsed(lv_target, "Abil/LNRocket", UnitAbilityChargeInfo(lv_target, AbilityCommand("ATRocketLN", 0), c_unitAbilChargeCountLeft));
    }
    else if (auto7A5319E6_val == "LNRifleman") {
        gf_ForceAbilityCooldowns(lv_target, AbilityCommand("FragGrenadeLN", 0), c_spendLocationUnit);
        gf_ForceAbilityCooldowns(lv_target, AbilityCommand("GroundFlareLN", 0), c_spendLocationUnit);
    }
    else if (auto7A5319E6_val == "LNSquadDesignatedMarksman") {
        gf_ForceAbilityCooldowns(lv_target, AbilityCommand("FieldCameraLN", 0), c_spendLocationUnit);
        gf_ForceAbilityCooldowns(lv_target, AbilityCommand("BinocularsLN", 0), c_spendLocationUnit);
    }
    else if (auto7A5319E6_val == "LNCombatEngineer") {
        gf_ForceAbilityCooldowns(lv_target, AbilityCommand("ClusterRocketsLN", 0), c_spendLocationUnit);
        gf_ForceAbilityCooldowns(lv_target, AbilityCommand("BarricadeLN", 0), c_spendLocationUnit);
        gf_ForceAbilityCooldowns(lv_target, AbilityCommand("M1SentryGunLN", 0), c_spendLocationUnit);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SFAATSkillTraining_Init () {
    gt_SFAATSkillTraining = TriggerCreate("gt_SFAATSkillTraining_Func");
    TriggerAddEventUnitAbility(gt_SFAATSkillTraining, null, AbilityCommand("Training", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SFAAT Skill Dismiss
//--------------------------------------------------------------------------------------------------
bool gt_SFAATSkillDismiss_Func (bool testConds, bool runActions) {
    string auto26E86E29_val;

    // Variable Declarations
    unit lv_unit;
    unit lv_target;
    int lv_owner;
    bool lv_rallyonunit;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_owner = UnitGetOwner(lv_unit);
    lv_rallyonunit = (RegionGetAttachUnit(gv_lNRallyPoint) != null);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_sFAATRecruits[lv_owner], lv_target) == true))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_target, "InCombat") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(lv_target, "Prone") == true)) {
        UnitIssueOrder(lv_target, Order(AbilityCommand("Prone", 0)), c_orderQueueAddToFront);
    }

    auto26E86E29_val = UnitGetType(lv_target);
    if (auto26E86E29_val == "LNJavelinGunner") {
        UnitIssueOrder(lv_target, Order(AbilityCommand("FiremodeLN", 1)), c_orderQueueAddToFront);
    }
    else if (auto26E86E29_val == "LNRifleman") {
        UnitIssueOrder(lv_target, Order(AbilityCommand("FiremodeLN", 1)), c_orderQueueAddToFront);
    }
    else if (auto26E86E29_val == "LNSquadDesignatedMarksman") {
        UnitIssueOrder(lv_target, Order(AbilityCommand("RapidFireLN", 1)), c_orderQueueAddToFront);
    }
    else if (auto26E86E29_val == "LNAutomaticRifleman") {
        UnitIssueOrder(lv_target, Order(AbilityCommand("SuppressiveFireLN", 1)), c_orderQueueAddToFront);
    }
    else {
    }
    UnitSetOwner(lv_target, 0, true);
    UnitGroupRemove(gv_sFAATRecruits[lv_owner], lv_target);
    UnitGroupAdd(gv_lNAvailable, lv_target);
    UnitBehaviorAdd(lv_target, "KillsToCaster", gv_playerHeroes[PlayerGroupPlayer(gv_leadershipOwners, RandomInt(1, PlayerGroupCount(gv_leadershipOwners)))], 1);
    if ((TriggerIsEnabled(gt_LNPeriodicRally) == true)) {
        if ((lv_rallyonunit == true)) {
            UnitIssueOrder(lv_target, OrderTargetingUnit(AbilityCommand("move", 0), RegionGetAttachUnit(gv_lNRallyPoint)), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(lv_target, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_lNRallyPoint)), c_orderQueueAddToEnd);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SFAATSkillDismiss_Init () {
    gt_SFAATSkillDismiss = TriggerCreate("gt_SFAATSkillDismiss_Func");
    TriggerAddEventUnitAbility(gt_SFAATSkillDismiss, null, AbilityCommand("Dismiss", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SFAAT Skill Leadership
//--------------------------------------------------------------------------------------------------
bool gt_SFAATSkillLeadership_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_target;
    point lv_targetpoint;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_targetpoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_KillModel(gv_lNRallyActor);
    PingDestroy(gv_lNRallyPing);
    if ((lv_target != null)) {
        if ((lv_target == lv_unit)) {
            TriggerEnable(gt_LNPeriodicRally, false);
            UnitGroupIssueOrder(gv_lNAvailable, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            return true;
        }
        else {
            RegionAttachToUnit(gv_lNRallyPoint, lv_target, Point(0.0, 0.0));
            libNtve_gf_CreatePingFacingAngle(gv_leadershipOwners, "BeaconDefendPing", lv_targetpoint, ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
            gv_lNRallyPing = PingLastCreated();
            PingSetUnit(gv_lNRallyPing, lv_target);
            PingSetScale(gv_lNRallyPing, 0.6);
            PingSetPlayerGroup(gv_lNRallyPing, gv_leadershipOwners);
            PingSetTooltip(gv_lNRallyPing, StringExternal("Param/Value/DA4CD0B0"));
        }
    }
    else {
        RegionSetCenter(gv_lNRallyPoint, lv_targetpoint);
        libNtve_gf_CreateModelAtPoint("BeaconRally", lv_targetpoint);
        gv_lNRallyActor = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreatePingFacingAngle(gv_leadershipOwners, "BeaconDefendPing", lv_targetpoint, ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_lNRallyPing = PingLastCreated();
        PingSetScale(gv_lNRallyPing, 0.6);
        PingSetPlayerGroup(gv_lNRallyPing, gv_leadershipOwners);
        PingSetTooltip(gv_lNRallyPing, StringExternal("Param/Value/347B3163"));
    }
    TriggerEnable(gt_LNPeriodicRally, true);
    TriggerExecute(gt_LNPeriodicRally, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SFAATSkillLeadership_Init () {
    gt_SFAATSkillLeadership = TriggerCreate("gt_SFAATSkillLeadership_Func");
    TriggerAddEventUnitAbility(gt_SFAATSkillLeadership, null, AbilityCommand("Leadership", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Initialization
//--------------------------------------------------------------------------------------------------
bool gt_LNInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    RegionAddRegion(gv_lNSpawn, RegionFromId(107));
    RegionAddRegion(gv_lNSpawn, RegionFromId(108));
    RegionAddRegion(gv_lNSpawn, RegionFromId(109));
    RegionAddRegion(gv_lNSpawn, RegionFromId(28));
    RegionAddRegion(gv_lNSpawn, RegionFromId(29));
    RegionAddRegion(gv_lNSpawn, RegionFromId(30));
    RegionAddRegion(gv_lNSpawn, RegionFromId(31));
    RegionAddRegion(gv_lNSpawn, RegionFromId(26));
    RegionAddRegion(gv_lNSpawn, RegionFromId(12));
    RegionAddRegion(gv_lNSpawn, RegionFromId(143));
    RegionAddRegion(gv_lNSpawn, RegionFromId(9));
    RegionAddRegion(gv_lNSpawn, RegionFromId(124));
    RegionAddRegion(gv_lNSpawn, RegionFromId(132));
    gv_lNRallyPoint = RegionCircle(Point(128.0, 128.0), 4.0);
    gv_lNDataEntries[0].lv_lntype = "LNRifleman";
    gv_lNDataEntries[0].lv_leadershiprequirementlevel = -1;
    gv_lNDataEntries[1].lv_lntype = "LNAutomaticRifleman";
    gv_lNDataEntries[1].lv_leadershiprequirementlevel = 0;
    gv_lNDataEntries[2].lv_lntype = "LNJavelinGunner";
    gv_lNDataEntries[2].lv_leadershiprequirementlevel = 0;
    gv_lNDataEntries[3].lv_lntype = "LNCombatEngineer";
    gv_lNDataEntries[3].lv_leadershiprequirementlevel = 2;
    gv_lNDataEntries[4].lv_lntype = "LNSquadDesignatedMarksman";
    gv_lNDataEntries[4].lv_leadershiprequirementlevel = 2;
    TriggerEnable(gt_LNPeriodicSpawn, true);
    TriggerEnable(gt_LNPeriodicPing, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNInitialization_Init () {
    gt_LNInitialization = TriggerCreate("gt_LNInitialization_Func");
    TriggerEnable(gt_LNInitialization, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Periodic Ping
//--------------------------------------------------------------------------------------------------
bool gt_LNPeriodicPing_Func (bool testConds, bool runActions) {
    unitgroup autoBD1B2DE0_g;
    int autoBD1B2DE0_u;

    // Variable Declarations
    unit lv_loopunit;
    int lv_registerping;

    // Variable Initialization
    lv_registerping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBD1B2DE0_g = gv_lNAvailable;
    autoBD1B2DE0_u = 1;
    for ( ; autoBD1B2DE0_u <= UnitGroupCount(autoBD1B2DE0_g, c_unitCountAll) ; autoBD1B2DE0_u += BoolToInt(lv_loopunit == UnitGroupUnit(autoBD1B2DE0_g, autoBD1B2DE0_u)) ) {
        lv_loopunit = UnitGroupUnit(autoBD1B2DE0_g, autoBD1B2DE0_u);
        libNtve_gf_CreatePingFacingAngle(gv_leadershipOwners, "PingSimple", UnitGetPosition(lv_loopunit), ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 5.0, 270.0);
        lv_registerping = PingLastCreated();
        PingSetUnit(lv_registerping, lv_loopunit);
        PingSetTooltip(lv_registerping, StringExternal("Param/Value/F992E20B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNPeriodicPing_Init () {
    gt_LNPeriodicPing = TriggerCreate("gt_LNPeriodicPing_Func");
    TriggerEnable(gt_LNPeriodicPing, false);
    TriggerAddEventTimePeriodic(gt_LNPeriodicPing, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Periodic Spawn
//--------------------------------------------------------------------------------------------------
bool gt_LNPeriodicSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_registerunit;
    int lv_lncreate;
    int lv_lntotal;
    int lv_decidedlntype;
    fixed lv_randomresult;

    // Variable Initialization
    lv_lntotal = UnitGroupCount(gv_lNAll, c_unitCountAlive);
    lv_decidedlntype = -1;

    // Conditions
    if (testConds) {
        if (!((lv_lntotal < gv_lNMaximumNumber))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lncreate = (gv_lNMaximumNumber - lv_lntotal);
    lv_lncreate = RandomInt(((lv_lncreate + 2) / 3), ((lv_lncreate + 1) / 2));
    while ((lv_lncreate > 0)) {
        lv_lntotal += 1;
        lv_decidedlntype = gf_LNDataFindFreeSlot(RandomInt(0, (gv_lNMaximumNumber - lv_lntotal)));
        UnitCreate(1, gv_lNDataEntries[lv_decidedlntype].lv_lntype, 0, 0, RegionRandomPoint(gv_lNSpawn), libNtve_gf_RandomAngle());
        lv_registerunit = UnitLastCreated();
        UnitGroupAdd(gv_lNDataEntries[lv_decidedlntype].lv_existing, lv_registerunit);
        UnitGroupAdd(gv_lNAvailable, lv_registerunit);
        UnitGroupAdd(gv_lNAll, lv_registerunit);
        lv_randomresult = RandomFixed((gv_lNProtectionDuration * 0.8), (gv_lNProtectionDuration * 1.2));
        UnitBehaviorAdd(lv_registerunit, "SelfPreservation", lv_registerunit, 1);
        UnitBehaviorSetDuration(lv_registerunit, "SelfPreservation", lv_randomresult);
        UnitBehaviorSetDurationRemaining(lv_registerunit, "SelfPreservation", lv_randomresult);
        UnitBehaviorAdd(lv_registerunit, "KillsToCaster", gv_playerHeroes[PlayerGroupPlayer(gv_leadershipOwners, RandomInt(1, PlayerGroupCount(gv_leadershipOwners)))], 1);
        lv_lncreate -= 1;
        libNtve_gf_SendActorMessageToUnit(lv_registerunit, "TextureSelectById CamoLN");
    }
    if ((TriggerIsEnabled(gt_LNPeriodicRally) == true)) {
        TriggerExecute(gt_LNPeriodicRally, false, false);
    }

    TriggerExecute(gt_LNPeriodicPing, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNPeriodicSpawn_Init () {
    gt_LNPeriodicSpawn = TriggerCreate("gt_LNPeriodicSpawn_Func");
    TriggerEnable(gt_LNPeriodicSpawn, false);
    TriggerAddEventTimePeriodic(gt_LNPeriodicSpawn, 190.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Periodic Rally
//--------------------------------------------------------------------------------------------------
bool gt_LNPeriodicRally_Func (bool testConds, bool runActions) {
    unitgroup auto843DEB57_g;
    int auto843DEB57_u;

    // Variable Declarations
    unit lv_loopunit;
    bool lv_rallyonunit;
    point lv_rallypoint;

    // Variable Initialization
    lv_rallyonunit = (RegionGetAttachUnit(gv_lNRallyPoint) != null);
    lv_rallypoint = RegionGetCenter(gv_lNRallyPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    auto843DEB57_g = gv_lNAvailable;
    auto843DEB57_u = 1;
    for ( ; auto843DEB57_u <= UnitGroupCount(auto843DEB57_g, c_unitCountAll) ; auto843DEB57_u += BoolToInt(lv_loopunit == UnitGroupUnit(auto843DEB57_g, auto843DEB57_u)) ) {
        lv_loopunit = UnitGroupUnit(auto843DEB57_g, auto843DEB57_u);
        if ((libNtve_gf_UnitInRegion(lv_loopunit, gv_lNRallyPoint) == true)) {
            UnitBehaviorRemove(lv_loopunit, "SelfPreservation", 1);
            if ((lv_rallyonunit == false) && (RandomInt(1, 4) == 1)) {
                UnitIssueOrder(lv_loopunit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_lNRallyPoint)), c_orderQueueReplace);
            }

        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_loopunit), lv_rallypoint) > 15.0)) {
                UnitIssueOrder(lv_loopunit, OrderTargetingPoint(AbilityCommand("move", 0), lv_rallypoint), c_orderQueueReplace);
            }
            else {
                if ((lv_rallyonunit == true)) {
                    UnitIssueOrder(lv_loopunit, OrderTargetingUnit(AbilityCommand("move", 0), RegionGetAttachUnit(gv_lNRallyPoint)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_loopunit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_lNRallyPoint)), c_orderQueueReplace);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNPeriodicRally_Init () {
    gt_LNPeriodicRally = TriggerCreate("gt_LNPeriodicRally_Func");
    TriggerEnable(gt_LNPeriodicRally, false);
    TriggerAddEventTimePeriodic(gt_LNPeriodicRally, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN Self Preservation
//--------------------------------------------------------------------------------------------------
bool gt_LNSelfPreservation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_undeadTargetGroup, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNSelfPreservation_Init () {
    gt_LNSelfPreservation = TriggerCreate("gt_LNSelfPreservation_Func");
    TriggerAddEventUnitBehaviorChange(gt_LNSelfPreservation, null, "SelfPreservation", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN CE Barricade
//--------------------------------------------------------------------------------------------------
bool gt_LNCEBarricade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "KillsToCaster", gv_playerHeroes[UnitGetOwner(EventUnitCreatedUnit())], 1);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "UnknownBehavior", EventUnitCreatedUnit(), 1);
    if ((UnitGetType(EventUnitCreatedUnit()) == "M1SentryGun")) {
        UnitIssueOrder(EventUnitCreatedUnit(), Order(AbilityCommand("MountMMG", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNCEBarricade_Init () {
    gt_LNCEBarricade = TriggerCreate("gt_LNCEBarricade_Func");
    TriggerAddEventUnitCreated(gt_LNCEBarricade, null, "BarricadeLN", null);
    TriggerAddEventUnitCreated(gt_LNCEBarricade, null, "M1SentryGunLN", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LN CE Insufficient Support
//--------------------------------------------------------------------------------------------------
bool gt_LNCEInsufficientSupport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    int lv_disparity;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_disparity = ((TechTreeUnitCount(lv_owner, "Barricade", c_techCountCompleteOnly) + TechTreeUnitCount(lv_owner, "M1SentryGun", c_techCountCompleteOnly)) - TechTreeUnitCount(lv_owner, "LNCombatEngineer", c_techCountCompleteOnly));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_disparity > 0)) {
        UnitKill(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LNCEInsufficientSupport_Init () {
    gt_LNCEInsufficientSupport = TriggerCreate("gt_LNCEInsufficientSupport_Func");
    TriggerAddEventUnitBehaviorChange(gt_LNCEInsufficientSupport, null, "UnknownBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    int auto368E5832_ae;
    int auto368E5832_ai;
    int auto5CBFDF99_ae;
    int auto5CBFDF99_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto368E5832_ae = 12;
    auto368E5832_ai = 1;
    lv_i = 1;
    for ( ; ( (auto368E5832_ai >= 0 && lv_i <= auto368E5832_ae) || (auto368E5832_ai <= 0 && lv_i >= auto368E5832_ae) ) ; lv_i += auto368E5832_ai ) {
        BankLoad(gv_uA3BANKNAME, lv_i);
        gv_banks[lv_i] = BankLastCreated();
    }
    auto5CBFDF99_ae = 12;
    auto5CBFDF99_ai = 1;
    lv_i = 1;
    for ( ; ( (auto5CBFDF99_ai >= 0 && lv_i <= auto5CBFDF99_ae) || (auto5CBFDF99_ai <= 0 && lv_i >= auto5CBFDF99_ae) ) ; lv_i += auto5CBFDF99_ai ) {
        if ((BankExists("UA3", lv_i) == true)) {
            BankLoad("UA3", lv_i);
            gv_banksold[lv_i] = BankLastCreated();
        }

    }
    gf_InitGameSetup();
    gf_InitUnlocks();
    gf_InitRanks();
    gf_InitSIs();
    gf_InitMedals();
    gf_InitAilments();
    gf_InitMinis();
    gf_InitVisorText();
    gf_Preload();
    gf_InitCivilians();
    gf_InitAmmoBar();
    gf_InitSprintBar();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over
//--------------------------------------------------------------------------------------------------
bool gt_GameOver_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(gv_heroesGroup) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameOver = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/98F4D5D0"));
    SoundPlay(SoundLink("TTychus01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_playerAvgGameTime[PlayerGroupLoopCurrent()] = ((FixedToInt(GameGetMissionTime()) + gv_playerAvgGameTime[PlayerGroupLoopCurrent()]) / 2);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()] >= gv_playerStartingXP[PlayerGroupLoopCurrent()])) {
            gf_SavePlayerProgress(PlayerGroupLoopCurrent());
        }
        else {
            gf_VisorTextDialog(StringExternal("Param/Value/A85ADBF7"), PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/FE16B3FF"));
    Wait(15.0, c_timeGame);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, true, true);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameOver_Init () {
    gt_GameOver = TriggerCreate("gt_GameOver_Func");
    TriggerEnable(gt_GameOver, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weather Effects
//--------------------------------------------------------------------------------------------------
bool gt_WeatherEffects_Func (bool testConds, bool runActions) {
    int auto4BBD4614_ae;
    int auto4BBD4614_ai;
    int auto99FAA6EA_ae;
    int auto99FAA6EA_ai;
    int autoC0F9C20B_ae;
    int autoC0F9C20B_ai;

    // Variable Declarations
    int lv_loopint;
    sound lv_rainsound;
    actor[13] lv_weatheremitters;
    timer lv_durationtimer;

    // Variable Initialization
    lv_durationtimer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((RandomInt(1, 3) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_durationtimer, RandomFixed(300.0, 600.0), false, c_timeGame);
    SoundPlay(SoundLink("Ambience_TRaynor03Rain", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_rainsound = SoundLastPlayed();
    while (true) {
        if ((TimerGetRemaining(lv_durationtimer) <= 1.0)) {
            auto4BBD4614_ae = 12;
            auto4BBD4614_ai = 1;
            lv_loopint = 1;
            for ( ; ( (auto4BBD4614_ai >= 0 && lv_loopint <= auto4BBD4614_ae) || (auto4BBD4614_ai <= 0 && lv_loopint >= auto4BBD4614_ae) ) ; lv_loopint += auto4BBD4614_ai ) {
                libNtve_gf_KillModel(lv_weatheremitters[lv_loopint]);
            }
            break;
        }

        auto99FAA6EA_ae = 12;
        auto99FAA6EA_ai = 1;
        lv_loopint = 1;
        for ( ; ( (auto99FAA6EA_ai >= 0 && lv_loopint <= auto99FAA6EA_ae) || (auto99FAA6EA_ai <= 0 && lv_loopint >= auto99FAA6EA_ae) ) ; lv_loopint += auto99FAA6EA_ai ) {
            libNtve_gf_CreateModelAtPoint("RainEmitterLarge", CameraGetTarget(lv_loopint));
            lv_weatheremitters[lv_loopint] = libNtve_gf_ActorLastCreated();
        }
        Wait(1.0, c_timeGame);
        autoC0F9C20B_ae = 12;
        autoC0F9C20B_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoC0F9C20B_ai >= 0 && lv_loopint <= autoC0F9C20B_ae) || (autoC0F9C20B_ai <= 0 && lv_loopint >= autoC0F9C20B_ae) ) ; lv_loopint += autoC0F9C20B_ai ) {
            libNtve_gf_KillModel(lv_weatheremitters[lv_loopint]);
        }
    }
    SoundStop(lv_rainsound, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeatherEffects_Init () {
    gt_WeatherEffects = TriggerCreate("gt_WeatherEffects_Func");
    TriggerAddEventTimePeriodic(gt_WeatherEffects, RandomFixed(600.0, 1080.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Random Fog
//--------------------------------------------------------------------------------------------------
bool gt_RandomFog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((RandomInt(1, 3) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((gv_fogevent == false))) {
        Wait(1.0, c_timeGame);
    }
    gv_fogevent = true;
    gf_BlendFogNew(50.0, 50.0, 50.0, 3.0, 1.0, 8.0, 18.75);
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4C311C0C"));
    Wait(RandomFixed(200.0, 480.0), c_timeGame);
    gf_BlendFogNew(50.0, 50.0, 50.0, 0.0, 1.0, 0.0, 18.75);
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/24C0E3E1"));
    Wait(14.0, c_timeGame);
    gv_fogevent = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RandomFog_Init () {
    gt_RandomFog = TriggerCreate("gt_RandomFog_Func");
    TriggerAddEventTimeElapsed(gt_RandomFog, RandomFixed(60.0, 3000.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Banks Vars New
//--------------------------------------------------------------------------------------------------
bool gt_BanksVarsNew_Func (bool testConds, bool runActions) {
    playergroup auto26651D97_g;
    int auto26651D97_p;

    // Variable Declarations
    int lv_int;

    // Variable Initialization
    lv_int = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto26651D97_g = gv_players; 
    auto26651D97_p = 1;
    for ( ; auto26651D97_p <= PlayerGroupCount(auto26651D97_g) ; auto26651D97_p += BoolToInt(lv_int == PlayerGroupPlayer(auto26651D97_g, auto26651D97_p)) ) {
        lv_int = PlayerGroupPlayer(auto26651D97_g, auto26651D97_p);
        if ((PlayerStatus(lv_int) == c_playerStatusActive)) {
            gf_LoadPlayerProgress(lv_int);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BanksVarsNew_Init () {
    gt_BanksVarsNew = TriggerCreate("gt_BanksVarsNew_Func");
    TriggerAddEventTimeElapsed(gt_BanksVarsNew, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Bank New
//--------------------------------------------------------------------------------------------------
bool gt_SaveBankNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[5][lv_player]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SavePlayerProgress(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveBankNew_Init () {
    gt_SaveBankNew = TriggerCreate("gt_SaveBankNew_Func");
    TriggerAddEventDialogControl(gt_SaveBankNew, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UA3 Import
//--------------------------------------------------------------------------------------------------
bool gt_UA3Import_Func (bool testConds, bool runActions) {
    int auto97C364D7_val;
    int autoEFE29523_val;
    int autoE2C33507_val;
    int autoAB3AFEDE_ae;
    int autoAB3AFEDE_ai;
    int auto6760AA8A_ae;
    int auto6760AA8A_ai;
    int autoE6440725_ae;
    int autoE6440725_ai;
    int autoD249DC5C_ae;
    int autoD249DC5C_ai;
    int autoD2E08FCF_ae;
    int autoD2E08FCF_ai;
    int auto518B76BC_ae;
    int auto518B76BC_ai;

    // Variable Declarations
    string lv_message;
    int lv_player;
    bank lv_file;
    int lv_int;
    string lv_ownerhandle;
    string lv_fromhandle;
    int lv_region;
    string lv_string;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_player = EventPlayer();
    lv_int = 1;
    lv_ownerhandle = PlayerHandle(lv_player);
    lv_fromhandle = "";
    lv_region = StringToInt(StringSub(lv_ownerhandle, 1, (StringFind(lv_ownerhandle, "-", c_stringCase) - 1)));
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!((StringEqual(StringWord(lv_message, 1), "-import", c_stringNoCase) == true))) {
            return false;
        }

        if (!((StringEqual(StringWord(lv_message, 2), "ua3", c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(StringWord(lv_message, 3)) != 40)) {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/577B754B"));
        return true;
    }

    if ((gv_playerImportedFromUA3[lv_player] != 0)) {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/3BEAFA92"));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/9C27C0F2"));
        return true;
    }

    if ((gv_banksold[lv_player] == null)) {
        auto97C364D7_val = lv_region;
        if (auto97C364D7_val == 1) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/0AF2BAFE"));
        }
        else if (auto97C364D7_val == 2) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/AF83C511"));
        }
        else if (auto97C364D7_val == 3) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/CDA24FB7"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/6FF1A6E9"));
            return true;
        }
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/575B421C"));
        return true;
    }

    lv_file = gv_banksold[lv_player];
    if (((BankSectionCount(lv_file) != 1) || (BankSectionExists(lv_file, "Un") != true) || (BankKeyCount(lv_file, "Un") != 7) || (BankKeyExists(lv_file, "Un", "XP") != true) || (BankValueIsType(lv_file, "Un", "XP", c_bankTypeString) != true) || (BankKeyExists(lv_file, "Un", "M") != true) || (BankValueIsType(lv_file, "Un", "M", c_bankTypeString) != true) || (BankKeyExists(lv_file, "Un", "GW") != true) || (BankValueIsType(lv_file, "Un", "GW", c_bankTypeString) != true) || (BankKeyExists(lv_file, "Un", "D") != true) || (BankValueIsType(lv_file, "Un", "D", c_bankTypeString) != true) || (BankKeyExists(lv_file, "Un", "S") != true) || (BankValueIsType(lv_file, "Un", "S", c_bankTypeString) != true) || (BankKeyExists(lv_file, "Un", "Gen") != true) || (BankValueIsType(lv_file, "Un", "Gen", c_bankTypeString) != true) || (BankKeyExists(lv_file, "Un", "C") != true) || (BankValueIsType(lv_file, "Un", "C", c_bankTypeString) != true))) {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/91AEE70D"));
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/1DF65169"));
        return true;
    }

    autoEFE29523_val = lv_region;
    if (autoEFE29523_val == 1) {
        lv_fromhandle = "1-S2-1-1086513";
    }
    else if (autoEFE29523_val == 2) {
        lv_fromhandle = "2-S2-1-3756849";
    }
    else if (autoEFE29523_val == 3) {
        lv_fromhandle = "3-S2-1-4330813";
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/33F8588F"));
        return true;
    }
    lv_string = (lv_fromhandle + lv_ownerhandle + "UA3" + "Un" + "C" + "Valuestring" + BankValueGetAsString(lv_file, "Un", "C") + "D" + "Valuestring" + BankValueGetAsString(lv_file, "Un", "D") + "GW" + "Valuestring" + BankValueGetAsString(lv_file, "Un", "GW") + "Gen" + "Valuestring" + BankValueGetAsString(lv_file, "Un", "Gen") + "M" + "Valuestring" + BankValueGetAsString(lv_file, "Un", "M") + "S" + "Valuestring" + BankValueGetAsString(lv_file, "Un", "S") + "XP" + "Valuestring" + BankValueGetAsString(lv_file, "Un", "XP"));
    lv_string = PlayerBankImportConverterSignature(lv_string);
    if ((StringEqual(lv_string, StringWord(lv_message, 3), c_stringNoCase) != true)) {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/C2983C2C"));
        autoE2C33507_val = lv_region;
        if (autoE2C33507_val == 1) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/C2E18FF0"));
        }
        else if (autoE2C33507_val == 2) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/BFE8CD69"));
        }
        else if (autoE2C33507_val == 3) {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/717E577A"));
        }
        else {
        }
        return true;
    }

    gv_playerImportedFromUA3[lv_player] = 1;
    PlayerGroupLoopBegin(PlayerGroupSingle(lv_player));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_string = BankValueGetAsString(lv_file, "Un", "XP");
        autoAB3AFEDE_ae = 3;
        autoAB3AFEDE_ai = 1;
        lv_int = 1;
        for ( ; ( (autoAB3AFEDE_ai >= 0 && lv_int <= autoAB3AFEDE_ae) || (autoAB3AFEDE_ai <= 0 && lv_int >= autoAB3AFEDE_ae) ) ; lv_int += autoAB3AFEDE_ai ) {
            gv_playerExperience[lv_int][PlayerGroupLoopCurrent()] += StringToInt(StringWord(lv_string, lv_int));
            if ((gv_playerExperience[lv_int][PlayerGroupLoopCurrent()] < 0)) {
                gv_playerExperience[lv_int][PlayerGroupLoopCurrent()] = 0;
            }

        }
        gv_playerStartingXP[PlayerGroupLoopCurrent()] += StringToInt(StringWord(lv_string, 1));
        lv_string = BankValueGetAsString(lv_file, "Un", "Gen");
        gv_playerAvgGameTime[PlayerGroupLoopCurrent()] = ((gv_playerAvgGameTime[PlayerGroupLoopCurrent()] * gv_playerGamesPlayed[PlayerGroupLoopCurrent()]) + (StringToInt(StringWord(lv_string, 3)) * StringToInt(StringWord(lv_string, 1))));
        gv_playerGamesPlayed[PlayerGroupLoopCurrent()] += StringToInt(StringWord(lv_string, 1));
        gv_playerRevives[PlayerGroupLoopCurrent()] += StringToInt(StringWord(lv_string, 2));
        gv_playerAvgGameTime[PlayerGroupLoopCurrent()] /= gv_playerGamesPlayed[PlayerGroupLoopCurrent()];
        gv_playercamounlocked[1][PlayerGroupLoopCurrent()] = true;
        lv_string = BankValueGetAsString(lv_file, "Un", "C");
        auto6760AA8A_ae = StringLength(lv_string);
        auto6760AA8A_ai = 1;
        lv_int = 1;
        for ( ; ( (auto6760AA8A_ai >= 0 && lv_int <= auto6760AA8A_ae) || (auto6760AA8A_ai <= 0 && lv_int >= auto6760AA8A_ae) ) ; lv_int += auto6760AA8A_ai ) {
            if ((StringSub(lv_string, lv_int, lv_int) == "1")) {
                gv_playercamounlocked[(lv_int + 1)][PlayerGroupLoopCurrent()] = true;
            }

        }
        lv_string = BankValueGetAsString(lv_file, "Un", "D");
        autoE6440725_ae = StringLength(lv_string);
        autoE6440725_ai = 1;
        lv_int = 1;
        for ( ; ( (autoE6440725_ai >= 0 && lv_int <= autoE6440725_ae) || (autoE6440725_ai <= 0 && lv_int >= autoE6440725_ae) ) ; lv_int += autoE6440725_ai ) {
            if ((StringSub(lv_string, lv_int, lv_int) == "1")) {
                gv_playerdecalunlocked[lv_int][PlayerGroupLoopCurrent()] = true;
            }

        }
        lv_string = BankValueGetAsString(lv_file, "Un", "S");
        autoD249DC5C_ae = StringLength(lv_string);
        autoD249DC5C_ai = 1;
        lv_int = 1;
        for ( ; ( (autoD249DC5C_ai >= 0 && lv_int <= autoD249DC5C_ae) || (autoD249DC5C_ai <= 0 && lv_int >= autoD249DC5C_ae) ) ; lv_int += autoD249DC5C_ai ) {
            if ((StringSub(lv_string, lv_int, lv_int) == "1")) {
                gv_sIunlocked[lv_int][PlayerGroupLoopCurrent()] = true;
            }

        }
        lv_string = BankValueGetAsString(lv_file, "Un", "M");
        autoD2E08FCF_ae = StringLength(lv_string);
        autoD2E08FCF_ai = 1;
        lv_int = 1;
        for ( ; ( (autoD2E08FCF_ai >= 0 && lv_int <= autoD2E08FCF_ae) || (autoD2E08FCF_ai <= 0 && lv_int >= autoD2E08FCF_ae) ) ; lv_int += autoD2E08FCF_ai ) {
            if ((StringSub(lv_string, lv_int, lv_int) == "1")) {
                gv_medalsunlocked[lv_int][PlayerGroupLoopCurrent()] = true;
            }

        }
        lv_string = BankValueGetAsString(lv_file, "Un", "GW");
        auto518B76BC_ae = 8;
        auto518B76BC_ai = 1;
        lv_int = 1;
        for ( ; ( (auto518B76BC_ai >= 0 && lv_int <= auto518B76BC_ae) || (auto518B76BC_ai <= 0 && lv_int >= auto518B76BC_ae) ) ; lv_int += auto518B76BC_ai ) {
            gv_gamesWon[lv_int][PlayerGroupLoopCurrent()] += StringToInt(StringWord(lv_string, lv_int));
        }
        if ((gv_playerGamesPlayed[PlayerGroupLoopCurrent()] >= 75) && (gv_playercamounlocked[6][PlayerGroupLoopCurrent()] == false)) {
            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/B52961E9"));
            gv_playercamounlocked[6][PlayerGroupLoopCurrent()] = true;
        }

        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaDebug, (StringExternal("Param/Value/2D982C4D")));
        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaDebug, (StringExternal("Param/Value/F6216AEC") + IntToText(gv_playerExperience[1][PlayerGroupLoopCurrent()])));
        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaDebug, (StringExternal("Param/Value/484852F2") + IntToText(gv_playerExperience[2][PlayerGroupLoopCurrent()])));
        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaDebug, (StringExternal("Param/Value/8E5A3DA9") + IntToText(gv_playerExperience[3][PlayerGroupLoopCurrent()])));
        if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] >= gv_rankXPMin[1][3])) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "PFC", 1);
        }

        if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] >= gv_rankXPMin[1][5])) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "CPL", 1);
        }

        if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] >= gv_rankXPMin[1][6])) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "SGT", 1);
        }

        if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] >= gv_rankXPMin[1][7])) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "SSG", 1);
        }

        if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] >= gv_rankXPMin[1][9])) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "MSG", 1);
        }

        if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] >= gv_rankXPMin[1][10])) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "1SG", 1);
        }

    }
    PlayerGroupLoopEnd();
    if ((((gv_playerExperience[1][lv_player] + gv_playerExperience[2][lv_player] + gv_playerExperience[3][lv_player]) > (gv_playerGamesPlayed[lv_player] * 3000)) || ((gv_playerExperience[1][lv_player] + gv_playerExperience[2][lv_player] + gv_playerExperience[3][lv_player]) > 2000000))) {
        gv_playerImportedFromUA3[lv_player] = 3;
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/FBBD7DAB"));
    }
    else if (((gv_playercamounlocked[15][lv_player] == true) || (gv_playercamounlocked[16][lv_player] == true) || (gv_playercamounlocked[17][lv_player] == true) || (gv_playerdecalunlocked[10][lv_player] == true))) {
        gv_playerImportedFromUA3[lv_player] = 2;
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/858C77EC"));
    }
    gv_playercamounlocked[15][lv_player] = false;
    gv_playercamounlocked[16][lv_player] = false;
    gv_playercamounlocked[17][lv_player] = false;
    gv_playerdecalunlocked[10][lv_player] = false;
    gv_playerdecalunlocked[8][lv_player] = false;
    while ((BankSectionCount(lv_file) > 0)) {
        BankSectionRemove(lv_file, BankSectionName(lv_file, 0));
    }
    BankSave(lv_file);
    BankRemove(lv_file);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UA3Import_Init () {
    gt_UA3Import = TriggerCreate("gt_UA3Import_Func");
    TriggerAddEventChatMessage(gt_UA3Import, c_playerAny, "-import", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help Import
//--------------------------------------------------------------------------------------------------
bool gt_HelpImport_Func (bool testConds, bool runActions) {
    int auto4B0210D9_val;

    // Variable Declarations
    int lv_player;
    string lv_ownerhandle;
    int lv_region;
    playergroup lv_pgroup;
    string lv_sourcehandle;
    string lv_targethandle;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_ownerhandle = PlayerHandle(lv_player);
    lv_region = StringToInt(StringSub(lv_ownerhandle, 1, (StringFind(lv_ownerhandle, "-", c_stringCase) - 1)));
    lv_pgroup = PlayerGroupSingle(lv_player);
    lv_sourcehandle = "";
    lv_targethandle = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B0210D9_val = lv_region;
    if (auto4B0210D9_val == 1) {
        lv_sourcehandle = "1-S2-1-1086513";
        lv_targethandle = "1-S2-1-4256394";
    }
    else if (auto4B0210D9_val == 2) {
        lv_sourcehandle = "2-S2-1-3756849";
        lv_targethandle = "2-S2-1-355214";
    }
    else if (auto4B0210D9_val == 3) {
        lv_sourcehandle = "3-S2-1-4330813";
        lv_targethandle = " [PUBLISHER ACCOUNT (UNKNOWN)]";
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/1D435574"));
        return true;
    }
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/711526C0"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/8487B11A"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/0C201EE0"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/BE288BD4"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/70339BB7"));
    Wait(1.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, (StringExternal("Param/Value/7E19F998") + StringToText(lv_ownerhandle) + StringExternal("Param/Value/2EDB4ECC") + StringToText(lv_sourcehandle)));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/585252FF"));
    Wait(1.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, (StringExternal("Param/Value/4AF0123B") + StringToText(lv_ownerhandle) + StringExternal("Param/Value/6E3D235A") + StringToText(lv_sourcehandle)));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/DBCEF95F"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/574297E4"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/2CFF08A8"));
    Wait(1.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, (StringExternal("Param/Value/89180C19") + StringToText(lv_ownerhandle) + StringExternal("Param/Value/A15E98E6") + StringToText(lv_targethandle)));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/2EB3A030"));
    Wait(1.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, (StringExternal("Param/Value/462991F1") + StringToText(lv_ownerhandle) + StringExternal("Param/Value/87084177") + StringToText(lv_targethandle)));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/0E53D9FE"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/80CDDC9D"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/611691DB"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/DFB7FE6A"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/DE7AD094"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/CEC01256"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/84C3FDFD"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/985B2BAD"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(lv_pgroup, c_messageAreaChat, StringExternal("Param/Value/83067467"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelpImport_Init () {
    gt_HelpImport = TriggerCreate("gt_HelpImport_Func");
    TriggerAddEventChatMessage(gt_HelpImport, c_playerAny, "-help import", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tips
//--------------------------------------------------------------------------------------------------
bool gt_Tips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_tipplayers;

    // Variable Initialization
    lv_tipplayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/0581ABF1"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/00289B08"), StringExternal("Param/Value/0199EEF4"), "Assets\\Textures\\btn-tips-armory.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/731AB2C0"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/E5FA5809"), StringExternal("Param/Value/C2A16678"), "Assets\\Textures\\btn-tips-hotkeys.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/F9E26492"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/5E3036B9"), StringExternal("Param/Value/91892EDA"), "Assets\\Textures\\btn-tips-hotkeys.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/2FA26D49"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/5CA37ABA"), StringExternal("Param/Value/C7B09F5B"), "Assets\\Textures\\btn-tips-missioncase.dds");
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] >= 400)) {
            TipAlertPanelClear(PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
            PlayerGroupAdd(lv_tipplayers, PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    Wait(90.0, c_timeGame);
    UIDisplayMessage(lv_tipplayers, c_messageAreaDebug, StringExternal("Param/Value/B91D6BDB"));
    Wait(90.0, c_timeGame);
    UIDisplayMessage(lv_tipplayers, c_messageAreaDebug, StringExternal("Param/Value/AAC2F7BD"));
    Wait(90.0, c_timeGame);
    UIDisplayMessage(lv_tipplayers, c_messageAreaDebug, StringExternal("Param/Value/151C643D"));
    Wait(90.0, c_timeGame);
    UIDisplayMessage(lv_tipplayers, c_messageAreaDebug, StringExternal("Param/Value/36AAAF27"));
    Wait(90.0, c_timeGame);
    UIDisplayMessage(lv_tipplayers, c_messageAreaDebug, StringExternal("Param/Value/B696D40F"));
    Wait(90.0, c_timeGame);
    UIDisplayMessage(lv_tipplayers, c_messageAreaDebug, StringExternal("Param/Value/3E930036"));
    Wait(90.0, c_timeGame);
    UIDisplayMessage(lv_tipplayers, c_messageAreaDebug, StringExternal("Param/Value/4C34B190"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tips_Init () {
    gt_Tips = TriggerCreate("gt_Tips_Func");
    TriggerAddEventGeneric(gt_Tips, "Start Tips");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    int auto2C97CE29_ae;
    int auto2C97CE29_ai;

    // Variable Declarations
    int lv_loopint;
    int lv_playingplayers;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            lv_playingplayers += 1;
        }

    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusLeft) && (gv_playerHeroes[PlayerGroupLoopCurrent()] != null)) {
            gv_spawnCount = (6 + FixedToInt((IntToFixed(lv_playingplayers) * 0.7)));
            gv_spawnCount = (gv_spawnCount + gv_modespawnmodifier[gv_gamemode]);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, 0);
            if ((gv_playersfireteam[PlayerGroupLoopCurrent()] != 0)) {
                PlayerGroupRemove(gv_fireteamGroups[gv_playersfireteam[PlayerGroupLoopCurrent()]], PlayerGroupLoopCurrent());
                gv_playersfireteam[PlayerGroupLoopCurrent()] = 0;
                gf_RefreshFireteamDialog();
            }

            UnitGroupRemove(gv_heroesGroup, gv_playerHeroes[PlayerGroupLoopCurrent()]);
            UnitRevive(gv_playerHeroes[PlayerGroupLoopCurrent()]);
            TriggerEnable(gt_HeroDeath, false);
            UnitKill(gv_playerHeroes[PlayerGroupLoopCurrent()]);
            if ((gv_gamemode != 6)) {
                TriggerEnable(gt_HeroDeath, true);
            }

            UnitRemove(gv_playerHeroes[PlayerGroupLoopCurrent()]);
            UnitRemove(gv_heroselector[PlayerGroupLoopCurrent()]);
            gv_playerHeroes[PlayerGroupLoopCurrent()] = null;
            UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            if ((gv_deadHeroIndicator[PlayerGroupLoopCurrent()] != null)) {
                libNtve_gf_SendActorMessageToUnit(gv_deadHeroIndicator[PlayerGroupLoopCurrent()], "SetTintColor 128,0,128");
                libNtve_gf_SendActorMessageToUnit(gv_deadHeroIndicator[PlayerGroupLoopCurrent()], "SetOpacity 0.500000 0.000000 a");
            }

            auto2C97CE29_ae = 12;
            auto2C97CE29_ai = 1;
            lv_loopint = 1;
            for ( ; ( (auto2C97CE29_ai >= 0 && lv_loopint <= auto2C97CE29_ae) || (auto2C97CE29_ai <= 0 && lv_loopint >= auto2C97CE29_ae) ) ; lv_loopint += auto2C97CE29_ai ) {
                libNtve_gf_SetAlliance(lv_loopint, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_Neutral);
            }
            if ((gv_fireteamTLs[gv_playersfireteam[PlayerGroupLoopCurrent()]] == PlayerGroupLoopCurrent())) {
                PlayerGroupRemove(gv_fireteamGroups[gv_playersfireteam[PlayerGroupLoopCurrent()]], PlayerGroupLoopCurrent());
                gf_RefreshFireteamDialog();
            }

        }

    }
    PlayerGroupLoopEnd();
    if ((lv_playingplayers <= 5) && (gv_gamemode == 8)) {
        UnitGroupLoopBegin(gv_heroesGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Evasion10", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesGame_Init () {
    gt_PlayerLeavesGame = TriggerCreate("gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheats
//--------------------------------------------------------------------------------------------------
bool gt_Cheats_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/54D96B4F"));
    gv_savedisabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cheats_Init () {
    gt_Cheats = TriggerCreate("gt_Cheats_Func");
    TriggerAddEventCheatUsed(gt_Cheats, c_playerAny, c_gameCheatAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Quits
//--------------------------------------------------------------------------------------------------
bool gt_PlayerQuits_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victory == true)) {
        GameOver(EventPlayer(), c_gameOverVictory, false, true);
    }
    else {
        GameOver(EventPlayer(), c_gameOverDefeat, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerQuits_Init () {
    gt_PlayerQuits = TriggerCreate("gt_PlayerQuits_Func");
    TriggerAddEventGameMenuItemSelected(gt_PlayerQuits, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Unlock Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitUnlockDialog_Func (bool testConds, bool runActions) {
    int auto69CF89E6_ae;
    int auto69CF89E6_ai;
    int auto3978B3CF_ae;
    int auto3978B3CF_ai;
    int auto7287937A_ae;
    int auto7287937A_ai;
    int auto498831D5_ae;
    int auto498831D5_ai;

    // Variable Declarations
    int lv_int;
    int lv_yoffset;
    int lv_xoffset;

    // Variable Initialization
    lv_yoffset = 100;
    lv_xoffset = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(700, 350, c_anchorLeft, 0, -150, true);
    gv_unlockDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(gv_unlockDialog), DialogGetHeight(gv_unlockDialog), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_mission_frame_massege.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/E783D037"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 500, 25, StringExternal("Param/Value/FFD700FD"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 640, 10, StringExternal("Param/Value/408638F6"), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    auto69CF89E6_ae = gv_decals;
    auto69CF89E6_ai = 1;
    lv_int = 0;
    for ( ; ( (auto69CF89E6_ai >= 0 && lv_int <= auto69CF89E6_ae) || (auto69CF89E6_ai <= 0 && lv_int >= auto69CF89E6_ae) ) ; lv_int += auto69CF89E6_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_unlockDialog, 50, 50, c_anchorTopLeft, lv_xoffset, lv_yoffset, StringToText(gv_playerdecalstring[lv_int]), StringToText(StringSub(gv_playerdecalstring[lv_int], 1, 2)), "");
        gv_decalDialogButtons[lv_int] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(gv_decalDialogButtons[lv_int], true, PlayerGroupAll());
        lv_xoffset = (lv_xoffset + 50);
        if ((lv_xoffset >= 210)) {
            lv_xoffset = 10;
            lv_yoffset = (lv_yoffset + 50);
        }

    }
    lv_xoffset = 490;
    lv_yoffset = 100;
    auto3978B3CF_ae = gv_camos;
    auto3978B3CF_ai = 1;
    lv_int = 1;
    for ( ; ( (auto3978B3CF_ai >= 0 && lv_int <= auto3978B3CF_ae) || (auto3978B3CF_ai <= 0 && lv_int >= auto3978B3CF_ae) ) ; lv_int += auto3978B3CF_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_unlockDialog, 50, 50, c_anchorTopLeft, lv_xoffset, lv_yoffset, StringToText(gv_playercamostring[lv_int]), StringToText(StringSub(gv_playercamostring[lv_int], 1, 2)), "");
        gv_camoDialogButtons[lv_int] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(gv_camoDialogButtons[lv_int], true, PlayerGroupAll());
        lv_xoffset = (lv_xoffset + 50);
        if ((lv_xoffset >= 690)) {
            lv_xoffset = 490;
            lv_yoffset = (lv_yoffset + 50);
        }

    }
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        gv_unlockDialogItems[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 45);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 400);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
        ActorSend(ActorFromDialogControl(gv_unlockDialogItems[PlayerGroupLoopCurrent()]), gv_rankActorMsg[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())]);
        auto7287937A_ae = gv_decals;
        auto7287937A_ai = 1;
        lv_int = 0;
        for ( ; ( (auto7287937A_ai >= 0 && lv_int <= auto7287937A_ae) || (auto7287937A_ai <= 0 && lv_int >= auto7287937A_ae) ) ; lv_int += auto7287937A_ai ) {
            if (((gv_playerdecalunlocked[lv_int][PlayerGroupLoopCurrent()] == true) || (lv_int == 0))) {
                libNtve_gf_SetDialogItemDesaturated(gv_decalDialogButtons[lv_int], false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            }

        }
        auto498831D5_ae = gv_camos;
        auto498831D5_ai = 1;
        lv_int = 1;
        for ( ; ( (auto498831D5_ai >= 0 && lv_int <= auto498831D5_ae) || (auto498831D5_ai <= 0 && lv_int >= auto498831D5_ae) ) ; lv_int += auto498831D5_ai ) {
            if ((gv_playercamounlocked[lv_int][PlayerGroupLoopCurrent()] == true)) {
                libNtve_gf_SetDialogItemDesaturated(gv_camoDialogButtons[lv_int], false, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            }

        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitUnlockDialog_Init () {
    gt_InitUnlockDialog = TriggerCreate("gt_InitUnlockDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitUnlockDialog, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -camo
//--------------------------------------------------------------------------------------------------
bool gt_Commandcamo_Func (bool testConds, bool runActions) {
    int auto81142D78_ae;
    int auto81142D78_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_changed;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_unlockDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto81142D78_ae = gv_camos;
    auto81142D78_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto81142D78_ai >= 0 && lv_loopint <= auto81142D78_ae) || (auto81142D78_ai <= 0 && lv_loopint >= auto81142D78_ae) ) ; lv_loopint += auto81142D78_ai ) {
        if ((gv_camoDialogButtons[lv_loopint] == EventDialogControl()) && (gv_playercamounlocked[lv_loopint][EventPlayer()] == true) && (UnitHasBehavior(gv_playerHeroes[EventPlayer()], "StonewallProtocol") == false)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/2C69FC93") + StringToText(gv_playercamostring[lv_loopint])));
            libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[EventPlayer()], gv_playercamoactormsg[lv_loopint]);
            ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), gv_playercamoactormsg[lv_loopint]);
            lv_changed = true;
            gv_playerCurrentCamo[EventPlayer()] = lv_loopint;
            if ((gv_camoDialogButtons[12] == EventDialogControl()) && (UnitGroupHasUnit(gv_octoCamos, gv_playerHeroes[EventPlayer()]) == false)) {
                UnitGroupAdd(gv_octoCamos, gv_playerHeroes[EventPlayer()]);
                if ((gv_octoLoop == false)) {
                    gv_octoLoop = true;
                    gf_OctoCamo();
                }

            }
            else {
                UnitGroupRemove(gv_octoCamos, gv_playerHeroes[EventPlayer()]);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandcamo_Init () {
    gt_Commandcamo = TriggerCreate("gt_Commandcamo_Func");
    TriggerAddEventDialogControl(gt_Commandcamo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -decal
//--------------------------------------------------------------------------------------------------
bool gt_Commanddecal_Func (bool testConds, bool runActions) {
    int autoF562B128_ae;
    int autoF562B128_ai;

    // Variable Declarations
    int lv_loopint;
    bool lv_changed;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_unlockDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_decalDialogButtons[0] == EventDialogControl())) {
        libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[EventPlayer()], gv_rankActorMsg[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())]);
        ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), gv_rankActorMsg[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())]);
        gv_playerCurrentDecal[EventPlayer()] = 0;
        lv_changed = true;
    }
    else {
        autoF562B128_ae = gv_decals;
        autoF562B128_ai = 1;
        lv_loopint = 1;
        for ( ; ( (autoF562B128_ai >= 0 && lv_loopint <= autoF562B128_ae) || (autoF562B128_ai <= 0 && lv_loopint >= autoF562B128_ae) ) ; lv_loopint += autoF562B128_ai ) {
            if ((gv_decalDialogButtons[lv_loopint] == EventDialogControl()) && (gv_playerdecalunlocked[lv_loopint][EventPlayer()] == true)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/9A2342F3") + StringToText(gv_playerdecalstring[lv_loopint])));
                libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[EventPlayer()], gv_playerdecalactormsg[lv_loopint]);
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), gv_playerdecalactormsg[lv_loopint]);
                gv_playerCurrentDecal[EventPlayer()] = lv_loopint;
                lv_changed = true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commanddecal_Init () {
    gt_Commanddecal = TriggerCreate("gt_Commanddecal_Func");
    TriggerAddEventDialogControl(gt_Commanddecal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init SI Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitSIDialog_Func (bool testConds, bool runActions) {
    int auto84D09E22_ae;
    int auto84D09E22_ai;

    // Variable Declarations
    int lv_int;
    int lv_yoffset;
    int lv_xoffset;

    // Variable Initialization
    lv_yoffset = 100;
    lv_xoffset = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(270, 350, c_anchorLeft, 0, -150, true);
    gv_sIDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(gv_sIDialog), DialogGetHeight(gv_sIDialog), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_storymode_subtitle_frame.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/23CA8AD1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 210, 10, StringExternal("Param/Value/AA2B658E"), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    auto84D09E22_ae = gv_sIcount;
    auto84D09E22_ai = 1;
    lv_int = 1;
    for ( ; ( (auto84D09E22_ai >= 0 && lv_int <= auto84D09E22_ae) || (auto84D09E22_ai <= 0 && lv_int >= auto84D09E22_ae) ) ; lv_int += auto84D09E22_ai ) {
        libNtve_gf_CreateDialogItemButton(gv_sIDialog, 50, 50, c_anchorTopLeft, lv_xoffset, lv_yoffset, StringExternal("Param/Value/97F03FCB"), StringToText(StringSub(gv_sIabbreviation[lv_int], 1, 2)), "");
        gv_sIDialogButtons[lv_int] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_int], true, PlayerGroupAll());
        lv_xoffset = (lv_xoffset + 50);
        if ((lv_xoffset >= 260)) {
            lv_xoffset = 10;
            lv_yoffset = (lv_yoffset + 50);
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/6EF7B591"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_sIDialogLabels[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 75, StringExternal("Param/Value/CF3259D1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_sIDialogLabels[2] = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitSIDialog_Init () {
    gt_InitSIDialog = TriggerCreate("gt_InitSIDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitSIDialog, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -si
//--------------------------------------------------------------------------------------------------
bool gt_Commandsi_Func (bool testConds, bool runActions) {
    int auto2632D3C9_ae;
    int auto2632D3C9_ai;
    int auto8DDC41E6_val;
    int auto87FD890C_n;
    int auto87FD890C_i;

    // Variable Declarations
    int lv_loopint;
    int lv_changed;
    text lv_text;
    int lv_sIindex;
    string lv_sIbehavior;

    // Variable Initialization
    lv_text = StringToText("");

    // Conditions
    if (testConds) {
        if (!((DialogIsVisible(gv_sIDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_sIDialogButtons[14] == EventDialogControl()) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != "CavalryScout")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/A5F37FCB"));
        return true;
    }

    if (((gv_sIDialogButtons[21] == EventDialogControl()) || (gv_sIDialogButtons[22] == EventDialogControl())) && ((gv_playerSIsused[1][EventPlayer()] == 21) || (gv_playerSIsused[1][EventPlayer()] == 22))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/5D5F6853"));
        return true;
    }

    if ((gv_sIDialogButtons[18] == EventDialogControl()) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != "Rifleman")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/BA534DF3"));
        return true;
    }

    if ((gv_sIDialogButtons[19] == EventDialogControl()) && (UnitGetType(gv_playerHeroes[EventPlayer()]) != "CombatMedic")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/18A1F20C"));
        return true;
    }

    auto2632D3C9_ae = gv_sIcount;
    auto2632D3C9_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto2632D3C9_ai >= 0 && lv_loopint <= auto2632D3C9_ae) || (auto2632D3C9_ai <= 0 && lv_loopint >= auto2632D3C9_ae) ) ; lv_loopint += auto2632D3C9_ai ) {
        if ((gv_playerHeroes[EventPlayer()] != null) && (gv_sIDialogButtons[lv_loopint] == EventDialogControl()) && (gv_sIunlocked[lv_loopint][EventPlayer()] == true) && (gv_playerSIcount[EventPlayer()] < 2) && (gv_playerSIsused[1][EventPlayer()] != lv_loopint) && (gv_playerSIsused[2][EventPlayer()] == 0) && (gv_sIXPminimum[gv_playerRankSet[EventPlayer()]][lv_loopint] != 0)) {
            if ((gv_playerSIsused[1][EventPlayer()] == 0)) {
                lv_sIindex = 1;
                gv_playerSIsused[1][EventPlayer()] = lv_loopint;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/35DB3BB0") + gv_sIname[lv_loopint]));
            }
            else {
                lv_sIindex = 2;
                gv_playerSIsused[2][EventPlayer()] = lv_loopint;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/8BB29F37") + gv_sIname[lv_loopint]));
            }
            libNtve_gf_SetDialogItemDesaturated(gv_sIDialogButtons[lv_loopint], true, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemDesaturationColor(gv_sIDialogButtons[lv_loopint], Color(100.00, 50.20, 25.10), PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemText(gv_sIDialogLabels[lv_sIindex], gv_sIname[lv_loopint], PlayerGroupSingle(EventPlayer()));
            lv_changed = lv_loopint;
            break;
        }

    }
    auto8DDC41E6_val = lv_changed;
    if (auto8DDC41E6_val == 0) {
        return true;
    }
    else if (auto8DDC41E6_val == 1) {
        lv_sIbehavior = "ReactiveFire";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "ReactiveFire", gv_playerHeroes[EventPlayer()], 1);
        gf_RegisterUnitTakesDamageEvent(gt_ReactiveFire, gv_playerHeroes[EventPlayer()], c_unitDamageEither, c_unitDamageTypeAny, null);
        TriggerEnable(gt_ReactiveFire, true);
    }
    else if (auto8DDC41E6_val == 2) {
        lv_sIbehavior = "ToughAsNails";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "ToughAsNails", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 3) {
        lv_sIbehavior = "QuickThinking";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "QuickThinking", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 4) {
        lv_sIbehavior = "Energetic";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Energetic", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 5) {
        lv_sIbehavior = "Hawkeye";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Hawkeye", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 6) {
        UnitCreateEffectUnit(gv_playerHeroes[EventPlayer()], "Discipline", gv_playerHeroes[EventPlayer()]);
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "QuikClot");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "GroundFlareItem");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "SmokeGrenadeItem");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "AmmoCase");
        UnitSetOwner(UnitInventoryLastCreated(), 0, true);
    }
    else if (auto8DDC41E6_val == 7) {
        lv_sIbehavior = "TwinkleToes";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "TwinkleToes", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 8) {
    }
    else if (auto8DDC41E6_val == 9) {
        lv_sIbehavior = "Intellectual";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Intellectual", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 10) {
        lv_sIbehavior = "BornToLead";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "BornToLead", gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 11) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Barbaric", 1);
    }
    else if (auto8DDC41E6_val == 12) {
        lv_sIbehavior = "Instructor";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 14) {
        UnitWeaponRemove(gv_playerHeroes[EventPlayer()], "Carbine");
        UnitWeaponAdd(gv_playerHeroes[EventPlayer()], "SteelSaberCarbine", null);
        lv_sIbehavior = "STS";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 15) {
        auto87FD890C_n = 5;
        for (auto87FD890C_i = 1; auto87FD890C_i <= auto87FD890C_n; auto87FD890C_i += 1) {
            UnitInventoryCreate(gv_playerHeroes[EventPlayer()], "EnergyCell");
            UnitSetOwner(UnitInventoryLastCreated(), 0, true);
        }
    }
    else if (auto8DDC41E6_val == 16) {
        lv_sIbehavior = "WhizKid";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 17) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gf_randomminitype(), c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_playerHeroes[EventPlayer()]));
    }
    else if (auto8DDC41E6_val == 18) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Grenadier", 1);
    }
    else if (auto8DDC41E6_val == 19) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BloodinBloodOut", 1);
    }
    else if (auto8DDC41E6_val == 20) {
        lv_sIbehavior = "Veteran";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 21) {
        lv_sIbehavior = "LightArmor";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 22) {
        lv_sIbehavior = "HeavyArmor";
        UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], lv_sIbehavior, gv_playerHeroes[EventPlayer()], 1);
    }
    else if (auto8DDC41E6_val == 23) {
        gv_playerEncumbrance[EventPlayer()] = FixedToInt((gv_playerEncumbrance[EventPlayer()] * 1.6));
    }
    else {
    }
    gv_playerSIbehaviors[lv_sIindex][EventPlayer()] = lv_sIbehavior;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandsi_Init () {
    gt_Commandsi = TriggerCreate("gt_Commandsi_Func");
    TriggerAddEventDialogControl(gt_Commandsi, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SI Discipline XP Bonus
//--------------------------------------------------------------------------------------------------
bool gt_SIDisciplineXPBonus_Func (bool testConds, bool runActions) {
    int autoBEA3C255_n;
    int autoBEA3C255_i;

    // Variable Declarations
    int lv_int;

    // Variable Initialization
    lv_int = FixedToInt(((EventUnitXPDelta() * 0.12) * 10.0));

    // Conditions
    if (testConds) {
        if (!((EventUnitXPDelta() >= 4.0))) {
            return false;
        }

        if (!(((gv_playerSIsused[1][EventPlayer()] == 8) || (gv_playerSIsused[2][EventPlayer()] == 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBEA3C255_n = lv_int;
    for (autoBEA3C255_i = 1; autoBEA3C255_i <= autoBEA3C255_n; autoBEA3C255_i += 1) {
        UnitCreateEffectUnit(EventUnit(), "AddXP12", EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SIDisciplineXPBonus_Init () {
    gt_SIDisciplineXPBonus = TriggerCreate("gt_SIDisciplineXPBonus_Func");
    TriggerAddEventUnitGainExperience(gt_SIDisciplineXPBonus, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactive Fire
//--------------------------------------------------------------------------------------------------
bool gt_ReactiveFire_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnitDamageSourceUnit(), "ReactiveFire") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "ReactiveFire", 1);
    Wait(8.0, c_timeGame);
    UnitBehaviorAdd(EventUnitDamageSourceUnit(), "ReactiveFire", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReactiveFire_Init () {
    gt_ReactiveFire = TriggerCreate("gt_ReactiveFire_Func");
    TriggerEnable(gt_ReactiveFire, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Self Aid
//--------------------------------------------------------------------------------------------------
bool gt_SelfAid_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((RandomInt(0, 1) == 1))) {
            return false;
        }

        if (!(((gv_playerSIsused[1][UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))] == 13) || (gv_playerSIsused[2][UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))] == 13)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitSource), "SelfAidPeriod", EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelfAid_Init () {
    gt_SelfAid = TriggerCreate("gt_SelfAid_Func");
    TriggerAddEventPlayerEffectUsed(gt_SelfAid, c_playerAny, "SelfAidPeriod");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power User Ecell
//--------------------------------------------------------------------------------------------------
bool gt_PowerUserEcell_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_playerSIsused[1][UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))] == 15) || (gv_playerSIsused[2][UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))] == 15)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "EnergyCellSIPU", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerUserEcell_Init () {
    gt_PowerUserEcell = TriggerCreate("gt_PowerUserEcell_Func");
    TriggerAddEventPlayerEffectUsed(gt_PowerUserEcell, c_playerAny, "EnergyCell");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Functional Buttons
//--------------------------------------------------------------------------------------------------
bool gt_FunctionalButtons_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogCreate(250, 230, c_anchorBottom, gv_funcdialogoffsets[1][PlayerGroupLoopCurrent()], gv_funcdialogoffsets[2][PlayerGroupLoopCurrent()], true);
        gv_functionaldialog[PlayerGroupLoopCurrent()] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_frame_small_base_zerg.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 25, 5, StringExternal("Param/Value/8ABEAB6E"), StringExternal("Param/Value/DB868C6D"), "");
        gv_functionaldialogbuttons[1][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 25, 55, StringExternal("Param/Value/D39C7F24"), StringExternal("Param/Value/CFBF0ADD"), "");
        gv_functionaldialogbuttons[2][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 25, 105, StringExternal("Param/Value/E0FB57BE"), StringExternal("Param/Value/34D79737"), "");
        gv_functionaldialogbuttons[3][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 25, 155, StringExternal("Param/Value/E17425A7"), StringExternal("Param/Value/15B5821E"), "");
        gv_functionaldialogbuttons[4][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 75, 5, StringExternal("Param/Value/F631A2B9"), StringExternal("Param/Value/74D77B21"), "");
        gv_functionaldialogbuttons[5][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 75, 55, StringExternal("Param/Value/F6D0479C"), StringExternal("Param/Value/169C43DF"), "");
        gv_functionaldialogbuttons[6][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 75, 105, StringExternal("Param/Value/DDE72C32"), StringExternal("Param/Value/FE35E9DE"), "");
        gv_functionaldialogbuttons[7][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 75, 155, StringExternal("Param/Value/0664952A"), StringExternal("Param/Value/BC915366"), "");
        gv_functionaldialogbuttons[8][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 175, 5, StringExternal("Param/Value/7B855546"), StringExternal("Param/Value/E79239E7"), "");
        gv_functionaldialogbuttons[9][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 175, 55, StringExternal("Param/Value/B22C5570"), StringExternal("Param/Value/463F6B4F"), "");
        gv_functionaldialogbuttons[10][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 175, 105, StringExternal("Param/Value/D9005978"), StringExternal("Param/Value/2EB1E325"), "");
        gv_functionaldialogbuttons[11][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 175, 155, StringExternal("Param/Value/84564957"), StringExternal("Param/Value/F78BE136"), "");
        gv_functionaldialogbuttons[12][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 125, 5, StringExternal("Param/Value/707AE009"), StringExternal("Param/Value/B555A50A"), "");
        gv_functionaldialogbuttons[13][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 125, 5, StringToText(""), "Assets\\Textures\\btn-research-terran-microfiltering.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 125, 55, StringExternal("Param/Value/512C461A"), StringExternal("Param/Value/1F702B62"), "");
        gv_functionaldialogbuttons[14][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 125, 55, StringToText(""), "Assets\\Textures\\btn-ability-terran-holdfire.dds", c_triggerImageTypeNormal, true, Color(22*100/255,128*100/255,0), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 125, 105, StringExternal("Param/Value/37BF3329"), StringExternal("Param/Value/EBF21479"), "");
        gv_functionaldialogbuttons[15][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_functionaldialog[PlayerGroupLoopCurrent()], 50, 50, c_anchorTopLeft, 125, 155, StringExternal("Param/Value/C99970DE"), StringExternal("Param/Value/AC3B8B1E"), "");
        gv_functionaldialogbuttons[16][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        DialogSetVisible(gv_functionaldialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FunctionalButtons_Init () {
    gt_FunctionalButtons = TriggerCreate("gt_FunctionalButtons_Func");
    TriggerAddEventTimeElapsed(gt_FunctionalButtons, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button in
//--------------------------------------------------------------------------------------------------
bool gt_Buttonin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentrank;
    text lv_temptext;

    // Variable Initialization
    lv_currentrank = gf_GetPlayerRank(EventPlayer());
    lv_temptext = StringToText("");

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[4][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_temptext = (lv_temptext + (StringExternal("Param/Value/481228C9") + gv_rankPrefix[gv_playerRankSet[EventPlayer()]][lv_currentrank]));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/115E3EFF"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/609030F9") + IntToText(gv_rankXPMin[gv_playerRankSet[EventPlayer()]][(lv_currentrank + 1)]) + StringExternal("Param/Value/A0D0A31B") + gv_rankPrefix[gv_playerRankSet[EventPlayer()]][(lv_currentrank + 1)]));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/293939B9"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/CB5CD47F") + IntToText(gv_playerExperience[1][EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/C4B47F24"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/93D257F7") + IntToText(gv_playerExperience[2][EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/FFC7D2D4"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/DE9AADC6") + IntToText(gv_playerExperience[3][EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/0539EE70"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/7D2BBC40") + IntToText(gv_playerGamesPlayed[EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/DED423CC"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/081C8355") + IntToText(gv_playerAvgGameTime[EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/C118A058"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/E8FC2ABC") + IntToText(gv_playerRevives[EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/15D405EB"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/BCAEB1A7") + IntToText(gv_playerhits[EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/4D8370B8"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/0F0DFC81") + IntToText(gv_playerkills[EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/0EF6F40B"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/AF54E3EB") + IntToText(gv_playermassivekills[EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/5A5824A3"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/72216498") + IntToText(gv_playerDeaths[EventPlayer()])));
    lv_temptext = (lv_temptext + StringExternal("Param/Value/BCE492C9"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/5D6A51E1") + IntToText(gv_playerRevives[EventPlayer()])));
    if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatMedic")) {
        lv_temptext = (lv_temptext + StringExternal("Param/Value/93AED85A"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/1BE93F8F") + IntToText(gv_playerheals[EventPlayer()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/C1D01006"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/31496AF6") + IntToText(gv_playerRevivesGame[EventPlayer()])));
    }

    if ((gv_gamemode == 6)) {
        lv_temptext = (lv_temptext + StringExternal("Param/Value/0E4C28F5"));
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/F8A43AA2") + IntToText(gv_playerRoundWins[EventPlayer()])));
    }

    lv_temptext = (lv_temptext + StringExternal("Param/Value/5B010E07"));
    lv_temptext = (lv_temptext + (StringExternal("Param/Value/28D9FC98") + IntToText((gv_playerExperience[gv_playerRankSet[EventPlayer()]][EventPlayer()] - gv_playerStartingXP[EventPlayer()]))));
    gf_VisorTextDialog(lv_temptext, EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buttonin_Init () {
    gt_Buttonin = TriggerCreate("gt_Buttonin_Func");
    TriggerAddEventDialogControl(gt_Buttonin, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button TL
//--------------------------------------------------------------------------------------------------
bool gt_ButtonTL_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[1][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == true) && (libNtve_gf_PlayerIsEnemy(PlayerGroupLoopCurrent(), EventPlayer(), libNtve_ge_PlayerRelation_AllyMutual) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), 7.0, 270.0);
            PingSetUnit(PingLastCreated(), gv_playerHeroes[PlayerGroupLoopCurrent()]);
            PingSetTooltip(PingLastCreated(), PlayerName(PlayerGroupLoopCurrent()));
        }

    }
    PlayerGroupLoopEnd();
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonTL_Init () {
    gt_ButtonTL = TriggerCreate("gt_ButtonTL_Func");
    TriggerAddEventDialogControl(gt_ButtonTL, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Dead
//--------------------------------------------------------------------------------------------------
bool gt_ButtonDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[2][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == false) && (gv_playerHeroes[PlayerGroupLoopCurrent()] != null)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimple", UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), 7.0, 270.0);
            PingSetUnit(PingLastCreated(), gv_playerHeroes[PlayerGroupLoopCurrent()]);
            PingSetTooltip(PingLastCreated(), PlayerName(PlayerGroupLoopCurrent()));
        }

    }
    PlayerGroupLoopEnd();
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonDead_Init () {
    gt_ButtonDead = TriggerCreate("gt_ButtonDead_Func");
    TriggerAddEventDialogControl(gt_ButtonDead, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button SQ
//--------------------------------------------------------------------------------------------------
bool gt_ButtonSQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;

    // Variable Initialization
    lv_temptext = StringToText("");

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[3][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((EventPlayer() == PlayerGroupLoopCurrent())) {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/43232507"));
        }
        else {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/FDE834A0"));
        }
        lv_temptext = (lv_temptext + StringExternal("Param/Value/D92CF6D7"));
        lv_temptext = (lv_temptext + gv_rankPrefix[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())]);
        lv_temptext = (lv_temptext + StringExternal("Param/Value/90671BA3"));
        lv_temptext = (lv_temptext + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))));
        if ((gv_playerHeroes[PlayerGroupLoopCurrent()] != null)) {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/472325FF"));
            lv_temptext = (lv_temptext + TextWithColor(UnitTypeGetName(UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()])), Color(0.00, 84.31, 41.96)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/6D8039A9"));
            if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == true)) {
                lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/8F55BA73"));
            }
            else {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/E651AB63"));
            }
        }
        else {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/B07AD166"));
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusLeft)) {
                lv_temptext = (lv_temptext + TextWithColor(StringExternal("Param/Value/4D7EAC3E"), Color(50.20, 50.20, 50.20)));
            }
            else {
                lv_temptext = (lv_temptext + TextWithColor(StringExternal("Param/Value/3C469FFE"), Color(0.00, 84.31, 41.96)));
            }
        }
        lv_temptext = (lv_temptext + IntToText(PlayerGetPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/03F53302"));
        lv_temptext = ((lv_temptext + StringExternal("Param/Value/DDA9561D")) + IntToText(gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()]));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/F53E530D"));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/051BA04E"));
    }
    PlayerGroupLoopEnd();
    gf_VisorTextDialog(lv_temptext, EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonSQ_Init () {
    gt_ButtonSQ = TriggerCreate("gt_ButtonSQ_Func");
    TriggerAddEventDialogControl(gt_ButtonSQ, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button !
//--------------------------------------------------------------------------------------------------
bool gt_Button_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_attention;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[6][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_playerHeroes[EventPlayer()]) == true)) {
        libNtve_gf_AttachModelToUnit(gv_playerHeroes[EventPlayer()], "Exclamation", "Ref_Overhead");
        lv_attention = libNtve_gf_ActorLastCreated();
        Wait(5.0, c_timeGame);
        libNtve_gf_KillModel(lv_attention);
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.4, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Button_Init () {
    gt_Button = TriggerCreate("gt_Button_Func");
    TriggerAddEventDialogControl(gt_Button, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button cl
//--------------------------------------------------------------------------------------------------
bool gt_Buttoncl_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[8][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaAll);
    DialogControlFadeTransparency(gv_visorText[EventPlayer()], PlayerGroupAll(), 0.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buttoncl_Init () {
    gt_Buttoncl = TriggerCreate("gt_Buttoncl_Func");
    TriggerAddEventDialogControl(gt_Buttoncl, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button Weapons Hold
//--------------------------------------------------------------------------------------------------
bool gt_ButtonWeaponsHold_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[14][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupSelected(EventPlayer()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeBiological) == true) && (UnitGetOwner(UnitGroupLoopCurrent()) == EventPlayer())) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "WeaponsHold") == false)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "WeaponsHold", UnitGroupLoopCurrent(), 1);
            }
            else {
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "WeaponsHold", 1);
            }
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonWeaponsHold_Init () {
    gt_ButtonWeaponsHold = TriggerCreate("gt_ButtonWeaponsHold_Func");
    TriggerAddEventDialogControl(gt_ButtonWeaponsHold, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button NODs
//--------------------------------------------------------------------------------------------------
bool gt_ButtonNODs_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[13][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerNODson[EventPlayer()] == false)) {
        gv_playerNODson[EventPlayer()] = true;
        SoundPlay(SoundLink("NODOn", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if ((gv_currentlighting == "UA3Night")) {
            PlayerSetLighting(EventPlayer(), "NODs", 2.0);
        }
        else {
            PlayerSetLighting(EventPlayer(), "NODsBright", 2.0);
        }
    }
    else {
        gv_playerNODson[EventPlayer()] = false;
        SoundPlay(SoundLink("NODOff", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        PlayerSetLighting(EventPlayer(), gv_currentlighting, 0.8);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonNODs_Init () {
    gt_ButtonNODs = TriggerCreate("gt_ButtonNODs_Func");
    TriggerAddEventDialogControl(gt_ButtonNODs, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button nudge l
//--------------------------------------------------------------------------------------------------
bool gt_Buttonnudgel_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[9][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetPosition(gv_functionaldialog[EventPlayer()], c_anchorBottom, (DialogGetOffsetX(gv_functionaldialog[EventPlayer()]) - 25), DialogGetOffsetY(gv_functionaldialog[EventPlayer()]));
    gv_funcdialogoffsets[1][EventPlayer()] = (gv_funcdialogoffsets[1][EventPlayer()] - 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buttonnudgel_Init () {
    gt_Buttonnudgel = TriggerCreate("gt_Buttonnudgel_Func");
    TriggerAddEventDialogControl(gt_Buttonnudgel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button nudge r
//--------------------------------------------------------------------------------------------------
bool gt_Buttonnudger_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[10][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetPosition(gv_functionaldialog[EventPlayer()], c_anchorBottom, (DialogGetOffsetX(gv_functionaldialog[EventPlayer()]) + 25), DialogGetOffsetY(gv_functionaldialog[EventPlayer()]));
    gv_funcdialogoffsets[1][EventPlayer()] = (gv_funcdialogoffsets[1][EventPlayer()] + 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buttonnudger_Init () {
    gt_Buttonnudger = TriggerCreate("gt_Buttonnudger_Func");
    TriggerAddEventDialogControl(gt_Buttonnudger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button nudge u
//--------------------------------------------------------------------------------------------------
bool gt_Buttonnudgeu_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[11][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetPosition(gv_functionaldialog[EventPlayer()], c_anchorBottom, DialogGetOffsetX(gv_functionaldialog[EventPlayer()]), (DialogGetOffsetY(gv_functionaldialog[EventPlayer()]) + 25));
    gv_funcdialogoffsets[2][EventPlayer()] = (gv_funcdialogoffsets[2][EventPlayer()] + 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buttonnudgeu_Init () {
    gt_Buttonnudgeu = TriggerCreate("gt_Buttonnudgeu_Func");
    TriggerAddEventDialogControl(gt_Buttonnudgeu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button nudge d
//--------------------------------------------------------------------------------------------------
bool gt_Buttonnudged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[12][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetPosition(gv_functionaldialog[EventPlayer()], c_anchorBottom, DialogGetOffsetX(gv_functionaldialog[EventPlayer()]), (DialogGetOffsetY(gv_functionaldialog[EventPlayer()]) - 25));
    gv_funcdialogoffsets[2][EventPlayer()] = (gv_funcdialogoffsets[2][EventPlayer()] - 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buttonnudged_Init () {
    gt_Buttonnudged = TriggerCreate("gt_Buttonnudged_Func");
    TriggerAddEventDialogControl(gt_Buttonnudged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button SI
//--------------------------------------------------------------------------------------------------
bool gt_ButtonSI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[16][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_sIDialog, EventPlayer()) == false)) {
        DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_medalsDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonSI_Init () {
    gt_ButtonSI = TriggerCreate("gt_ButtonSI_Func");
    TriggerAddEventDialogControl(gt_ButtonSI, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button UN
//--------------------------------------------------------------------------------------------------
bool gt_ButtonUN_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[15][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_unlockDialog, EventPlayer()) == false)) {
        DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_medalsDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), true);
        if ((gv_playerHeroes[EventPlayer()] != null) && (gv_unitmodelsetup[EventPlayer()] == false)) {
            gv_unitmodelsetup[EventPlayer()] = true;
            DialogControlSetVisible(gv_unlockDialogItems[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), gv_playercamoactormsg[gv_playerCurrentCamo[EventPlayer()]]);
            if ((gv_playerCurrentDecal[EventPlayer()] == 0)) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), gv_rankActorMsg[gv_playerRankSet[EventPlayer()]][gf_GetPlayerRank(EventPlayer())]);
            }
            else {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), gv_playerdecalactormsg[gv_playerCurrentDecal[EventPlayer()]]);
            }
            if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Rifleman")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel BackPack {} {Back 0} Back_Attach");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatMedic")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel BackPack {} {Back 0} Back_Attach");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel MedicChemicals {} {Left 0} Arm_Left_Attach");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel MedicalScanVisor {} AMFilterHardpoint SOpAttachHardPoint04");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel Shield {} {Shield 0} Shield_Armour_Attach");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "AutomaticRifleman")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel AutoRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Flamethrower")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel FlameThrowerW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel FlameThrowerMask {} AMFilterHardpoint SOpAttachHardPoint04");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel TankPack {} {Back 0} Back_Attach");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel FlamethrowerWeaponFlame {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel FlamethrowerWeaponLight {} AMFilterWeapon00 SOpAttachWeapon00");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "SFAAT")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel ShotgunW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel CommsHeadset {} AMFilterHardpoint SOpAttachHardPoint04");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel CommsPack {} {Back 0} Back_Attach");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "CavalryScout")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel CommsPack {} {Back 0} Back_Attach");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel ScoutVisor {} AMFilterHardpoint SOpAttachHardPoint04");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "SquadDesignatedMarksman")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel SDMRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel Binoculars {} AMFilterHardpoint SOpAttachHardPoint04");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel Pistol {} {Left 0} Leg_Left_Attach");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel WaistPack {} {Waist 0} Waist_Attach");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "JavelinGunner2")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel BackPack {} {Back 0} Back_Attach");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel StandardVisionVisor {} AMFilterHardpoint SOpAttachHardPoint04");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "PlatoonLeader")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel ArrayPack {} {Back 0} Back_Attach");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel TacticalVisor {} AMFilterHardpoint SOpAttachHardPoint04");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "CombatEngineer")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel ShotgunW {} AMFilterWeapon00 SOpAttachWeapon00");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "Cyborg")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel AutoRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel AmmoBackPack {} {Back 0} Back_Attach");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel ScoutVisor {} AMFilterHardpoint SOpAttachHardPoint04");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel CommsHeadset {} AMFilterHardpoint SOpAttachHardPoint04");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "GhostHero")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel PlasmaRifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel Binoculars {} AMFilterHardpoint SOpAttachHardPoint04");
            }
            else if ((UnitGetType(gv_playerHeroes[EventPlayer()]) == "FireSupportSpecialist")) {
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel RifleW {} AMFilterWeapon00 SOpAttachWeapon00");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel CommsHeadset {} AMFilterHardpoint SOpAttachHardPoint04");
                ActorSend(ActorFromDialogControl(gv_unlockDialogItems[EventPlayer()]), "AttachModel CommsPack {} {Back 0} Back_Attach");
            }
        }
        else {
            if ((gv_unitmodelsetup[EventPlayer()] == false)) {
                DialogControlSetVisible(gv_unlockDialogItems[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
            }

        }
    }
    else {
        DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonUN_Init () {
    gt_ButtonUN = TriggerCreate("gt_ButtonUN_Func");
    TriggerAddEventDialogControl(gt_ButtonUN, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button ME
//--------------------------------------------------------------------------------------------------
bool gt_ButtonME_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_functionaldialogbuttons[7][EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_medalsDialog, EventPlayer()) == false)) {
        DialogSetVisible(gv_medalsDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_medalsDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ButtonME_Init () {
    gt_ButtonME = TriggerCreate("gt_ButtonME_Func");
    TriggerAddEventDialogControl(gt_ButtonME, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Esc Button
//--------------------------------------------------------------------------------------------------
bool gt_EscButton_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogSetVisible(gv_unlockDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_sIDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_medalsDialog, PlayerGroupSingle(EventPlayer()), false);
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscButton_Init () {
    gt_EscButton = TriggerCreate("gt_EscButton_Func");
    TriggerAddEventKeyPressed(gt_EscButton, c_playerAny, c_keyEscape, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -reset
//--------------------------------------------------------------------------------------------------
bool gt_Commandreset_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/55D243F2"));
    gv_funcdialogoffsets[1][EventPlayer()] = 325;
    gv_funcdialogoffsets[2][EventPlayer()] = -5;
    DialogSetPosition(gv_functionaldialog[EventPlayer()], c_anchorBottom, gv_funcdialogoffsets[1][EventPlayer()], gv_funcdialogoffsets[2][EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandreset_Init () {
    gt_Commandreset = TriggerCreate("gt_Commandreset_Func");
    TriggerAddEventChatMessage(gt_Commandreset, c_playerAny, "-reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -s
//--------------------------------------------------------------------------------------------------
bool gt_Commands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_shells;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringSub(EventChatMessage(false), 1, 3) != "-si"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-s")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/9312D7AB") + IntToText(gv_iDFShells[EventPlayer()])));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/0DC65D8B") + IntToText(gv_iDFShellsGlobal)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/6900DD88") + FixedToText(gv_iDFRadius[EventPlayer()], c_fixedPrecisionAny)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/273EA510"));
    }
    else {
        lv_shells = StringToInt(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false))));
        if ((lv_shells >= 1) && (lv_shells <= 10)) {
            gv_iDFShells[EventPlayer()] = lv_shells;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/588555F2") + IntToText(gv_iDFShells[EventPlayer()])));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/EAF6A37F"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commands_Init () {
    gt_Commands = TriggerCreate("gt_Commands_Func");
    TriggerAddEventChatMessage(gt_Commands, c_playerAny, "-s", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -r
//--------------------------------------------------------------------------------------------------
bool gt_Commandr_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_radius;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) == "-r"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-r")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/E10D16E1") + IntToText(gv_iDFShells[EventPlayer()])));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/1492DDA9") + IntToText(gv_iDFShellsGlobal)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/C1E65828") + FixedToText(gv_iDFRadius[EventPlayer()], c_fixedPrecisionAny)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/35C3BDE6"));
    }
    else {
        lv_radius = FixedToInt(StringToFixed(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false)))));
        if ((lv_radius >= 2) && (lv_radius <= 10)) {
            gv_iDFRadius[EventPlayer()] = lv_radius;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/BF89A89C") + FixedToText(gv_iDFRadius[EventPlayer()], c_fixedPrecisionAny)));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/C0B72C6F"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandr_Init () {
    gt_Commandr = TriggerCreate("gt_Commandr_Func");
    TriggerAddEventChatMessage(gt_Commandr, c_playerAny, "-r", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -d
//--------------------------------------------------------------------------------------------------
bool gt_Commandd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distro;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) == "-d"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-d")) {
        if ((gv_iDFDistro[EventPlayer()] == -1.0)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/C92912D2"));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/F2AE1916") + FixedToText(gv_iDFDistro[EventPlayer()], c_fixedPrecisionAny)));
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/2A796559"));
    }
    else {
        if ((EventChatMessage(false) == "-d c")) {
            gv_iDFDistro[EventPlayer()] = -1.0;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/CED75662"));
        }
        else {
            lv_distro = FixedToInt(StringToFixed(StringSub(EventChatMessage(false), 4, StringLength(EventChatMessage(false)))));
            if ((lv_distro >= 0.0) && (lv_distro <= 360.0)) {
                gv_iDFDistro[EventPlayer()] = lv_distro;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/EFC08090") + FixedToText(gv_iDFDistro[EventPlayer()], c_fixedPrecisionAny)));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/0639CCFB"));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandd_Init () {
    gt_Commandd = TriggerCreate("gt_Commandd_Func");
    TriggerAddEventChatMessage(gt_Commandd, c_playerAny, "-d", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command -i
//--------------------------------------------------------------------------------------------------
bool gt_Commandi_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_player;
    fixed lv_interval;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((StringEqual(StringWord(lv_message, 1), "-i", c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-i")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/1A8B9AC2") + FixedToText(gv_iDFInterval[EventPlayer()], c_fixedPrecisionAny)));
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/784D7762"));
    }
    else {
        lv_interval = StringToFixed(StringWord(EventChatMessage(false), 2));
        if ((lv_interval >= 0.2) && (lv_interval <= 5.0)) {
            gv_iDFInterval[EventPlayer()] = lv_interval;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/48B5F86D") + FixedToText(gv_iDFInterval[EventPlayer()], c_fixedPrecisionAny)));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/94A89AA7"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Commandi_Init () {
    gt_Commandi = TriggerCreate("gt_Commandi_Func");
    TriggerAddEventChatMessage(gt_Commandi, c_playerAny, "-i", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Command '
//--------------------------------------------------------------------------------------------------
bool gt_Command_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((StringSub(EventChatMessage(false), 1, 2) == "' "))) {
            return false;
        }

        if (!((UnitIsAlive(gv_playerHeroes[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TextChat(gv_playerHeroes[EventPlayer()], (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/54C2FDC8") + StringToText(StringSub(EventChatMessage(false), 3, StringLength(EventChatMessage(false))))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Command_Init () {
    gt_Command = TriggerCreate("gt_Command_Func");
    TriggerAddEventChatMessage(gt_Command, c_playerAny, "' ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SITREP Abil
//--------------------------------------------------------------------------------------------------
bool gt_SITREPAbil_Func (bool testConds, bool runActions) {
    int auto3B4015C7_ae;
    int auto3B4015C7_ai;

    // Variable Declarations
    text lv_temptext;
    text lv_floattext;
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerHeroes[PlayerGroupLoopCurrent()] != null) && ((UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) || (gf_UnitHighestAilment(gv_playerHeroes[PlayerGroupLoopCurrent()]) > 0))) {
            lv_floattext = StringToText("");
            if ((EventPlayer() == PlayerGroupLoopCurrent())) {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/BAEEE9DB"));
            }
            else {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/99808ACD"));
            }
            lv_temptext = (lv_temptext + StringExternal("Param/Value/7E482560"));
            lv_temptext = (lv_temptext + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/EC8B27CD"));
            lv_temptext = (lv_temptext + TextWithColor(UnitTypeGetName(UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()])), Color(0.00, 84.31, 41.96)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/9FA03715"));
            if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == true)) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), gv_playerHeroes[PlayerGroupLoopCurrent()]);
                PingSetTooltip(PingLastCreated(), PlayerName(PlayerGroupLoopCurrent()));
                lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                if ((UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/E52C3367"));
                    lv_floattext = (lv_floattext + StringExternal("Param/Value/AA4E300A"));
                }
                else {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/C5F018F7"));
                }
                auto3B4015C7_ae = gv_ailmentCount;
                auto3B4015C7_ai = 1;
                lv_int = 0;
                for ( ; ( (auto3B4015C7_ai >= 0 && lv_int <= auto3B4015C7_ae) || (auto3B4015C7_ai <= 0 && lv_int >= auto3B4015C7_ae) ) ; lv_int += auto3B4015C7_ai ) {
                    if ((UnitHasBehavior(gv_playerHeroes[PlayerGroupLoopCurrent()], gv_ailments[lv_int]) == true)) {
                        lv_temptext = (lv_temptext + gf_TextImage(gv_ailmentImages[lv_int], 22));
                        lv_floattext = (lv_floattext + gf_TextImage(gv_ailmentImages[lv_int], 22));
                    }

                }
                gf_FloatingTextforPlayer(gv_playerHeroes[PlayerGroupLoopCurrent()], lv_floattext, EventPlayer());
                lv_temptext = (lv_temptext + StringExternal("Param/Value/C91EEAAE"));
            }
            else {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/A6579463"));
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "PingSimpleSmall", UnitGetPosition(gv_playerHeroes[PlayerGroupLoopCurrent()]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), 7.0, 270.0);
                PingSetUnit(PingLastCreated(), gv_playerHeroes[PlayerGroupLoopCurrent()]);
                PingSetTooltip(PingLastCreated(), PlayerName(PlayerGroupLoopCurrent()));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/1F81FAB2"));
            }
            gf_VisorTextDialog(lv_temptext, EventPlayer());
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SITREPAbil_Init () {
    gt_SITREPAbil = TriggerCreate("gt_SITREPAbil_Func");
    TriggerAddEventUnitAbility(gt_SITREPAbil, null, AbilityCommand("SITREP", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init HUD Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitHUDDialog_Func (bool testConds, bool runActions) {
    int auto03CC941D_ae;
    int auto03CC941D_ai;
    int auto22E7E27B_ae;
    int auto22E7E27B_ai;

    // Variable Declarations
    int lv_int;
    int lv_int2;
    int lv_yoffset;
    int lv_xoffset;
    text lv_temptext;

    // Variable Initialization
    lv_yoffset = 10;
    lv_xoffset = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ShowHUDDialog, true);
    DialogCreate(1020, (70 + (25 * PlayerGroupCount(gv_players))), c_anchorTop, 0, 75, true);
    gv_hUDDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(gv_hUDDialog), DialogGetHeight(gv_hUDDialog), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_mission_frame_massege.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_hUDDialogItems[0][14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 60, lv_yoffset, StringExternal("Param/Value/36858262"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTopLeft, 260, lv_yoffset, StringExternal("Param/Value/D1F53B02"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 310, lv_yoffset, StringExternal("Param/Value/8A0AD94A"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 50, c_anchorTopLeft, 460, lv_yoffset, StringExternal("Param/Value/AB35122D"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 585, lv_yoffset, StringExternal("Param/Value/AE97DC7D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/A71D7B68"), PlayerGroupAll());
    gv_hUDDialogItems[0][13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 785, lv_yoffset, StringExternal("Param/Value/EC6A5087"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/29D5691B"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 50, c_anchorTopLeft, 900, lv_yoffset, StringExternal("Param/Value/915AF581"), Color(100,100,100), false, 2.0);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_yoffset = (60 + (lv_int * 25));
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 10, lv_yoffset, gv_rankPrefix[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], gv_rankDecal[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_hUDDialogItems[1][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_rankPrefix[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 60, lv_yoffset, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
        gv_hUDDialogItems[2][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/F9C3C11D") + IntToText(gv_playerExperience[1][PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/95764900") + IntToText(gv_playerExperience[2][PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/3F1CF37F") + IntToText(gv_playerExperience[3][PlayerGroupLoopCurrent()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/0F25A002"));
        auto03CC941D_ae = gv_medalscount;
        auto03CC941D_ai = 1;
        lv_int2 = 1;
        for ( ; ( (auto03CC941D_ai >= 0 && lv_int2 <= auto03CC941D_ae) || (auto03CC941D_ai <= 0 && lv_int2 >= auto03CC941D_ae) ) ; lv_int2 += auto03CC941D_ai ) {
            if ((gv_medalsunlocked[lv_int2][PlayerGroupLoopCurrent()] == true)) {
                lv_temptext = (lv_temptext + StringToText(gv_medalsnames[lv_int2]));
            }

        }
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_temptext, PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 25, c_anchorTopLeft, 260, lv_yoffset, IntToText(UnitLevel(gv_playerHeroes[PlayerGroupLoopCurrent()])), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[3][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 25, c_anchorTopLeft, 310, lv_yoffset, UnitTypeGetName(UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()])), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[4][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 25, c_anchorTopLeft, 460, lv_yoffset, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[5][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerkills[PlayerGroupLoopCurrent()])), Color(79.61, 59.22, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/D4B3B4D8"));
        lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerhits[PlayerGroupLoopCurrent()])), Color(50.20, 50.20, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/2EACBF1C"));
        lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropMovementSpeed, c_unitPropCurrent), 2), Color(100.00, 50.20, 25.10)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/FAAB7EDD"));
        lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerRevives[PlayerGroupLoopCurrent()])), Color(100.00, 100.00, 0.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/776C0EA9"));
        lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerheals[PlayerGroupLoopCurrent()])), Color(100.00, 100.00, 0.00)));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 25, c_anchorTopLeft, 585, lv_yoffset, lv_temptext, ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/36F23E00") + IntToText(gv_playerkills[PlayerGroupLoopCurrent()])), Color(79.61, 59.22, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/ACFFD7E1"));
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/E0D27A9D") + IntToText(gv_playerhits[PlayerGroupLoopCurrent()])), Color(50.20, 50.20, 100.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/4FDDC571"));
        lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropMovementSpeed, c_unitPropCurrent), 2), Color(100.00, 50.20, 25.10)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/9EB76214"));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/622511DB"));
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/1FEF43A0") + IntToText(gv_playerRevives[PlayerGroupLoopCurrent()])), Color(100.00, 100.00, 0.00)));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/8A7D0181"));
        lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/32681275") + IntToText(gv_playerheals[PlayerGroupLoopCurrent()])), Color(0.00, 100.00, 50.20)));
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_temptext, PlayerGroupAll());
        gv_hUDDialogItems[6][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 75, 25, c_anchorTopLeft, 785, lv_yoffset, IntToText(gv_playerGamesPlayed[PlayerGroupLoopCurrent()]), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[7][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 25, c_anchorTopLeft, 900, lv_yoffset, StringExternal("Param/Value/4210CFA0"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hUDDialogItems[8][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        lv_temptext = StringToText("");
        auto22E7E27B_ae = 8;
        auto22E7E27B_ai = 1;
        lv_int2 = 1;
        for ( ; ( (auto22E7E27B_ai >= 0 && lv_int2 <= auto22E7E27B_ae) || (auto22E7E27B_ai <= 0 && lv_int2 >= auto22E7E27B_ae) ) ; lv_int2 += auto22E7E27B_ai ) {
            lv_temptext = (lv_temptext + (StringExternal("Param/Value/EEB56F8E") + gv_gamemodename[lv_int2] + StringExternal("Param/Value/0B352CA8") + IntToText(gv_gamesWon[lv_int2][PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/91FA21A5")));
        }
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_temptext, PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 25, 25, c_anchorTopLeft, 985, lv_yoffset, (StringExternal("Param/Value/34BF4A3D") + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)))), StringToText(""), "");
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        gv_hUDDialogItems[9][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        lv_int = (lv_int + 1);
        TriggerEnable(gt_HUDUpdate, true);
        TriggerExecute(gt_HUDUpdate, true, false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitHUDDialog_Init () {
    gt_InitHUDDialog = TriggerCreate("gt_InitHUDDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitHUDDialog, 1.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show HUD Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ShowHUDDialog_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((DialogIsVisible(gv_hUDDialog, EventPlayer()) == false)) {
        SoundPlay(SoundLink("UI_Starmap_Popup", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        SoundPlay(SoundLink("UI_ScreenWipe", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        DialogSetVisible(gv_hUDDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    Wait(0.1, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHUDDialog_Init () {
    gt_ShowHUDDialog = TriggerCreate("gt_ShowHUDDialog_Func");
    TriggerEnable(gt_ShowHUDDialog, false);
    TriggerAddEventKeyPressed(gt_ShowHUDDialog, c_playerAny, c_keyBackSlash, false, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HUD Update
//--------------------------------------------------------------------------------------------------
bool gt_HUDUpdate_Func (bool testConds, bool runActions) {
    int auto0E5D33BA_ae;
    int auto0E5D33BA_ai;
    int autoCD0831F9_ae;
    int autoCD0831F9_ai;

    // Variable Declarations
    int lv_int;
    int lv_int2;
    text lv_temptext;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetDialogItemImage(gv_hUDDialogItems[1][PlayerGroupLoopCurrent()], gv_rankDecal[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[1][PlayerGroupLoopCurrent()], gv_rankPrefix[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_statusDialogItems[1][PlayerGroupLoopCurrent()], gv_rankDecal[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[1][PlayerGroupLoopCurrent()], gv_rankPrefix[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], PlayerGroupAll());
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusLeft)) {
            libNtve_gf_SetDialogItemText(gv_hUDDialogItems[2][PlayerGroupLoopCurrent()], TextWithColor(PlayerName(PlayerGroupLoopCurrent()), Color(63.92, 63.92, 63.92)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_statusDialogItems[2][PlayerGroupLoopCurrent()], TextWithColor(PlayerName(PlayerGroupLoopCurrent()), Color(63.92, 63.92, 63.92)), PlayerGroupAll());
        }

        lv_temptext = StringToText("");
        lv_temptext = (lv_temptext + (StringExternal("Param/Value/5979677E") + IntToText(gv_playerExperience[1][PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/B3C04666") + IntToText(gv_playerExperience[2][PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/A397841E") + IntToText(gv_playerExperience[3][PlayerGroupLoopCurrent()])));
        lv_temptext = (lv_temptext + StringExternal("Param/Value/C9FC6763"));
        auto0E5D33BA_ae = gv_medalscount;
        auto0E5D33BA_ai = 1;
        lv_int2 = 1;
        for ( ; ( (auto0E5D33BA_ai >= 0 && lv_int2 <= auto0E5D33BA_ae) || (auto0E5D33BA_ai <= 0 && lv_int2 >= auto0E5D33BA_ae) ) ; lv_int2 += auto0E5D33BA_ai ) {
            if ((gv_medalsunlocked[lv_int2][PlayerGroupLoopCurrent()] == true)) {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/2C6E1EDD"));
                lv_temptext = (lv_temptext + StringToText(gv_medalsnames[lv_int2]));
            }

        }
        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[2][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[2][PlayerGroupLoopCurrent()], (StringExternal("Param/Value/BB620C9F") + IntToText(gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()])), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[3][PlayerGroupLoopCurrent()], IntToText(UnitLevel(gv_playerHeroes[PlayerGroupLoopCurrent()])), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_statusDialogItems[3][PlayerGroupLoopCurrent()], IntToText(UnitLevel(gv_playerHeroes[PlayerGroupLoopCurrent()])), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_statusDialogItems[4][PlayerGroupLoopCurrent()], gv_playerHeroImage[PlayerGroupLoopCurrent()], PlayerGroupAll());
        if ((gv_playerHeroes[PlayerGroupLoopCurrent()] != null)) {
            libNtve_gf_SetDialogItemText(gv_hUDDialogItems[4][PlayerGroupLoopCurrent()], UnitTypeGetName(UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()])), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[4][PlayerGroupLoopCurrent()], UnitTypeGetName(UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()])), PlayerGroupAll());
            DialogControlSetSize(gv_statusDialogItems[6][PlayerGroupLoopCurrent()], PlayerGroupAll(), FixedToInt((100.0 * (UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent) * 0.01))), DialogControlGetHeight(gv_statusDialogItems[6][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()));
            libNtve_gf_SetDialogItemColor(gv_statusDialogItems[6][PlayerGroupLoopCurrent()], Color((100.0 - UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent), 0.0), PlayerGroupAll());
            DialogControlSetSize(gv_statusDialogItems[7][PlayerGroupLoopCurrent()], PlayerGroupAll(), FixedToInt((100.0 * (UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropEnergyPercent, c_unitPropCurrent) * 0.01))), DialogControlGetHeight(gv_statusDialogItems[7][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()));
            if ((UnitIsAlive(gv_playerHeroes[PlayerGroupLoopCurrent()]) == true)) {
                lv_temptext = StringToText("");
                lv_temptext = (StringToText("") + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent), 0), Color((100.0 - UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent)), UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent), 0.0)));
                if ((UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/8ED20E80"));
                }
                else {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/3EF077E1"));
                }
                if ((gf_UnitHighestAilment(gv_playerHeroes[PlayerGroupLoopCurrent()]) == 1)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/807DD220"));
                }

                if ((gf_UnitHighestAilment(gv_playerHeroes[PlayerGroupLoopCurrent()]) == 2)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/579B9707"));
                }

                if ((gf_UnitHighestAilment(gv_playerHeroes[PlayerGroupLoopCurrent()]) == 3)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/D3D20CDD"));
                }

                if ((gf_UnitHighestAilment(gv_playerHeroes[PlayerGroupLoopCurrent()]) == 4)) {
                    lv_temptext = (lv_temptext + StringExternal("Param/Value/B516C212"));
                }

            }
            else {
                DialogControlSetSize(gv_statusDialogItems[6][PlayerGroupLoopCurrent()], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[6][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()));
                lv_temptext = StringExternal("Param/Value/2672DA46");
            }
            libNtve_gf_SetDialogItemText(gv_hUDDialogItems[5][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_statusDialogItems[5][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
        }
        else {
            DialogControlSetSize(gv_statusDialogItems[6][PlayerGroupLoopCurrent()], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[6][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()));
            DialogControlSetSize(gv_statusDialogItems[7][PlayerGroupLoopCurrent()], PlayerGroupAll(), 1, DialogControlGetHeight(gv_statusDialogItems[7][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()));
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusLeft)) {
                libNtve_gf_SetDialogItemText(gv_hUDDialogItems[4][PlayerGroupLoopCurrent()], StringExternal("Param/Value/794474FD"), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_statusDialogItems[5][PlayerGroupLoopCurrent()], StringExternal("Param/Value/1851C77D"), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemText(gv_hUDDialogItems[4][PlayerGroupLoopCurrent()], gv_gamemodename[gv_playermodevote[PlayerGroupLoopCurrent()]], PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_statusDialogItems[5][PlayerGroupLoopCurrent()], gv_gamemodename[gv_playermodevote[PlayerGroupLoopCurrent()]], PlayerGroupAll());
            }
        }
        lv_temptext = StringToText("");
        if ((gv_gamemode == 6)) {
            if ((gv_killingPoints == true)) {
                lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_teamScores[gv_playersTeam[PlayerGroupLoopCurrent()]])), Color(79.61, 59.22, 100.00)));
            }
            else {
                lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_cOMPPlayerKills[PlayerGroupLoopCurrent()])), Color(79.61, 59.22, 100.00)));
            }
            lv_temptext = (lv_temptext + StringExternal("Param/Value/D5A0BF04"));
            lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerDeaths[PlayerGroupLoopCurrent()])), Color(50.20, 50.20, 100.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/EA264984"));
            lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerRoundWins[PlayerGroupLoopCurrent()])), Color(88.63, 87.45, 42.75)));
        }
        else {
            lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerkills[PlayerGroupLoopCurrent()])), Color(79.61, 59.22, 100.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/47D531A2"));
            lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerhits[PlayerGroupLoopCurrent()])), Color(50.20, 50.20, 100.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/350EBAA9"));
            lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropMovementSpeed, c_unitPropCurrent), 2), Color(100.00, 50.20, 25.10)));
            if ((UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()]) == "CombatMedic")) {
                lv_temptext = (lv_temptext + StringExternal("Param/Value/3AD42C04"));
                lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerRevivesGame[PlayerGroupLoopCurrent()])), Color(100.00, 100.00, 0.00)));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/3BFF8E08"));
                lv_temptext = (lv_temptext + TextWithColor((IntToText(gv_playerheals[PlayerGroupLoopCurrent()])), Color(0.00, 100.00, 50.20)));
            }

        }
        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[6][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
        lv_temptext = StringToText("");
        if ((gv_gamemode == 6)) {
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/4676FC76") + IntToText(gv_cOMPPlayerKills[PlayerGroupLoopCurrent()])), Color(79.61, 59.22, 100.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/2B60CAF0"));
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/8505BFE4") + IntToText(gv_playerDeaths[PlayerGroupLoopCurrent()])), Color(50.20, 50.20, 100.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/B089456E"));
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/6CB0B1A1") + IntToText(gv_playerRoundWins[PlayerGroupLoopCurrent()])), Color(50.20, 50.20, 100.00)));
        }
        else {
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/85D8B6B9") + IntToText(gv_playerkills[PlayerGroupLoopCurrent()])), Color(79.61, 59.22, 100.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/B038EFCE"));
            if ((gv_gamemode == 8)) {
                lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/D6CA3F39") + IntToText(gv_playermassivekills[PlayerGroupLoopCurrent()])), Color(0.00, 100.00, 0.00)));
            }
            else {
                lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/137EB65E") + IntToText(gv_playermassivekills[PlayerGroupLoopCurrent()])), Color(0.00, 100.00, 0.00)));
            }
            lv_temptext = (lv_temptext + StringExternal("Param/Value/20945F27"));
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/49DCBCFC") + IntToText(gv_playerhits[PlayerGroupLoopCurrent()])), Color(50.20, 50.20, 100.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/3DD24DAB"));
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/6CD39AAD") + IntToText(gv_playerDeaths[PlayerGroupLoopCurrent()])), Color(100.00, 20.78, 20.78)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/533FA614"));
            lv_temptext = (lv_temptext + TextWithColor(FixedToText(UnitGetPropertyFixed(gv_playerHeroes[PlayerGroupLoopCurrent()], c_unitPropMovementSpeed, c_unitPropCurrent), 2), Color(100.00, 50.20, 25.10)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/BFC0B393"));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/4C612C96"));
            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/261D7B9E") + IntToText(gv_playerRevives[PlayerGroupLoopCurrent()])), Color(100.00, 100.00, 0.00)));
            lv_temptext = (lv_temptext + StringExternal("Param/Value/EEA80F83"));
            if ((UnitGetType(gv_playerHeroes[PlayerGroupLoopCurrent()]) == "CombatMedic")) {
                lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/16609996") + IntToText(gv_playerRevivesGame[PlayerGroupLoopCurrent()])), Color(100.00, 100.00, 0.00)));
                lv_temptext = (lv_temptext + StringExternal("Param/Value/26ED0EED"));
            }

            lv_temptext = (lv_temptext + TextWithColor((StringExternal("Param/Value/B9664EE0") + IntToText(gv_playerheals[PlayerGroupLoopCurrent()])), Color(0.00, 100.00, 50.20)));
        }
        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[6][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_statusDialogItems[5][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[7][PlayerGroupLoopCurrent()], IntToText(gv_playerGamesPlayed[PlayerGroupLoopCurrent()]), PlayerGroupAll());
        lv_temptext = StringExternal("Param/Value/EBA4BA5F");
        autoCD0831F9_ae = 8;
        autoCD0831F9_ai = 1;
        lv_int2 = 1;
        for ( ; ( (autoCD0831F9_ai >= 0 && lv_int2 <= autoCD0831F9_ae) || (autoCD0831F9_ai <= 0 && lv_int2 >= autoCD0831F9_ae) ) ; lv_int2 += autoCD0831F9_ai ) {
            lv_temptext = (lv_temptext + (StringExternal("Param/Value/EBC7B4B5") + gv_gamemodename[lv_int2] + StringExternal("Param/Value/99495267") + IntToText(gv_gamesWon[lv_int2][PlayerGroupLoopCurrent()]) + StringExternal("Param/Value/F7453FC4")));
        }
        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[7][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
        lv_temptext = StringToText("");
        if ((gv_playerSIsused[1][PlayerGroupLoopCurrent()] != 0)) {
            lv_temptext = (lv_temptext + StringToText(StringSub(gv_sIabbreviation[gv_playerSIsused[1][PlayerGroupLoopCurrent()]], 1, 2)));
        }

        if ((gv_playerSIsused[2][PlayerGroupLoopCurrent()] != 0)) {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/875ECCF6"));
            lv_temptext = (lv_temptext + StringToText(StringSub(gv_sIabbreviation[gv_playerSIsused[2][PlayerGroupLoopCurrent()]], 1, 2)));
        }

        libNtve_gf_SetDialogItemText(gv_hUDDialogItems[8][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
        if ((gv_playerSIsused[1][PlayerGroupLoopCurrent()] != 0)) {
            lv_temptext = gv_sIname[gv_playerSIsused[1][PlayerGroupLoopCurrent()]];
        }

        if ((gv_playerSIsused[2][PlayerGroupLoopCurrent()] != 0)) {
            lv_temptext = (lv_temptext + StringExternal("Param/Value/C8792DC1"));
            lv_temptext = (lv_temptext + gv_sIname[gv_playerSIsused[2][PlayerGroupLoopCurrent()]]);
        }

        libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[8][PlayerGroupLoopCurrent()], lv_temptext, PlayerGroupAll());
        lv_int = (lv_int + 1);
        Wait(0.1, c_timeGame);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HUDUpdate_Init () {
    gt_HUDUpdate = TriggerCreate("gt_HUDUpdate_Func");
    TriggerEnable(gt_HUDUpdate, false);
    TriggerAddEventTimePeriodic(gt_HUDUpdate, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Init Hud Dialog
//--------------------------------------------------------------------------------------------------
bool gt_COMPInitHudDialog_Func (bool testConds, bool runActions) {
    int auto96EEDC8B_ae;
    int auto96EEDC8B_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetSize(gv_hUDDialog, DialogGetWidth(gv_hUDDialog), (DialogGetHeight(gv_hUDDialog) + 100));
    DialogControlSetSize(gv_hUDDialogItems[0][14], PlayerGroupAll(), DialogGetWidth(gv_hUDDialog), DialogGetHeight(gv_hUDDialog));
    libNtve_gf_SetDialogItemText(gv_hUDDialogItems[0][13], StringExternal("Param/Value/515F8C9B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_hUDDialogItems[0][13], StringExternal("Param/Value/64215F6F"), PlayerGroupAll());
    auto96EEDC8B_ae = 4;
    auto96EEDC8B_ai = 1;
    lv_int = 1;
    for ( ; ( (auto96EEDC8B_ai >= 0 && lv_int <= auto96EEDC8B_ae) || (auto96EEDC8B_ai <= 0 && lv_int >= auto96EEDC8B_ae) ) ; lv_int += auto96EEDC8B_ai ) {
        libNtve_gf_CreateDialogItemLabel(gv_hUDDialog, 200, 25, c_anchorTopLeft, 60, 0, TextWithColor((StringExternal("Param/Value/D74D67C3") + IntToText(lv_int)), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_int])), Color(100,100,100), false, 2.0);
        gv_hUDDialogItems[lv_int][0] = DialogControlLastCreated();
        DialogControlSetVisible(gv_hUDDialogItems[lv_int][0], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemLabel(gv_hUDDialog, 200, 25, c_anchorTopLeft, 585, 0, StringExternal("Param/Value/010E80CE"), libNtve_gf_ConvertPlayerColorToColor(gv_teamColors[lv_int]), false, 2.0);
        gv_hUDDialogItems[lv_int][13] = DialogControlLastCreated();
        DialogControlSetVisible(gv_hUDDialogItems[lv_int][13], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPInitHudDialog_Init () {
    gt_COMPInitHudDialog = TriggerCreate("gt_COMPInitHudDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Refresh HUD Dialog
//--------------------------------------------------------------------------------------------------
bool gt_COMPRefreshHUDDialog_Func (bool testConds, bool runActions) {
    int autoAFA912B7_ae;
    int autoAFA912B7_ai;
    int auto17526ED5_ae;
    int auto17526ED5_ai;
    int auto04B83EF2_ae;
    int auto04B83EF2_ai;
    int autoAA91EC11_ae;
    int autoAA91EC11_ai;

    // Variable Declarations
    int lv_intteam;
    int lv_int;
    int lv_intdia;
    int lv_yoffset;

    // Variable Initialization
    lv_yoffset = 60;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAFA912B7_ae = 4;
    autoAFA912B7_ai = 1;
    lv_int = 1;
    for ( ; ( (autoAFA912B7_ai >= 0 && lv_int <= autoAFA912B7_ae) || (autoAFA912B7_ai <= 0 && lv_int >= autoAFA912B7_ae) ) ; lv_int += autoAFA912B7_ai ) {
        DialogControlSetVisible(gv_hUDDialogItems[lv_int][0], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_hUDDialogItems[lv_int][13], PlayerGroupAll(), false);
    }
    if ((gv_teamCount == 1)) {
        lv_int = 0;
        PlayerGroupLoopBegin(gv_players);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_yoffset = (60 + (lv_int * 25));
            auto17526ED5_ae = 9;
            auto17526ED5_ai = 1;
            lv_intdia = 1;
            for ( ; ( (auto17526ED5_ai >= 0 && lv_intdia <= auto17526ED5_ae) || (auto17526ED5_ai <= 0 && lv_intdia >= auto17526ED5_ae) ) ; lv_intdia += auto17526ED5_ai ) {
                DialogControlSetPosition(gv_hUDDialogItems[lv_intdia][PlayerGroupLoopCurrent()], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_hUDDialogItems[lv_intdia][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()), lv_yoffset);
            }
            lv_int = (lv_int + 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
        auto04B83EF2_ae = gv_teamCount;
        auto04B83EF2_ai = 1;
        lv_intteam = 1;
        for ( ; ( (auto04B83EF2_ai >= 0 && lv_intteam <= auto04B83EF2_ae) || (auto04B83EF2_ai <= 0 && lv_intteam >= auto04B83EF2_ae) ) ; lv_intteam += auto04B83EF2_ai ) {
            DialogControlSetVisible(gv_hUDDialogItems[lv_intteam][0], PlayerGroupAll(), true);
            DialogControlSetVisible(gv_hUDDialogItems[lv_intteam][13], PlayerGroupAll(), true);
            DialogControlSetPosition(gv_hUDDialogItems[lv_intteam][0], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_hUDDialogItems[lv_intteam][0], PlayerGroupLoopCurrent()), lv_yoffset);
            DialogControlSetPosition(gv_hUDDialogItems[lv_intteam][13], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_hUDDialogItems[lv_intteam][13], PlayerGroupLoopCurrent()), lv_yoffset);
            lv_yoffset = (lv_yoffset + 25);
            PlayerGroupLoopBegin(gv_teams[lv_intteam]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                autoAA91EC11_ae = 9;
                autoAA91EC11_ai = 1;
                lv_intdia = 1;
                for ( ; ( (autoAA91EC11_ai >= 0 && lv_intdia <= autoAA91EC11_ae) || (autoAA91EC11_ai <= 0 && lv_intdia >= autoAA91EC11_ae) ) ; lv_intdia += autoAA91EC11_ai ) {
                    DialogControlSetPosition(gv_hUDDialogItems[lv_intdia][PlayerGroupLoopCurrent()], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_hUDDialogItems[lv_intdia][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()), lv_yoffset);
                }
                lv_yoffset = (lv_yoffset + 25);
            }
            PlayerGroupLoopEnd();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPRefreshHUDDialog_Init () {
    gt_COMPRefreshHUDDialog = TriggerCreate("gt_COMPRefreshHUDDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Kick Button
//--------------------------------------------------------------------------------------------------
bool gt_VoteKickButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_votekickminimum;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((EventDialogControl() == gv_hUDDialogItems[9][PlayerGroupLoopCurrent()])) {
            if ((EventDialogControl() == gv_hUDDialogItems[9][EventPlayer()])) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/27F29D42"));
                return true;
            }

            if ((gv_playervoted[EventPlayer()][PlayerGroupLoopCurrent()] == false)) {
                gv_playervoted[EventPlayer()][PlayerGroupLoopCurrent()] = true;
                gv_playerkickvotes[PlayerGroupLoopCurrent()] = (gv_playerkickvotes[PlayerGroupLoopCurrent()] + 1);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/3D94CC19") + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)))));
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/D39A1333") + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)))));
                lv_votekickminimum = (PlayerGroupCount(gv_players) / 2);
                if ((gv_playerkickvotes[PlayerGroupLoopCurrent()] > lv_votekickminimum)) {
                    GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, false, true);
                    UnitGroupLoopBegin(gv_heroskilledbyplayer[PlayerGroupLoopCurrent()]);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "ReviveModifyUnit", UnitGroupLoopCurrent());
                    }
                    UnitGroupLoopEnd();
                    if ((gv_playerExperience[1][PlayerGroupLoopCurrent()] <= 5000)) {
                    }

                }

            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1D67074C"));
            }
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteKickButton_Init () {
    gt_VoteKickButton = TriggerCreate("gt_VoteKickButton_Func");
    TriggerAddEventDialogControl(gt_VoteKickButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Status Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitStatusDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_int2;
    int lv_yoffset;
    int lv_yoffset2;
    text lv_temptext;

    // Variable Initialization
    lv_yoffset = 10;
    lv_yoffset2 = 35;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(50, 50, c_anchorTopRight, 0, 75, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 0, 0, StringExternal("Param/Value/3FDB35CF"), StringExternal("Param/Value/A37B743A"), "");
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_statusDialogItems[0][0] = DialogControlLastCreated();
    DialogCreate(185, (20 + (50 * PlayerGroupCount(gv_players))), c_anchorTopRight, 0, 125, true);
    gv_statusDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(gv_statusDialog), DialogGetHeight(gv_statusDialog), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_mission_frame_massege.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_yoffset = (10 + (lv_int * 50));
        lv_yoffset2 = (35 + (lv_int * 50));
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 5, lv_yoffset, gv_rankPrefix[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], gv_rankDecal[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_statusDialogItems[1][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_rankPrefix[gv_playerRankSet[PlayerGroupLoopCurrent()]][gf_GetPlayerRank(PlayerGroupLoopCurrent())], PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 25, c_anchorTopLeft, 35, lv_yoffset, PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
        gv_statusDialogItems[2][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 35, 25, c_anchorTopLeft, 150, lv_yoffset2, IntToText(UnitLevel(gv_playerHeroes[PlayerGroupLoopCurrent()])), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statusDialogItems[3][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorTopLeft, 5, lv_yoffset2, StringToText(""), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_statusDialogItems[4][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 125, 25, c_anchorTopLeft, 35, lv_yoffset2, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
        gv_statusDialogItems[5][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 25, c_anchorTopLeft, 35, lv_yoffset2, StringToText(""), "Assets\\Textures\\ui_ingame_lotv_healthbar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_statusDialogItems[6][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 9, c_anchorTopLeft, 35, (lv_yoffset2 + 18), StringToText(""), "Assets\\Textures\\ui_ingame_lotv_energybar.dds", c_triggerImageTypeNormal, false, Color(84*100/255,0,129*100/255), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 513, PlayerGroupAll());
        gv_statusDialogItems[7][PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        lv_int = (lv_int + 1);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitStatusDialog_Init () {
    gt_InitStatusDialog = TriggerCreate("gt_InitStatusDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitStatusDialog, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide Status Dialogue
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideStatusDialogue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_temptext;
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_statusDialogItems[0][0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_statusDialog, EventPlayer()) == false)) {
        DialogSetVisible(gv_statusDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogSetVisible(gv_statusDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideStatusDialogue_Init () {
    gt_ShowHideStatusDialogue = TriggerCreate("gt_ShowHideStatusDialogue_Func");
    TriggerAddEventDialogControl(gt_ShowHideStatusDialogue, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COMP Refresh Status Dialog
//--------------------------------------------------------------------------------------------------
bool gt_COMPRefreshStatusDialog_Func (bool testConds, bool runActions) {
    int auto909CFE1F_ae;
    int auto909CFE1F_ai;
    int auto977D70ED_ae;
    int auto977D70ED_ai;
    int auto80BF99A7_ae;
    int auto80BF99A7_ai;
    int autoD80CB3EB_ae;
    int autoD80CB3EB_ai;

    // Variable Declarations
    int lv_intteam;
    int lv_int;
    int lv_intdia;
    int lv_yoffset;
    int lv_yoffset2;

    // Variable Initialization
    lv_yoffset = 10;
    lv_yoffset2 = 35;

    // Actions
    if (!runActions) {
        return true;
    }

    auto909CFE1F_ae = gv_teamCount;
    auto909CFE1F_ai = 1;
    lv_intteam = 1;
    for ( ; ( (auto909CFE1F_ai >= 0 && lv_intteam <= auto909CFE1F_ae) || (auto909CFE1F_ai <= 0 && lv_intteam >= auto909CFE1F_ae) ) ; lv_intteam += auto909CFE1F_ai ) {
        PlayerGroupLoopBegin(gv_teams[lv_intteam]);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            auto977D70ED_ae = 5;
            auto977D70ED_ai = 1;
            lv_intdia = 1;
            for ( ; ( (auto977D70ED_ai >= 0 && lv_intdia <= auto977D70ED_ae) || (auto977D70ED_ai <= 0 && lv_intdia >= auto977D70ED_ae) ) ; lv_intdia += auto977D70ED_ai ) {
                DialogControlSetVisible(gv_statusDialogItems[lv_intdia][PlayerGroupLoopCurrent()], PlayerGroupAll(), false);
            }
        }
        PlayerGroupLoopEnd();
    }
    auto80BF99A7_ae = gv_teamCount;
    auto80BF99A7_ai = 1;
    lv_intteam = 1;
    for ( ; ( (auto80BF99A7_ai >= 0 && lv_intteam <= auto80BF99A7_ae) || (auto80BF99A7_ai <= 0 && lv_intteam >= auto80BF99A7_ae) ) ; lv_intteam += auto80BF99A7_ai ) {
        lv_int = 0;
        PlayerGroupLoopBegin(gv_teams[lv_intteam]);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_yoffset = (10 + (lv_int * 50));
            lv_yoffset2 = (35 + (lv_int * 50));
            DialogControlSetPosition(gv_statusDialogItems[1][PlayerGroupLoopCurrent()], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_statusDialogItems[1][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()), lv_yoffset);
            DialogControlSetPosition(gv_statusDialogItems[2][PlayerGroupLoopCurrent()], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_statusDialogItems[2][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()), lv_yoffset);
            DialogControlSetPosition(gv_statusDialogItems[3][PlayerGroupLoopCurrent()], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_statusDialogItems[3][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()), lv_yoffset2);
            DialogControlSetPosition(gv_statusDialogItems[4][PlayerGroupLoopCurrent()], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_statusDialogItems[4][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()), lv_yoffset2);
            DialogControlSetPosition(gv_statusDialogItems[5][PlayerGroupLoopCurrent()], PlayerGroupAll(), c_anchorTopLeft, DialogControlGetOffsetX(gv_statusDialogItems[5][PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent()), lv_yoffset2);
            autoD80CB3EB_ae = 5;
            autoD80CB3EB_ai = 1;
            lv_intdia = 1;
            for ( ; ( (autoD80CB3EB_ai >= 0 && lv_intdia <= autoD80CB3EB_ae) || (autoD80CB3EB_ai <= 0 && lv_intdia >= autoD80CB3EB_ae) ) ; lv_intdia += autoD80CB3EB_ai ) {
                DialogControlSetVisible(gv_statusDialogItems[lv_intdia][PlayerGroupLoopCurrent()], gv_teams[gv_playersTeam[PlayerGroupLoopCurrent()]], true);
            }
            lv_int = (lv_int + 1);
        }
        PlayerGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_COMPRefreshStatusDialog_Init () {
    gt_COMPRefreshStatusDialog = TriggerCreate("gt_COMPRefreshStatusDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Dialog Init
//--------------------------------------------------------------------------------------------------
bool gt_FireteamDialogInit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gamemode != 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_FireteamVision();
    gv_fireteamnames[1] = StringExternal("Param/Value/661D2199");
    gv_fireteamnames[2] = StringExternal("Param/Value/C08784AB");
    gv_fireteamnames[3] = StringExternal("Param/Value/F2482BD0");
    gv_fireteamnames[4] = StringExternal("Param/Value/BC67D146");
    DialogCreate(50, 50, c_anchorBottomLeft, 0, 0, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorCenter, 0, 0, StringExternal("Param/Value/E1ABA759"), StringExternal("Param/Value/A700D2D7"), "");
    gv_fireteamdialogbuttons[0] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(300, 800, c_anchorTopLeft, 0, 50, true);
    gv_fireteamDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_fireteamDialog, 125, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/9DE0DCE6"), StringExternal("Param/Value/6ED6F1F0"), "");
    gv_fireteamdialogbuttons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 225, 25, StringExternal("Param/Value/9674B6E8"), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireteamDialogInit_Init () {
    gt_FireteamDialogInit = TriggerCreate("gt_FireteamDialogInit_Func");
    TriggerAddEventTimeElapsed(gt_FireteamDialogInit, 8.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Show/Hide
//--------------------------------------------------------------------------------------------------
bool gt_FireteamShowHide_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_fireteamdialogbuttons[0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_fireteamDialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_fireteamDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireteamShowHide_Init () {
    gt_FireteamShowHide = TriggerCreate("gt_FireteamShowHide_Func");
    TriggerAddEventDialogControl(gt_FireteamShowHide, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Create
//--------------------------------------------------------------------------------------------------
bool gt_FireteamCreate_Func (bool testConds, bool runActions) {
    int auto74A1AEDA_ae;
    int auto74A1AEDA_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_fireteamdialogbuttons[5]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playersfireteam[EventPlayer()] != 0)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/227C0B10"), SoundLink("UI_GenericError", -1));
        return true;
    }

    auto74A1AEDA_ae = 4;
    auto74A1AEDA_ai = 1;
    lv_int = 1;
    for ( ; ( (auto74A1AEDA_ai >= 0 && lv_int <= auto74A1AEDA_ae) || (auto74A1AEDA_ai <= 0 && lv_int >= auto74A1AEDA_ae) ) ; lv_int += auto74A1AEDA_ai ) {
        if ((PlayerGroupCount(gv_fireteamGroups[lv_int]) == 0)) {
            break;
        }
        else {
            if ((lv_int == 4)) {
                libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/074DA8D4"), SoundLink("UI_GenericError", -1));
                return true;
            }

        }
    }
    libNtve_gf_CreateDialogItemButton(gv_fireteamDialog, 125, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/E6511A4A"), gv_fireteamnames[lv_int], "");
    gv_fireteamdialogbuttons[lv_int] = DialogControlLastCreated();
    PlayerGroupAdd(gv_fireteamGroups[lv_int], EventPlayer());
    gv_playersfireteam[EventPlayer()] = lv_int;
    gv_fireteamTLs[lv_int] = EventPlayer();
    gf_RefreshFireteamDialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireteamCreate_Init () {
    gt_FireteamCreate = TriggerCreate("gt_FireteamCreate_Func");
    TriggerAddEventDialogControl(gt_FireteamCreate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Join/Leave
//--------------------------------------------------------------------------------------------------
bool gt_FireteamJoinLeave_Func (bool testConds, bool runActions) {
    int autoBAFC7118_ae;
    int autoBAFC7118_ai;

    // Variable Declarations
    int lv_fireteam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_fireteamdialogbuttons[1]) || (EventDialogControl() == gv_fireteamdialogbuttons[2]) || (EventDialogControl() == gv_fireteamdialogbuttons[3]) || (EventDialogControl() == gv_fireteamdialogbuttons[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playersfireteam[EventPlayer()] == 0)) {
        autoBAFC7118_ae = 4;
        autoBAFC7118_ai = 1;
        lv_fireteam = 1;
        for ( ; ( (autoBAFC7118_ai >= 0 && lv_fireteam <= autoBAFC7118_ae) || (autoBAFC7118_ai <= 0 && lv_fireteam >= autoBAFC7118_ae) ) ; lv_fireteam += autoBAFC7118_ai ) {
            if ((EventDialogControl() == gv_fireteamdialogbuttons[lv_fireteam])) {
                if ((PlayerGroupCount(gv_fireteamGroups[lv_fireteam]) < 4)) {
                    PlayerGroupAdd(gv_fireteamGroups[lv_fireteam], EventPlayer());
                    gv_playersfireteam[EventPlayer()] = lv_fireteam;
                    gf_RefreshFireteamDialog();
                    UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/4DA71CF1")));
                }
                else {
                    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/9A466FB9"), SoundLink("UI_GenericError", -1));
                }
            }

        }
    }
    else {
        lv_fireteam = gv_playersfireteam[EventPlayer()];
        UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/835B46E3")));
        UnitRemove(gv_fireteamORPpoints[EventPlayer()]);
        PlayerGroupRemove(gv_fireteamGroups[gv_playersfireteam[EventPlayer()]], EventPlayer());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9FAD62A2"));
        if ((gv_fireteamTLs[lv_fireteam] == EventPlayer())) {
            gv_fireteamTLs[lv_fireteam] = PlayerGroupPlayer(gv_fireteamGroups[lv_fireteam], 1);
            UIDisplayMessage(PlayerGroupSingle(gv_fireteamTLs[lv_fireteam]), c_messageAreaSubtitle, StringExternal("Param/Value/48817F78"));
        }

        gv_playersfireteam[EventPlayer()] = 0;
        gf_RefreshFireteamDialog();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireteamJoinLeave_Init () {
    gt_FireteamJoinLeave = TriggerCreate("gt_FireteamJoinLeave_Func");
    TriggerAddEventDialogControl(gt_FireteamJoinLeave, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fireteam Leader ORP
//--------------------------------------------------------------------------------------------------
bool gt_FireteamLeaderORP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_fireteam;
    point lv_point;
    unitgroup lv_nearbyunits;
    unit lv_target;

    // Variable Initialization
    lv_fireteam = gv_playersfireteam[EventPlayer()];
    lv_point = Point(EventMouseClickedPosXWorld(), EventMouseClickedPosYWorld());
    lv_nearbyunits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_fireteamTLs[gv_playersfireteam[EventPlayer()]] == EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_fireteamORP[lv_fireteam] == c_invalidPingId)) {
        PlayerGroupLoopBegin(gv_fireteamGroups[lv_fireteam]);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitRemove(gv_fireteamORPpoints[PlayerGroupLoopCurrent()]);
        }
        PlayerGroupLoopEnd();
        PingDestroy(gv_fireteamORP[lv_fireteam]);
        lv_nearbyunits = UnitGroupSearch(null, EventPlayer(), lv_point, 1.0, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        libNtve_gf_CreatePingFacingAngle(gv_fireteamGroups[lv_fireteam], "BeaconRallyPing", lv_point, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        gv_fireteamORP[lv_fireteam] = PingLastCreated();
        if ((UnitGroupCount(lv_nearbyunits, c_unitCountAlive) >= 1)) {
            lv_target = UnitGroupClosestToPoint(lv_nearbyunits, lv_point);
            PingSetUnit(PingLastCreated(), lv_target);
            if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), UnitGetOwner(lv_target), libNtve_ge_PlayerRelation_Enemy) == true)) {
                PlayerGroupLoopBegin(gv_fireteamGroups[lv_fireteam]);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FTAttackPoint", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), lv_point);
                    gv_fireteamORPpoints[PlayerGroupLoopCurrent()] = UnitLastCreated();
                    UnitCreateEffectUnit(UnitLastCreated(), "FTAttack", lv_target);
                }
                PlayerGroupLoopEnd();
                UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, (StringExternal("Param/Value/616DC592") + UnitTypeGetName(UnitGetType(lv_target)) + StringExternal("Param/Value/E2291868")));
                PingSetModel(PingLastCreated(), "BeaconAssaultPing");
                PingSetUseUnitVisibility(PingLastCreated(), true);
            }
            else {
                PlayerGroupLoopBegin(gv_fireteamGroups[lv_fireteam]);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FTRallyPoint", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), lv_point);
                    gv_fireteamORPpoints[PlayerGroupLoopCurrent()] = UnitLastCreated();
                    UnitCreateEffectUnit(UnitLastCreated(), "FTRally", lv_target);
                }
                PlayerGroupLoopEnd();
                if ((UnitGetOwner(lv_target) == EventPlayer())) {
                    UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, (StringExternal("Param/Value/4CB2DA96")));
                }
                else {
                    UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, (StringExternal("Param/Value/C2FF873A") + UnitTypeGetName(UnitGetType(lv_target)) + StringExternal("Param/Value/01BD181B")));
                }
            }
            PlayerGroupLoopBegin(gv_fireteamGroups[lv_fireteam]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                UnitIssueOrder(gv_fireteamORPpoints[PlayerGroupLoopCurrent()], OrderTargetingUnit(AbilityCommand("move", 3), lv_target), c_orderQueueReplace);
            }
            PlayerGroupLoopEnd();
        }
        else {
            UIDisplayMessage(gv_fireteamGroups[lv_fireteam], c_messageAreaSubtitle, StringExternal("Param/Value/A4770E49"));
            PlayerGroupLoopBegin(gv_fireteamGroups[lv_fireteam]);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "FTRallyPoint", c_unitCreateIgnorePlacement, PlayerGroupLoopCurrent(), lv_point);
                gv_fireteamORPpoints[PlayerGroupLoopCurrent()] = UnitLastCreated();
                UnitCreateEffectUnit(UnitLastCreated(), "FTRally", UnitLastCreated());
            }
            PlayerGroupLoopEnd();
        }
    }
    else {
        PlayerGroupLoopBegin(gv_fireteamGroups[lv_fireteam]);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitRemove(gv_fireteamORPpoints[PlayerGroupLoopCurrent()]);
        }
        PlayerGroupLoopEnd();
        PingDestroy(gv_fireteamORP[lv_fireteam]);
        gv_fireteamORP[lv_fireteam] = c_invalidPingId;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireteamLeaderORP_Init () {
    gt_FireteamLeaderORP = TriggerCreate("gt_FireteamLeaderORP_Func");
    TriggerAddEventMouseClicked(gt_FireteamLeaderORP, c_playerAny, c_mouseButtonMiddle, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sprint
//--------------------------------------------------------------------------------------------------
bool gt_Sprint_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "Prone") == true)) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_sprinters, EventUnit()) == true)) {
        if ((UnitHasBehavior(EventUnit(), "Sprint") == true)) {
            UnitBehaviorRemove(EventUnit(), "Sprint", -1);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/746A7355"));
        }
        else {
            if ((UnitGetCustomValue(EventUnit(), 2) >= 3.0)) {
                UnitBehaviorAdd(EventUnit(), "Sprint", EventUnit(), FixedToInt(UnitGetCustomValue(EventUnit(), 2)));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/BF2473F4"));
            }

            gf_SprintCheck(EventUnit());
        }
    }
    else {
        UnitSetCustomValue(EventUnit(), 2, 16.0);
        UnitBehaviorAdd(EventUnit(), "Sprint", EventUnit(), 16);
        UnitGroupAdd(gv_sprinters, EventUnit());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/F5D4097C"));
        gf_SprintCheck(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sprint_Init () {
    gt_Sprint = TriggerCreate("gt_Sprint_Func");
    TriggerAddEventUnitAbility(gt_Sprint, null, AbilityCommand("Sprint", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sprint Loop
//--------------------------------------------------------------------------------------------------
bool gt_SprintLoop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_sprinters);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Sprint") == true)) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "Sprint", 1);
            UnitSetCustomValue(UnitGroupLoopCurrent(), 2, IntToFixed(UnitBehaviorCount(UnitGroupLoopCurrent(), "Sprint")));
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Sprint") == false)) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitGroupLoopCurrent())), c_messageAreaSubtitle, StringExternal("Param/Value/A4CBD80E"));
            }

        }
        else {
            if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 2) <= 15.2)) {
                UnitSetCustomValue(UnitGroupLoopCurrent(), 2, (UnitGetCustomValue(UnitGroupLoopCurrent(), 2) + 0.8));
            }
            else {
                if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 2) < 16.0) && (UnitGetCustomValue(UnitGroupLoopCurrent(), 2) > 15.2)) {
                    UnitSetCustomValue(UnitGroupLoopCurrent(), 2, 16.0);
                }

            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SprintLoop_Init () {
    gt_SprintLoop = TriggerCreate("gt_SprintLoop_Func");
    TriggerAddEventTimePeriodic(gt_SprintLoop, 0.75, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Bar Update
//--------------------------------------------------------------------------------------------------
bool gt_AmmoBarUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerProperty() == c_playerPropMinerals)) {
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[2], (StringExternal("Param/Value/14E3A8E8") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals))), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemText(gv_ammoDialogueItems[4], (StringExternal("Param/Value/AF781C2F") + IntToText(PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene))), PlayerGroupSingle(EventPlayer()));
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) > gv_playerEncumbrance[EventPlayer()])) {
            if ((EventPlayerPropertyChangeInt() > 0)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DBB9497C"));
            }

            UnitBehaviorAdd(gv_playerHeroes[EventPlayer()], "Encumbered", gv_playerHeroes[EventPlayer()], 1);
        }
        else {
            UnitBehaviorRemove(gv_playerHeroes[EventPlayer()], "Encumbered", 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoBarUpdate_Init () {
    gt_AmmoBarUpdate = TriggerCreate("gt_AmmoBarUpdate_Func");
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_AmmoBarUpdate, 12, c_playerPropVespene);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Medals Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitMedalsDialog_Func (bool testConds, bool runActions) {
    int autoAA1B57E2_ae;
    int autoAA1B57E2_ai;

    // Variable Declarations
    int lv_int;
    int lv_yoffset;
    int lv_xoffset;

    // Variable Initialization
    lv_yoffset = 60;
    lv_xoffset = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(270, 350, c_anchorLeft, 0, -150, true);
    gv_medalsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(gv_medalsDialog), DialogGetHeight(gv_medalsDialog), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_storymode_subtitle_frame.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/DB61C7D9"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 210, 10, StringExternal("Param/Value/650ECBB4"), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    autoAA1B57E2_ae = gv_medalscount;
    autoAA1B57E2_ai = 1;
    lv_int = 1;
    for ( ; ( (autoAA1B57E2_ai >= 0 && lv_int <= autoAA1B57E2_ae) || (autoAA1B57E2_ai <= 0 && lv_int >= autoAA1B57E2_ae) ) ; lv_int += autoAA1B57E2_ai ) {
        libNtve_gf_CreateDialogItemImage(gv_medalsDialog, 50, 50, c_anchorTopLeft, lv_xoffset, lv_yoffset, StringToText(gv_medalsnames[lv_int]), gv_medalimages[lv_int], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_medalsDialogItems[lv_int] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(gv_medalsDialogItems[lv_int], true, PlayerGroupAll());
        lv_xoffset = (lv_xoffset + 50);
        if ((lv_xoffset >= 260)) {
            lv_xoffset = 10;
            lv_yoffset = (lv_yoffset + 50);
        }

    }
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_UpdateMedalsDialogforP(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitMedalsDialog_Init () {
    gt_InitMedalsDialog = TriggerCreate("gt_InitMedalsDialog_Func");
    TriggerAddEventTimeElapsed(gt_InitMedalsDialog, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Games Played
//--------------------------------------------------------------------------------------------------
bool gt_GamesPlayed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_playerGamesPlayed[PlayerGroupLoopCurrent()] += 1;
        if ((gv_medalsunlocked[1][PlayerGroupLoopCurrent()] == false) && (gv_playerGamesPlayed[PlayerGroupLoopCurrent()] >= 250)) {
            gv_medalsunlocked[1][PlayerGroupLoopCurrent()] = true;
            gf_AwardPlayerXP(500, StringExternal("Param/Value/8EDBE17B"), PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GamesPlayed_Init () {
    gt_GamesPlayed = TriggerCreate("gt_GamesPlayed_Func");
    TriggerAddEventTimeElapsed(gt_GamesPlayed, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Kills
//--------------------------------------------------------------------------------------------------
bool gt_PlayerKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), libNtve_gf_KillingPlayer(), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_gamemode != 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(EventPlayer(), libNtve_gf_KillingPlayer(), libNtve_ge_PlayerRelation_EnemyMutual) == true) && (PlayerGroupHasPlayer(gv_players, libNtve_gf_KillingPlayer()) == true)) {
        gv_playerkills[libNtve_gf_KillingPlayer()] += 1;
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) && (gv_gamemode != 8)) {
            gv_playermassivekills[libNtve_gf_KillingPlayer()] += 1;
        }

        if ((UnitGetOwner(EventUnit()) == 15) && (gv_gamemode == 8)) {
            gv_playermassivekills[libNtve_gf_KillingPlayer()] += 1;
            if ((ModI(gv_playermassivekills[libNtve_gf_KillingPlayer()], 5) == 0)) {
                gf_AwardPlayerXP(1, StringExternal("Param/Value/F6FBF97E"), libNtve_gf_KillingPlayer());
            }

        }

        if ((gv_playerkills[libNtve_gf_KillingPlayer()] >= 1301) && (gv_playermassivekills[libNtve_gf_KillingPlayer()] >= 10) && (gv_medalsunlocked[2][libNtve_gf_KillingPlayer()] == false)) {
            gf_AwardMedal(2, libNtve_gf_KillingPlayer(), 275, StringExternal("Param/Value/6C890388"));
        }

        if ((gv_playermassivekills[libNtve_gf_KillingPlayer()] >= 50) && (gv_gamemode >= 3) && (gv_gamemode <= 5)) {
            gf_AwardMedal(12, libNtve_gf_KillingPlayer(), 780, StringExternal("Param/Value/7A96675B"));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerKills_Init () {
    gt_PlayerKills = TriggerCreate("gt_PlayerKills_Func");
    TriggerAddEventUnitDied(gt_PlayerKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Heal
//--------------------------------------------------------------------------------------------------
bool gt_PlayerHeal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) || (gf_UnitHighestAilment(EventPlayerEffectUsedUnit(c_effectUnitTarget)) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerheals[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] += 1;
    if ((gv_playerheals[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] == 22) && (gv_medalsunlocked[3][EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] == false)) {
        gf_AwardMedal(3, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), 225, StringExternal("Param/Value/CDC1218F"));
    }

    if ((ModI(gv_playerheals[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)], 5) == 0)) {
        gf_AwardPlayerXP(2, StringExternal("Param/Value/943E4C53"), EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerHeal_Init () {
    gt_PlayerHeal = TriggerCreate("gt_PlayerHeal_Func");
    TriggerAddEventPlayerEffectUsed(gt_PlayerHeal, c_playerAny, "BloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_PlayerHeal, c_playerAny, "IMBloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_PlayerHeal, c_playerAny, "ImprovedNanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_PlayerHeal, c_playerAny, "NanoInjectionHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Hit
//--------------------------------------------------------------------------------------------------
bool gt_PlayerHit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_damagedPlayer;

    // Variable Initialization
    lv_hero = EventUnit();
    lv_damagedPlayer = UnitGetOwner(lv_hero);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(lv_damagedPlayer, EventUnitDamageSourcePlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((EventUnitDamageAmount() >= 10.0))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(lv_hero, c_unitPropShields, c_unitPropCurrent) <= 0.5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerhits[lv_damagedPlayer] += 1;
    if ((gv_playerDeaths[lv_damagedPlayer] >= 2) && (gv_playerhits[lv_damagedPlayer] >= 20) && (gv_medalsunlocked[9][lv_damagedPlayer] == false)) {
        gf_AwardMedal(9, EventPlayer(), 425, StringExternal("Param/Value/D50B743B"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerHit_Init () {
    gt_PlayerHit = TriggerCreate("gt_PlayerHit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ailments
//--------------------------------------------------------------------------------------------------
bool gt_Ailments_Func (bool testConds, bool runActions) {
    int auto05EC320E_ae;
    int auto05EC320E_ai;
    fixed auto2B9667EA_at;

    // Variable Declarations
    int lv_loopint;
    unit lv_damaged;
    fixed lv_fractiontaken;

    // Variable Initialization
    lv_damaged = EventUnit();
    lv_fractiontaken = (EventUnitDamageAmount() / UnitGetPropertyFixed(lv_damaged, c_unitPropLifeMax, c_unitPropCurrent));

    // Conditions
    if (testConds) {
        if (!((lv_fractiontaken >= 0.04))) {
            return false;
        }

        if (!((PlayerType(UnitGetOwner(lv_damaged)) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damaged), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_damaged), c_unitAttributeMechanical) == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damaged, "PlasmaShield1") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damaged, "PlasmaShield2") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damaged, "PlasmaShield3") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damaged, "PlasmaShield4") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damaged, "PlasmaShieldIgnis") == false))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_damaged, "StonewallProtocol") == false))) {
            return false;
        }

        if (!((RandomFixed(0.0, 1.0) >= Pow(((gv_ailmentChance - 1.0) / gv_ailmentChance), (lv_fractiontaken * 10.0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitDamageSourceUnit()) == "Tarantula") || (UnitGetType(EventUnitDamageSourceUnit()) == "ArachnidMother") || (UnitGetType(EventUnitDamageSourceUnit()) == "Crab") || (EventUnitDamageEffect() == "SwollenExplosionDmg"))) {
        UnitBehaviorAdd(EventUnit(), gv_ailments[RandomInt(0, 1)], EventUnitDamageSourceUnit(), 1);
    }
    else {
        auto05EC320E_ae = gv_ailmentCount;
        auto05EC320E_ai = 1;
        lv_loopint = 2;
        for ( ; ( (auto05EC320E_ai >= 0 && lv_loopint <= auto05EC320E_ae) || (auto05EC320E_ai <= 0 && lv_loopint >= auto05EC320E_ae) ) ; lv_loopint += auto05EC320E_ai ) {
            if ((RandomInt(1, gv_ailmentIndividualChance[lv_loopint]) == 1)) {
                if (((lv_loopint == 8) || (lv_loopint == 10)) && (UnitGetOwner(EventUnitDamageSourceUnit()) != 14)) {
                    break;
                }

                if ((lv_loopint == 7) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == false)) {
                    break;
                }

                UnitBehaviorAdd(lv_damaged, gv_ailments[lv_loopint], EventUnitDamageSourceUnit(), 1);
                if ((UnitHasBehavior(EventUnit(), "TraumaticBrainInjury") == true) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
                    CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionXY, 0.75, 0.2, 0.0, 105.0);
                    auto2B9667EA_at = 0;
                    while (!((UnitHasBehavior(EventUnit(), "TraumaticBrainInjury") == false)) && auto2B9667EA_at <= 105.0) {
                        Wait(1.0, c_timeGame);
                        auto2B9667EA_at = auto2B9667EA_at + 1.0;
                    }
                    CameraShakeStop(EventPlayer());
                }

                if ((UnitHasBehavior(EventUnit(), "FracturedLeg") == true)) {
                    UnitBehaviorRemove(EventUnit(), "Sprint", -1);
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/011727BB"));
                }

                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ailments_Init () {
    gt_Ailments = TriggerCreate("gt_Ailments_Func");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "RisenClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "BoomerClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "StalkerHorn");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "ClawsDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "MotherFangsDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "TarantulaFangsDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "CrabStingDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "DarreusClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "CacumenSledge");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "AresFist");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "HunterFist");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "MinervaFist");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "ApiaryWeapon");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "ArachChargeDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "ArachnathidClawsDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "ArachnathidClawsDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "AspectusDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "UmbraRifleDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "VesaniaExplosionDmg");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "VesaniaGLDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "IgnisFlamethrowerDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "HopperClawsDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "CreeperClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "LeaperClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "RaisuliClawsdamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "TurnedClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "MetasisAttack");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "GrotesqueDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "GluttonAttackDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "GourmandAttackDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "UnburiedClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "LacertiTalonDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "LividClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "MutantClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "ShredderClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "KrillBite");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "ThanatosClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "SwollenClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "MorbusSludgeDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "CougherDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "BoomerClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "BoomerExplosionDmg");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "GargoyleClaws");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "GargantuanSledge");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "HorrorDamage");
    TriggerAddEventUnitDamaged(gt_Ailments, null, c_unitDamageTypeAny, c_unitDamageEither, "ImmussilusClaws");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cursed Hit
//--------------------------------------------------------------------------------------------------
bool gt_CursedHit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMechanical) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(1, 2) == 1)) {
        UnitBehaviorAdd(EventUnit(), "NecroticVenom", EventUnitDamageSourceUnit(), 1);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "NeurotoxicVenom", EventUnitDamageSourceUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CursedHit_Init () {
    gt_CursedHit = TriggerCreate("gt_CursedHit_Func");
    TriggerAddEventUnitDamaged(gt_CursedHit, null, c_unitDamageTypeAny, c_unitDamageEither, "CursedClaws");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cure Ailments
//--------------------------------------------------------------------------------------------------
bool gt_CureAilments_Func (bool testConds, bool runActions) {
    int autoC4A1062F_ae;
    int autoC4A1062F_ai;
    int autoAFA9D457_ae;
    int autoAFA9D457_ai;

    // Variable Declarations
    int lv_loopint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "QuikClot")) {
        autoC4A1062F_ae = gv_ailmentCount;
        autoC4A1062F_ai = 1;
        lv_loopint = 2;
        for ( ; ( (autoC4A1062F_ai >= 0 && lv_loopint <= autoC4A1062F_ae) || (autoC4A1062F_ai <= 0 && lv_loopint >= autoC4A1062F_ae) ) ; lv_loopint += autoC4A1062F_ai ) {
            UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), gv_ailments[lv_loopint], 1);
        }
    }
    else if ((EventPlayerEffectUsed() == "ImprovedNanoInjectionHeal")) {
        autoAFA9D457_ae = gv_ailmentCount;
        autoAFA9D457_ai = 1;
        lv_loopint = 0;
        for ( ; ( (autoAFA9D457_ai >= 0 && lv_loopint <= autoAFA9D457_ae) || (autoAFA9D457_ai <= 0 && lv_loopint >= autoAFA9D457_ae) ) ; lv_loopint += autoAFA9D457_ai ) {
            UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_ailments[lv_loopint], 1);
        }
    }
    else if ((EventPlayerEffectUsed() == "SelfAid") && ((gv_playerSIsused[1][UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))] == 13) || (gv_playerSIsused[2][UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitSource))] == 13)) && (RandomInt(0, 1) == 1)) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MinorLacerations", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ClassIIIHemmorrhaging", RandomInt(0, 1));
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TraumaticBrainInjury", RandomInt(0, 1));
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FracturedArm", RandomInt(0, 1));
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FracturedLeg", RandomInt(0, 1));
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "EnergyLeak", RandomInt(0, 1));
    }
    else if (((EventPlayerEffectUsed() == "SelfAid"))) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MinorLacerations", 1);
    }
    else if (((EventPlayerEffectUsed() == "IMBloodTransfusionApplyBehavior") || (EventPlayerEffectUsed() == "FirstAidKitBehavior"))) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "MinorLacerations", 1);
    }
    else if ((EventPlayerEffectUsed() == "NanoInjectionHeal")) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "MinorLacerations", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ClassIIIHemmorrhaging", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TraumaticBrainInjury", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FracturedArm", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FracturedLeg", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitTarget), "EnergyLeak", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CureAilments_Init () {
    gt_CureAilments = TriggerCreate("gt_CureAilments_Func");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "QuikClot");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "SelfAid");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "NanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "ImprovedNanoInjectionHeal");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "IMBloodTransfusionApplyBehavior");
    TriggerAddEventPlayerEffectUsed(gt_CureAilments, c_playerAny, "FirstAidKitBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ailment Spawn Zombie
//--------------------------------------------------------------------------------------------------
bool gt_AilmentSpawnZombie_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Risen", c_unitCreateIgnorePlacement, 14, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), UnitGetFacing(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AilmentSpawnZombie_Init () {
    gt_AilmentSpawnZombie = TriggerCreate("gt_AilmentSpawnZombie_Func");
    TriggerAddEventPlayerEffectUsed(gt_AilmentSpawnZombie, c_playerAny, "InfectedBiteDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Low Ammo Warning
//--------------------------------------------------------------------------------------------------
bool gt_LowAmmoWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization
    lv_owner = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, EventUnit()) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(lv_owner, c_playerPropMinerals) == (gv_magsize[lv_owner] / 4)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Flamethrower"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("lowammo", -1), PlayerGroupSingle(lv_owner), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LowAmmoWarning_Init () {
    gt_LowAmmoWarning = TriggerCreate("gt_LowAmmoWarning_Func");
    TriggerEnable(gt_LowAmmoWarning, false);
    TriggerAddEventUnitStartedAttack(gt_LowAmmoWarning, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reload
//--------------------------------------------------------------------------------------------------
bool gt_Reload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    int lv_texttag;
    fixed lv_reloadbasetime;
    fixed lv_reloadmod;
    point lv_position;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);
    lv_texttag = c_textTagNone;
    lv_reloadbasetime = RandomFixed(3.8, 4.2);
    lv_position = UnitGetPosition(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_reloading, lv_caster) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_heroesGroup, lv_caster) == true)) {
        gf_ReloadPlayer(lv_owner, EventPlayer());
    }
    else {
        if ((UnitBehaviorEnabled(EventUnit(), "Training1") == true)) {
            lv_reloadmod = 0.6;
        }

        if ((UnitBehaviorEnabled(EventUnit(), "Training2") == true)) {
            lv_reloadmod = 1.5;
        }

        if ((UnitHasBehavior(EventUnit(), "SOFAR") == true)) {
            lv_reloadbasetime = (lv_reloadbasetime * 0.85);
        }

        UnitGroupAdd(gv_reloading, lv_caster);
        UnitSetPropertyFixed(lv_caster, c_unitPropEnergyPercent, 0.0);
        if ((lv_position != null)) {
            TextTagCreate((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/4FFF3ABB")), 16, lv_position, 1.0, true, true, PlayerGroupAll());
            lv_texttag = TextTagLastCreated();
            TextTagSetTime(lv_texttag, c_textTagTimeDuration, 4.0);
            TextTagAttachToUnit(lv_texttag, lv_caster, 1.0);
        }

        if ((lv_position != null)) {
            SoundPlayAtPoint(SoundLink("magout", -1), PlayerGroupAll(), lv_position, 0.0, 100.0, 0.0);
        }

        Wait((RandomFixed((lv_reloadbasetime - 0.2), (lv_reloadbasetime + 0.2)) - lv_reloadmod), c_timeGame);
        if ((lv_position != null)) {
            SoundPlayAtPoint(SoundLink("magin", -1), PlayerGroupAll(), lv_position, 0.0, 100.0, 0.0);
        }

        Wait(1.0, c_timeGame);
        if ((lv_position != null)) {
            SoundPlayAtPoint(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_position, 0.0, 100.0, 0.0);
        }

        UnitSetPropertyFixed(lv_caster, c_unitPropEnergyPercent, 100.0);
        if ((lv_position != null)) {
            TextTagDestroy(lv_texttag);
        }

        UnitGroupRemove(gv_reloading, lv_caster);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reload_Init () {
    gt_Reload = TriggerCreate("gt_Reload_Func");
    TriggerAddEventUnitAbility(gt_Reload, null, AbilityCommand("Reload", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jam
//--------------------------------------------------------------------------------------------------
bool gt_Jam_Func (bool testConds, bool runActions) {
    string auto66AFEA78_val;

    // Variable Declarations
    unit lv_attacker;
    int lv_owner;
    string lv_unittype;
    int lv_chance;

    // Variable Initialization
    lv_attacker = EventUnit();
    lv_owner = EventPlayer();
    lv_unittype = UnitGetType(lv_attacker);
    lv_chance = (gv_magsize[lv_owner] + 1);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_heroesGroup, lv_attacker) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(lv_owner, c_playerPropMinerals) > 0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_reloading, lv_attacker) == false))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_jammed, lv_attacker) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto66AFEA78_val = lv_unittype;
    if (auto66AFEA78_val == "AutomaticRifleman") {
        if ((UnitHasBehavior(lv_attacker, "M135Minigun") == true)) {
            lv_chance *= 1024;
            lv_chance /= 499;
        }
        else {
            lv_chance *= 1024;
            lv_chance /= 424;
        }
    }
    else if (auto66AFEA78_val == "Cyborg") {
        if ((UnitHasBehavior(lv_attacker, "M135Minigun") == true)) {
            lv_chance *= 1024;
            lv_chance /= 499;
        }
        else {
            lv_chance *= 1024;
            lv_chance /= 424;
        }
    }
    else {
        lv_chance *= 8;
    }
    if ((RandomInt(1, lv_chance) != 1)) {
        return true;
    }

    UnitGroupAdd(gv_jammed, lv_attacker);
    PlayerModifyPropertyInt(lv_owner, c_playerPropCustom, c_playerPropOperSetTo, 0);
    UIDisplayMessage(PlayerGroupSingle(lv_owner), c_messageAreaSubtitle, StringExternal("Param/Value/E0647B28"));
    SoundPlayOnUnit(SoundLink("noammo", -1), PlayerGroupAll(), lv_attacker, 0.0, 100.0, 0.0);
    UnitBehaviorAdd(lv_attacker, "Jammed", lv_attacker, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Jam_Init () {
    gt_Jam = TriggerCreate("gt_Jam_Func");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "AssaultRifle");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "AssaultRifle2");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "MachineGun");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "IncendiaryRounds");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "ShotgunSFAAT");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "AssaultRifleJavGunner");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "DesignatedMarksmanRifle");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "Carbine");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "SteelSaberCarbine");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "ShotgunCE");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "AssaultRiflePL");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "MachineGunCyborg");
    TriggerAddEventUnitStartedAttack2(gt_Jam, null, "AssaultRifle4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unjam
//--------------------------------------------------------------------------------------------------
bool gt_Unjam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    fixed lv_reloadmod;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(lv_caster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_caster, "Jammed") == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_immediateAction, lv_caster) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reloadmod = (lv_reloadmod + (0.15 * IntToFixed(UnitAbilityGetLevel(lv_caster, "SoldierSkills"))));
    if ((UnitHasBehavior(lv_caster, "QuickThinking") == true)) {
        lv_reloadmod = (lv_reloadmod + 0.15);
    }

    if ((UnitHasBehavior(lv_caster, "InstructorTarget") == true)) {
        lv_reloadmod = (lv_reloadmod + 0.3);
    }

    UnitGroupAdd(gv_immediateAction, lv_caster);
    if ((RandomInt(1, 6) == 1)) {
        SoundPlayOnUnit(SoundLink("magin", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(1.3, 1.7) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(1.3, 1.7) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("magout", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(3.8, 4.2) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("magin", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(1.3, 1.7) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait(0.4, c_timeGame);
    }
    else {
        SoundPlayOnUnit(SoundLink("magin", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait((RandomFixed(1.3, 1.7) - lv_reloadmod), c_timeGame);
        SoundPlayOnUnit(SoundLink("charginghandle", -1), PlayerGroupAll(), lv_caster, 0.0, 100.0, 0.0);
        Wait(0.4, c_timeGame);
    }
    PlayerModifyPropertyInt(lv_owner, c_playerPropCustom, c_playerPropOperSetTo, 99999);
    UnitGroupRemove(gv_jammed, lv_caster);
    UnitBehaviorRemove(lv_caster, "Jammed", 1);
    UnitGroupRemove(gv_immediateAction, lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unjam_Init () {
    gt_Unjam = TriggerCreate("gt_Unjam_Func");
    TriggerAddEventUnitAbility(gt_Unjam, null, AbilityCommand("ImmediateRemedialAction", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Gain Level
//--------------------------------------------------------------------------------------------------
bool gt_HeroGainLevel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_actor;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AttachModelToUnit(EventUnit(), "LevelUp", "Ref_Center");
    lv_actor = libNtve_gf_ActorLastCreated();
    SoundPlayOnUnit(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    libNtve_gf_PlayAnimation(lv_actor, c_animNameDefault, "Stand", 0, c_animTimeDefault);
    Wait(0.45, c_timeGame);
    libNtve_gf_KillModel(lv_actor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroGainLevel_Init () {
    gt_HeroGainLevel = TriggerCreate("gt_HeroGainLevel_Func");
    TriggerAddEventUnitGainLevel(gt_HeroGainLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death
//--------------------------------------------------------------------------------------------------
bool gt_HeroDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingplayer;
    unit lv_dyingunit;
    int lv_loopint;

    // Variable Initialization
    lv_dyingplayer = EventPlayer();
    lv_dyingunit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerheroisdead[lv_dyingplayer] = true;
    SoundPlayOnUnit(SoundLink("diebuzz", -1), PlayerGroupAll(), lv_dyingunit, 0.0, 100.0, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadHeroIndicator", 0, lv_dyingplayer, UnitGetPosition(lv_dyingunit));
    gv_deadHeroIndicator[lv_dyingplayer] = UnitLastCreated();
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupLoopCurrent() != lv_dyingplayer)) {
            libNtve_gf_ShareVisionofUnit(gv_deadHeroIndicator[lv_dyingplayer], true, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    gv_playerDeaths[lv_dyingplayer] += 1;
    if ((gv_playerDeaths[EventPlayer()] >= 2) && (gv_playerhits[EventPlayer()] >= 20) && (gv_medalsunlocked[9][EventPlayer()] == false)) {
        gv_medalsunlocked[9][EventPlayer()] = true;
        gf_AwardPlayerXP(425, StringExternal("Param/Value/7888BDB9"), EventPlayer());
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, EventPlayer(), true);
        }

    }
    PlayerGroupLoopEnd();
    if ((PlayerGetPropertyInt(lv_dyingplayer, c_playerPropVespene) >= 3) && (UnitGetType(lv_dyingunit) != "Flamethrower")) {
        libNtve_gf_CreateUnitsWithDefaultFacing((PlayerGetPropertyInt(lv_dyingplayer, c_playerPropVespene) / 3), "Magazines", 0, 0, PointWithOffset(UnitGetPosition(lv_dyingunit), RandomFixed(-1.0, 1.0), RandomFixed(-1.0, 1.0)));
        UnitGroupAddUnitGroup(gv_playerdroppedammo[EventPlayer()], UnitLastCreatedGroup());
        if ((ModI(PlayerGetPropertyInt(lv_dyingplayer, c_playerPropVespene), 3) == 0)) {
            PlayerModifyPropertyInt(lv_dyingplayer, c_playerPropVespene, c_playerPropOperSetTo, 0);
        }
        else if ((ModI(PlayerGetPropertyInt(lv_dyingplayer, c_playerPropVespene), 3) == 1)) {
            PlayerModifyPropertyInt(lv_dyingplayer, c_playerPropVespene, c_playerPropOperSetTo, 1);
        }
        else if ((ModI(PlayerGetPropertyInt(lv_dyingplayer, c_playerPropVespene), 3) == 2)) {
            PlayerModifyPropertyInt(lv_dyingplayer, c_playerPropVespene, c_playerPropOperSetTo, 2);
        }
    }

    if ((lv_dyingplayer == libNtve_gf_KillingPlayer())) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/DFDFE595")));
    }
    else {
        if ((PlayerGroupHasPlayer(gv_players, libNtve_gf_KillingPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_dyingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingplayer, false))) + StringExternal("Param/Value/24EF9DAE") + TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false)))));
            if ((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), lv_dyingplayer, libNtve_ge_PlayerRelation_AllyMutual) == true)) {
                gv_playerkickable[libNtve_gf_KillingPlayer()] = true;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/08886B3D") + TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + StringExternal("Param/Value/B6F208B8")));
                UnitGroupAdd(gv_heroskilledbyplayer[libNtve_gf_KillingPlayer()], lv_dyingunit);
            }

        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_dyingplayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_dyingplayer, false))) + StringExternal("Param/Value/2263B6B2")));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HeroDeath_Init () {
    gt_HeroDeath = TriggerCreate("gt_HeroDeath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive
//--------------------------------------------------------------------------------------------------
bool gt_Revive_Func (bool testConds, bool runActions) {
    int autoD77C1FF1_n;
    int autoD77C1FF1_i;

    // Variable Declarations
    unit lv_target;
    int lv_targetplayer;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetplayer = UnitGetOwner(lv_target);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerheroisdead[lv_targetplayer] = false;
    UnitRevive(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifePercent, 70.0);
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropEnergyPercent, 50.0);
    if ((UnitHasBehavior(lv_target, "RankModifier") == false)) {
        UnitBehaviorAdd(lv_target, "RankModifier", lv_target, (gf_GetPlayerRank(lv_targetplayer) - 1));
    }

    UnitRemove(gv_deadHeroIndicator[lv_targetplayer]);
    libNtve_gf_ShowHideUnit(lv_target, false);
    Wait(0.0625, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_target, true);
    libNtve_gf_SendActorMessageToUnit(lv_target, gv_playercamoactormsg[gv_playerCurrentCamo[lv_targetplayer]]);
    if ((gv_playerCurrentDecal[lv_targetplayer] == 0)) {
        libNtve_gf_SendActorMessageToUnit(gv_playerHeroes[lv_targetplayer], gv_rankActorMsg[gv_playerRankSet[lv_targetplayer]][gf_GetPlayerRank(lv_targetplayer)]);
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_target, gv_playerdecalactormsg[gv_playerCurrentDecal[lv_targetplayer]]);
    }
    PlayerModifyPropertyInt(lv_targetplayer, c_playerPropCustom, c_playerPropOperSetTo, 99999);
    UnitGroupRemove(gv_jammed, lv_target);
    UnitBehaviorRemove(lv_target, "Jammed", 1);
    UnitGroupRemove(gv_immediateAction, lv_target);
    autoD77C1FF1_n = UnitGroupCount(gv_playerdroppedammo[lv_targetplayer], c_unitCountAlive);
    for (autoD77C1FF1_i = 1; autoD77C1FF1_i <= autoD77C1FF1_n; autoD77C1FF1_i += 1) {
        UnitInventoryCreate(lv_target, "Magazines");
    }
    UnitGroupLoopBegin(gv_playerdroppedammo[lv_targetplayer]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((gv_pauseSpawning == false)) {
        CameraPan(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), UnitGetPosition(lv_target), 0.0, -1, 10, false);
    }

    UnitSelect(lv_target, UnitGetOwner(lv_target), true);
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_target)), c_messageAreaSubtitle, StringExternal("Param/Value/CC5DA70D"));
    if ((EventPlayerEffectUsedUnitOwner(c_effectPlayerSource) != EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) {
        gv_playerRevives[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] = (gv_playerRevives[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] + 1);
        gv_playerRevivesGame[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] = (gv_playerRevivesGame[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] + 1);
        if ((gv_playerRevivesGame[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] >= 12)) {
            gf_AwardMedal(10, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource), 1200, StringExternal("Param/Value/A3FEAAFB"));
        }

        if ((ModI(gv_playerRevivesGame[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)], 5) == 0)) {
            gf_AwardPlayerXP(2, StringExternal("Param/Value/615431AE"), EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
        }

    }

    if ((gv_playerSIbehaviors[1][UnitGetOwner(lv_target)] != null)) {
        UnitBehaviorAdd(lv_target, gv_playerSIbehaviors[1][UnitGetOwner(lv_target)], lv_target, 1);
    }

    if ((gv_playerSIbehaviors[2][UnitGetOwner(lv_target)] != null)) {
        UnitBehaviorAdd(lv_target, gv_playerSIbehaviors[2][UnitGetOwner(lv_target)], lv_target, 1);
    }

    if ((gv_playerRevives[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] >= 40) && (gv_playerdecalunlocked[7][EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] == false) && (gv_playerkickable[EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] == false)) {
        gv_playerdecalunlocked[7][EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerSource)), c_messageAreaSubtitle, StringExternal("Param/Value/396F0282"));
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerGroupLoopCurrent() != EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) {
            PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), false);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Revive_Init () {
    gt_Revive = TriggerCreate("gt_Revive_Func");
    TriggerAddEventPlayerEffectUsed(gt_Revive, c_playerAny, "ReviveModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick Up Player Dropped Mag
//--------------------------------------------------------------------------------------------------
bool gt_PickUpPlayerDroppedMag_Func (bool testConds, bool runActions) {
    int auto391841C7_ae;
    int auto391841C7_ai;

    // Variable Declarations
    int lv_int;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto391841C7_ae = 12;
    auto391841C7_ai = 1;
    lv_int = 1;
    for ( ; ( (auto391841C7_ai >= 0 && lv_int <= auto391841C7_ae) || (auto391841C7_ai <= 0 && lv_int >= auto391841C7_ae) ) ; lv_int += auto391841C7_ai ) {
        if ((UnitGroupHasUnit(gv_playerdroppedammo[lv_int], EventUnitInventoryItem()) == true)) {
            UnitGroupRemove(gv_playerdroppedammo[lv_int], EventUnitInventoryItem());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PickUpPlayerDroppedMag_Init () {
    gt_PickUpPlayerDroppedMag = TriggerCreate("gt_PickUpPlayerDroppedMag_Func");
    TriggerAddEventUnitInventoryChange(gt_PickUpPlayerDroppedMag, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Prologue
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningPrologue_Func (bool testConds, bool runActions) {
    int auto84C1BC88_n;
    int auto84C1BC88_i;
    int auto4A93C3C1_n;
    int auto4A93C3C1_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    auto84C1BC88_n = 8;
    for (auto84C1BC88_i = 1; auto84C1BC88_i <= auto84C1BC88_n; auto84C1BC88_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 2), "Zombie", 1);
    }
    auto4A93C3C1_n = 4;
    for (auto4A93C3C1_i = 1; auto4A93C3C1_i <= auto4A93C3C1_n; auto4A93C3C1_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 3), "Zombie", 1);
    }
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }

    if ((gv_gamemode >= 4) && (gv_gamemode <= 5)) {
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    }
    else {
        gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }
    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Risen", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningPrologue_Init () {
    gt_UndeadSpawningPrologue = TriggerCreate("gt_UndeadSpawningPrologue_Func");
    TriggerEnable(gt_UndeadSpawningPrologue, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningPrologue, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningPrologue, 60.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning 1
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawning1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(1, "Commando", 5);
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 7);
        gf_SpawnUndead(gv_spawnCount, "Risen", 2);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }
    else {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }
    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 9);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    }

    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndead(gv_spawnCount, "Swarmer", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 2);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 3);
    gf_SpawnUndead((gv_spawnCount * 2), "InfestedCivilian", 5);
    gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 4);
    gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 5);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 4);
    gf_SpawnUndead(FixedToInt((IntToFixed(gv_spawnCount) * 1.3)), "Tarantula", 6);
    gf_SpawnUndead(1, "ArachnidMother", 6);
    gf_SpawnUndead(1, "Gourmand", 20);
    gf_SpawnUndead(1, "Morbus", 7);
    gf_SpawnUndead(1, "Horror", 8);
    if ((gv_averageXP >= 30000)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 4);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 10);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 7);
        gf_SpawnUndead(RandomInt(1, 5), "Leaper", 3);
    }

    if ((gv_averageXP >= 50000)) {
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
    }

    if ((gv_averageXP >= 80000)) {
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead(RandomInt(2, 5), "Leaper", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead(1, "Horror", 12);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 3);
        gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 10);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 4);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 7);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 4);
        gf_SpawnUndead((gv_spawnCount / 3), "Krill", 12);
        gf_SpawnUndead(gv_spawnCount, "Shredder", 7);
        gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
    }

    if ((gv_infestationLevel >= 40)) {
        gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 6);
        gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Unburied", 1);
        gf_SpawnUndead(1, "Gourmand", 11);
    }
    else {
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }
    if ((gv_gamemode == 5)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead(gv_spawnCount, "Glutton", 6);
        gf_SpawnUndead(1, "Gourmand", 12);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawning1_Init () {
    gt_UndeadSpawning1 = TriggerCreate("gt_UndeadSpawning1_Func");
    TriggerEnable(gt_UndeadSpawning1, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawning1, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawning1, 80.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning 2
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawning2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndead(gv_spawnCount, "Boomer", 6);
    gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
    gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
    gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 5);
    gf_SpawnUndead(1, "Gargantuan", 20);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
    gf_SpawnUndead(1, "Gourmand", 10);
    gf_SpawnUndead(1, "Horror", 8);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(RandomInt(1, 3), "Commando", 4);
        gf_SpawnUndead(1, "Morbus", 6);
        gf_SpawnUndead(RandomInt(1, 3), "Spitter", 5);
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 3);
        gf_SpawnUndead(3, "Hunter", 9);
        gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
    }

    if ((gv_averageXP >= 20000)) {
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 3);
    }

    if ((gv_averageXP >= 45000)) {
        gf_SpawnUndead(1, "Gourmand", 15);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
    }

    if ((gv_averageXP >= 65000)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 5);
        gf_SpawnUndead(1, "Horror", 15);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
    }

    if ((gv_infestationLevel >= 40)) {
        gf_SpawnUndead(gv_spawnCount, "Boomer", 6);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Turned", 1);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
        gf_SpawnUndead(1, "Morbus", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 5);
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 5);
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 7);
        gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 7);
        gf_SpawnUndead((gv_spawnCount / 3), "Krill", 12);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Morbus", 5);
        gf_SpawnUndead((gv_spawnCount * 3), "Hopper", 4);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(1, "Gourmand", 50);
        gf_SpawnUndead(3, "Hunter", 5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawning2_Init () {
    gt_UndeadSpawning2 = TriggerCreate("gt_UndeadSpawning2_Func");
    TriggerEnable(gt_UndeadSpawning2, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawning2, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawning2, 120.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning 3
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawning3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Shredder", 5);
    gf_SpawnUndead(3, "Hunter", 8);
    gf_SpawnUndead(1, "Gourmand", 20);
    gf_SpawnUndead(1, "Gargantuan", 18);
    gf_SpawnUndead(gv_spawnCount, "Gargoyle", 8);
    gf_SpawnUndead(RandomInt(1, 6), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
    gf_SpawnUndead(1, "Morbus", 7);
    gf_SpawnUndead(1, "Horror", 8);
    gf_SpawnUndead(RandomInt(1, 3), "Spitter", 6);
    if ((gv_averageXP >= 25000)) {
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead(1, "Horror", 8);
    }

    if ((gv_averageXP >= 60000)) {
        gf_SpawnUndead(1, "Immussilus", 25);
        gf_SpawnUndead(1, "Gourmand", 20);
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
    }

    if ((gv_averageXP >= 95000)) {
        gf_SpawnUndead(gv_spawnCount, "Gargoyle", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Swollen", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
    }

    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Cursed", 3);
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
        gf_SpawnUndead((gv_spawnCount / 2), "Drake", 3);
        gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
    }

    if ((gv_infestationLevel >= 40)) {
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
        gf_SpawnUndead((gv_spawnCount / 3), "Shredder", 5);
        gf_SpawnUndead((gv_spawnCount / 3), "Gargoyle", 5);
        gf_SpawnUndead((gv_spawnCount / 2), "Glutton", 3);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead((gv_spawnCount / 3), "Swollen", 3);
        gf_SpawnUndead(3, "Hunter", 4);
        gf_SpawnUndead(gv_spawnCount, "Turned", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
        gf_SpawnUndead(1, "Morbus", 5);
        gf_SpawnUndead(1, "Aspectus", 20);
        gf_SpawnUndead((gv_spawnCount * 3), "Hopper", 5);
    }

    if ((gv_gamemode == 5)) {
        gf_SpawnUndead(1, "Gourmand", 20);
        gf_SpawnUndead((gv_spawnCount / 2), "Krill", 4);
        gf_SpawnUndead((gv_spawnCount / 3), "Unburied", 1);
        gf_SpawnUndead(RandomInt(1, 3), "Bruchus", 3);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawning3_Init () {
    gt_UndeadSpawning3 = TriggerCreate("gt_UndeadSpawning3_Func");
    TriggerEnable(gt_UndeadSpawning3, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawning3, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawning3, 180.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Zulu
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningZulu_Func (bool testConds, bool runActions) {
    int auto974E7875_n;
    int auto974E7875_i;
    int auto8177AA84_n;
    int auto8177AA84_i;
    int autoA7BE9642_n;
    int autoA7BE9642_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto974E7875_n = 4;
    for (auto974E7875_i = 1; auto974E7875_i <= auto974E7875_n; auto974E7875_i += 1) {
        gf_SpawnUndead(1, "Zulu", 1);
    }
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    auto8177AA84_n = 8;
    for (auto8177AA84_i = 1; auto8177AA84_i <= auto8177AA84_n; auto8177AA84_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 2), "Zombie", 1);
    }
    autoA7BE9642_n = 4;
    for (autoA7BE9642_i = 1; autoA7BE9642_i <= autoA7BE9642_n; autoA7BE9642_i += 1) {
        gf_SpawnUndead((gv_spawnCount / 3), "Zombie", 1);
    }
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
        gf_SpawnUndead((gv_spawnCount / 2), "InfestedCivilian", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningZulu_Init () {
    gt_UndeadSpawningZulu = TriggerCreate("gt_UndeadSpawningZulu_Func");
    TriggerEnable(gt_UndeadSpawningZulu, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningZulu, 5.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningZulu, 60.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Outbreak
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningOutbreak_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndeadImmediate(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndeadImmediate((gv_spawnCount * 3), "InfestedCivilian", 1);
    gf_SpawnUndeadImmediate((gv_spawnCount * 4), "Zombie", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Pooch", 4);
    gf_SpawnUndead(1, "Commando", 4);
    gf_SpawnUndead((gv_spawnCount / 2), "Boomer", 3);
    gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
    Wait(8.0, c_timeGame);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Boomer", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Drake", 2);
    gf_SpawnUndeadImmediate((gv_spawnCount * 4), "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Unburied", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead(RandomInt(1, 3), "Leaper", 3);
    gf_SpawnUndead(RandomInt(1, 3), "Licker", 3);
    Wait(8.0, c_timeGame);
    gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
    gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Tarantula", 5);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Unburied", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "InfestedCivilian", 2);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 2);
        gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Drake", 2);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Unburied", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount * 3), "InfestedCivilian", 1);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndead((gv_spawnCount * 2), "Zombie", 2);
        gf_SpawnUndead(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Boomer", 3);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Risen", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Boomer", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Drake", 2);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndeadImmediate((gv_spawnCount * 2), "Risen", 1);
        gf_SpawnUndead(gv_spawnCount, "Turned", 2);
        gf_SpawnUndead((gv_spawnCount / 2), "Creeper", 1);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Boomer", 3);
        gf_SpawnUndeadImmediate((gv_spawnCount / 2), "Boomer", 3);
        gf_SpawnUndeadImmediate(gv_spawnCount, "Turned", 1);
    }

    if ((gv_infestationLevel >= 45)) {
        gf_SpawnUndead(gv_spawnCount, "Risen", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningOutbreak_Init () {
    gt_UndeadSpawningOutbreak = TriggerCreate("gt_UndeadSpawningOutbreak_Func");
    TriggerEnable(gt_UndeadSpawningOutbreak, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningOutbreak, 50.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningOutbreak, 90.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Burrowed
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningBurrowed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 3);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 1);
    gf_SpawnUndead((gv_spawnCount / 2), "Charger", 1);
    gf_SpawnUndead((gv_spawnCount / 4), "Bruchus", 1);
    gf_SpawnUndead((gv_spawnCount / 4), "Bruchus", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "Spitter", 1);
    gf_SpawnUndead(2, "ArachnidMother", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Tarantula", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Tarantula", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Eel", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Eel", 1);
    gf_SpawnUndead((gv_spawnCount * 2), "Eel", 1);
    gf_SpawnUndead(2, "StalkerZombie", 1);
    gf_SpawnUndead(1, "Morbus", 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningBurrowed_Init () {
    gt_UndeadSpawningBurrowed = TriggerCreate("gt_UndeadSpawningBurrowed_Func");
    TriggerEnable(gt_UndeadSpawningBurrowed, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningBurrowed, 50.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningBurrowed, 130.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Spawning Tier 1
//--------------------------------------------------------------------------------------------------
bool gt_UndeadSpawningTier1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "InfestedCivilian", 1);
    gf_SpawnUndeadImmediate(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 1);
    gf_SpawnUndead((gv_spawnCount / 3), "InfestedCivilian", 1);
    gf_SpawnUndead(1, "Gourmand", 1);
    gf_SpawnUndead(2, "Gourmand", 2);
    gf_SpawnUndead(1, "Gourmand", 3);
    gf_SpawnUndead(3, "Charger", 2);
    gf_SpawnUndead(gv_spawnCount, "Risen", 2);
    gf_SpawnUndead(gv_spawnCount, "InfestedCivilian", 2);
    Wait(8.0, c_timeGame);
    gf_SpawnUndead(gv_spawnCount, "Zombie", 2);
    gf_SpawnUndead(3, "Cursed", 4);
    gf_SpawnUndead(3, "Spitter", 4);
    gf_SpawnUndead(1, "Morbus", 4);
    gf_SpawnUndead(1, "Lacerti", 4);
    gf_SpawnUndead(1, "Raisuli", 2);
    gf_SpawnUndead(RandomInt(2, 5), "Bruchus", 2);
    if ((gv_gamemode >= 2)) {
        gf_SpawnUndead(1, "Raisuli", 2);
        gf_SpawnUndead(1, "Lacerti", 5);
        gf_SpawnUndead(3, "Hunter", 4);
        gf_SpawnUndead(3, "Cursed", 4);
    }

    if ((gv_gamemode >= 3)) {
        gf_SpawnUndead(2, "StalkerZombie", 4);
        gf_SpawnUndead(1, "Gourmand", 3);
        gf_SpawnUndead(1, "Raisuli", 2);
        gf_SpawnUndead(1, "Gargantuan", 3);
        gf_SpawnUndead(1, "Immussilus", 4);
        gf_SpawnUndead(3, "Cursed", 4);
    }

    if ((gv_gamemode >= 4)) {
        gf_SpawnUndead(1, "Gargantuan", 3);
        gf_SpawnUndead(1, "Raisuli", 3);
    }

    if ((gv_gamemode >= 5)) {
        gf_SpawnUndead(1, "Raisuli", 2);
        gf_SpawnUndead(1, "Metasis", 4);
    }

    if ((gv_infestationLevel >= 45)) {
        gf_SpawnUndead(1, "Gourmand", 1);
    }

    if ((GameGetMissionTime() >= 900.0)) {
        gf_SpawnUndead(1, "Minerva", 10);
        gf_SpawnUndead(1, "Ares", 10);
        if ((gv_gamemode >= 3)) {
            gf_SpawnUndead(1, "Ignis", 6);
        }

        if ((gv_gamemode >= 4)) {
            gf_SpawnUndead(1, "Darreus", 5);
        }

        if ((gv_gamemode >= 5)) {
            gf_SpawnUndead(1, "Darreus", 7);
            gf_SpawnUndead(1, "Umbra", 6);
        }

    }
    else {
        gf_SpawnUndead(1, "Grotesque", 5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadSpawningTier1_Init () {
    gt_UndeadSpawningTier1 = TriggerCreate("gt_UndeadSpawningTier1_Func");
    TriggerEnable(gt_UndeadSpawningTier1, false);
    TriggerAddEventTimeElapsed(gt_UndeadSpawningTier1, 90.0, c_timeGame);
    TriggerAddEventTimePeriodic(gt_UndeadSpawningTier1, 280.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Orders
//--------------------------------------------------------------------------------------------------
bool gt_UndeadOrders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_waitmax;

    // Variable Initialization
    lv_waitmax = 0.02;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((UnitGroupCount(gv_undeadGroup, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waitmax = (18.0 / IntToFixed(UnitGroupCount(gv_undeadGroup, c_unitCountAlive)));
    UnitGroupLoopBegin(gv_undeadGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsHidden(UnitGroupLoopCurrent()) == false) && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            if ((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
            }
            else {
                break;
            }
            Wait(RandomFixed(0.0625, lv_waitmax), c_timeGame);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadOrders_Init () {
    gt_UndeadOrders = TriggerCreate("gt_UndeadOrders_Func");
    TriggerAddEventTimePeriodic(gt_UndeadOrders, 22.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Idles
//--------------------------------------------------------------------------------------------------
bool gt_UndeadIdles_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }

        if (!((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadIdles_Init () {
    gt_UndeadIdles = TriggerCreate("gt_UndeadIdles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Umbra/Aspectus Loop
//--------------------------------------------------------------------------------------------------
bool gt_UmbraAspectusLoop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Umbra") || (UnitGetType(EventUnit()) == "Aspectus")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(EventUnit()) == false)) {
            return true;
        }

        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_umbraRegion)), c_orderQueueReplace);
        Wait(45.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UmbraAspectusLoop_Init () {
    gt_UmbraAspectusLoop = TriggerCreate("gt_UmbraAspectusLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos Movement Loop
//--------------------------------------------------------------------------------------------------
bool gt_ThanatosMovementLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    region lv_movementregion;

    // Variable Initialization
    lv_movementregion = RegionEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(EventUnit()) == false)) {
            return true;
        }

        lv_movementregion = RegionEmpty();
        UnitGroupLoopBegin(gv_undeadTargetGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            RegionAddCircle(lv_movementregion, true, UnitGetPosition(UnitGroupLoopCurrent()), 40.0);
            RegionAddCircle(lv_movementregion, false, UnitGetPosition(UnitGroupLoopCurrent()), 25.0);
        }
        UnitGroupLoopEnd();
        lv_point = RegionRandomPoint(lv_movementregion);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        Wait(20.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThanatosMovementLoop_Init () {
    gt_ThanatosMovementLoop = TriggerCreate("gt_ThanatosMovementLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos Is Attacked
//--------------------------------------------------------------------------------------------------
bool gt_ThanatosIsAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_movementregion;

    // Variable Initialization
    lv_movementregion = RegionEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(3.0, 5.0), c_timeGame);
    UnitGroupLoopBegin(gv_undeadTargetGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        RegionAddCircle(lv_movementregion, true, UnitGetPosition(UnitGroupLoopCurrent()), 80.0);
        RegionAddCircle(lv_movementregion, false, UnitGetPosition(UnitGroupLoopCurrent()), 25.0);
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(EventUnitTarget(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lv_movementregion)), c_orderQueueReplace);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThanatosIsAttacked_Init () {
    gt_ThanatosIsAttacked = TriggerCreate("gt_ThanatosIsAttacked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thanatos Pull
//--------------------------------------------------------------------------------------------------
bool gt_ThanatosPull_Func (bool testConds, bool runActions) {
    int auto602A26A1_ae;
    int auto602A26A1_ai;

    // Variable Declarations
    int lv_loopint;
    fixed lv_angle;
    point lv_target;
    point lv_origin;
    fixed lv_interval;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(UnitGetPosition(EventUnitTargetUnit()), UnitGetPosition(EventUnit()));
    lv_target = UnitGetPosition(EventUnit());
    lv_origin = UnitGetPosition(EventUnitTargetUnit());
    lv_interval = (DistanceBetweenPoints(lv_target, lv_origin) / 1.5);
    SoundPlayOnUnit(SoundLink("Overlord_Load", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    SoundPlayOnUnit(SoundLink("Nydus_ConstructionFinish", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    SoundPlayOnUnit(SoundLink("Ultralisk_AttackImpact", -1), PlayerGroupAll(), EventUnitTargetUnit(), 0.0, 100.0, 0.0);
    auto602A26A1_ae = FixedToInt(lv_interval);
    auto602A26A1_ai = 1;
    lv_loopint = 1;
    for ( ; ( (auto602A26A1_ai >= 0 && lv_loopint <= auto602A26A1_ae) || (auto602A26A1_ai <= 0 && lv_loopint >= auto602A26A1_ae) ) ; lv_loopint += auto602A26A1_ai ) {
        UnitSetPosition(EventUnitTargetUnit(), PointWithOffsetPolar(UnitGetPosition(EventUnitTargetUnit()), 1.5, lv_angle), true);
        Wait(0.0, c_timeGame);
    }
    UnitBehaviorRemove(EventUnitTargetUnit(), "Pulled", 1);
    Wait(5.0, c_timeGame);
    AICastFlee(EventUnit(), EventUnitTargetUnit(), 25, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ThanatosPull_Init () {
    gt_ThanatosPull = TriggerCreate("gt_ThanatosPull_Func");
    TriggerAddEventUnitAbility(gt_ThanatosPull, null, AbilityCommand("ThanatosPull", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Licker AI
//--------------------------------------------------------------------------------------------------
bool gt_LickerAI_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_gamemode >= 3) || (gv_averageXP >= 20000)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitSource), "UndeadTongueAI", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LickerAI_Init () {
    gt_LickerAI = TriggerCreate("gt_LickerAI_Func");
    TriggerAddEventPlayerEffectUsed(gt_LickerAI, c_playerAny, "LickerAI");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Charger AI
//--------------------------------------------------------------------------------------------------
bool gt_ChargerAI_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(gv_players) >= 3))) {
            return false;
        }

        if (!(((gv_gamemode >= 3) || (gv_averageXP >= 60000)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitSource), "UndeadSprintAIAres", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChargerAI_Init () {
    gt_ChargerAI = TriggerCreate("gt_ChargerAI_Func");
    TriggerAddEventPlayerEffectUsed(gt_ChargerAI, c_playerAny, "ChargerAI");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead Massive Death
//--------------------------------------------------------------------------------------------------
bool gt_UndeadMassiveDeath_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_infestationLevel -= 2;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadMassiveDeath_Init () {
    gt_UndeadMassiveDeath = TriggerCreate("gt_UndeadMassiveDeath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CFF Aspectus
//--------------------------------------------------------------------------------------------------
bool gt_CFFAspectus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(UnitGetPosition(EventUnit()), 2.0), 1.0, false);
        SoundPlayAtPoint(SoundLink("FlareTarget2", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CFFAspectus_Init () {
    gt_CFFAspectus = TriggerCreate("gt_CFFAspectus_Func");
    TriggerAddEventUnitAbility(gt_CFFAspectus, null, AbilityCommand("CallForFireAspectus", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plague Vector Death
//--------------------------------------------------------------------------------------------------
bool gt_PlagueVectorDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(RandomInt(8, 25), "Eel", 0, 14, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    UnitCreate(RandomInt(0, 2), "Swollen", 0, 14, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlagueVectorDeath_Init () {
    gt_PlagueVectorDeath = TriggerCreate("gt_PlagueVectorDeath_Func");
    TriggerAddEventPlayerEffectUsed(gt_PlagueVectorDeath, c_playerAny, "PlagueVectorDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arachnathid Death
//--------------------------------------------------------------------------------------------------
bool gt_ArachnathidDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!(((gv_averageXP >= 12000) || (gv_gamemode >= 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(RandomInt(5, 10), "Crab", 0, 14, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArachnathidDeath_Init () {
    gt_ArachnathidDeath = TriggerCreate("gt_ArachnathidDeath_Func");
    TriggerAddEventPlayerEffectUsed(gt_ArachnathidDeath, c_playerAny, "ArachnathidDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mother Death
//--------------------------------------------------------------------------------------------------
bool gt_MotherDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!(((gv_averageXP >= 12000) || (gv_gamemode >= 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(RandomInt(5, 10), "Tarantula", 0, 14, EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), libNtve_gf_RandomAngle());
    UnitGroupAddUnitGroup(gv_undeadGroup, UnitLastCreatedGroup());
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MotherDeath_Init () {
    gt_MotherDeath = TriggerCreate("gt_MotherDeath_Func");
    TriggerAddEventPlayerEffectUsed(gt_MotherDeath, c_playerAny, "MotherDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Risen Get Back Up
//--------------------------------------------------------------------------------------------------
bool gt_RisenGetBackUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    string lv_type;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_undeadTargetGroup, c_unitCountAlive) >= 1))) {
            return false;
        }

        if (!((RandomInt(0, 8) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = EventPlayerEffectUsedPoint(c_effectLocationSourcePoint);
    lv_type = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource));
    Wait(RandomFixed(10.0, 20.0), c_timeGame);
    while (!((gv_pauseSpawning == false))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_point);
    UnitCreate(1, lv_type, 0, 14, lv_point, libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_undeadGroup, UnitLastCreated());
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RisenGetBackUp_Init () {
    gt_RisenGetBackUp = TriggerCreate("gt_RisenGetBackUp_Func");
    TriggerAddEventPlayerEffectUsed(gt_RisenGetBackUp, c_playerAny, "ZombieRiseDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestation Level Loop
//--------------------------------------------------------------------------------------------------
bool gt_InfestationLevelLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_xP;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_infestationLevel < 1)) {
        gv_infestationLevel = 1;
    }

    if ((gv_infestationLevel >= 40) && (gv_heartbeatplaying == false)) {
        SoundPlay(SoundLink("Heartbeat", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_heartbeat = SoundLastPlayed();
        gv_heartbeatplaying = true;
        if ((gv_undeadMutations == false)) {
            gv_undeadMutations = true;
            gf_MutateUndead();
        }

    }
    else {
        SoundStop(gv_heartbeat, true);
        gv_heartbeatplaying = false;
        gv_undeadMutations = false;
    }
    PlayerGroupLoopBegin(gv_players);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_infestationLevel);
        lv_xP = (lv_xP + gv_playerExperience[gv_playerRankSet[PlayerGroupLoopCurrent()]][PlayerGroupLoopCurrent()]);
    }
    PlayerGroupLoopEnd();
    lv_xP = (lv_xP / PlayerGroupCount(gv_players));
    gv_averageXP = lv_xP;
    if ((ModF(GameGetMissionTime(), 210.0) == 0.0) && (GameGetMissionTime() >= 600.0) && (gv_gamemode <= 5) && (gv_infestationLevel <= 25)) {
        gf_SucceedMission(1, StringExternal("Param/Value/D7B60412"), 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestationLevelLoop_Init () {
    gt_InfestationLevelLoop = TriggerCreate("gt_InfestationLevelLoop_Func");
    TriggerAddEventTimePeriodic(gt_InfestationLevelLoop, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_VisorTextTimerExpire_Init();
    gt_InitModeDialog_Init();
    gt_SetMode_Init();
    gt_ModeSelect_Init();
    gt_GameStart_Init();
    gt_HeroSelection_Init();
    gt_AutoselectHero_Init();
    gt_SelectHeroSelector_Init();
    gt_MissChance_Init();
    gt_Miss_Init();
    gt_PMCUseAbil_Init();
    gt_SquadLoop_Init();
    gt_SquadContact_Init();
    gt_PMCAlertExpire_Init();
    gt_PMCPeriodicSpawn_Init();
    gt_PMCMode_Init();
    gt_PCommissioner_Init();
    gt_PApproachCommissioner_Init();
    gt_PCommissionerTimeout_Init();
    gt_PMCFirstContact_Init();
    gt_PPoliceCheckpoint_Init();
    gt_PEnterPoliceTCP_Init();
    gt_PPoliceTCPTimeout_Init();
    gt_PRAPhantomDown_Init();
    gt_PEnterPhantomLZ_Init();
    gt_PKillCrew_Init();
    gt_PExtractCrew_Init();
    gt_PChapter1ElFantasmadelaSelva_Init();
    gt_PConvoyRaid_Init();
    gt_PConvoyRaidLoop_Init();
    gt_PConvoyRaidLeave_Init();
    gt_PConvoyRaidDies_Init();
    gt_PConvoyRaidEnd_Init();
    gt_PIgnis_Init();
    gt_PGuardPosts_Init();
    gt_PDestroyGuardPost_Init();
    gt_PGuardPostsTimeout_Init();
    gt_PUmbra_Init();
    gt_PChapter2Miserere_Init();
    gt_PTheBurrowed_Init();
    gt_UseSeismicResonator_Init();
    gt_PGhostConvoy_Init();
    gt_PGhostConvoyLoop_Init();
    gt_PGhostConvoyLeave_Init();
    gt_PGhostConvoyContact_Init();
    gt_PGhostConvoyDies_Init();
    gt_PGhostConvoyEnd_Init();
    gt_PCombatWalker_Init();
    gt_PTametheBeast_Init();
    gt_PChapter3nihilmoderabile_Init();
    gt_PBioSamples_Init();
    gt_PTurnInSample_Init();
    gt_PCollectSample_Init();
    gt_PAspectus_Init();
    gt_PAntiAir_Init();
    gt_PTimeStops_Init();
    gt_PTSPlaceSatchel_Init();
    gt_PTSAbortCodes_Init();
    gt_PTSTimeStops_Init();
    gt_PTSTimeStopRevert_Init();
    gt_PDestroytheRA_Init();
    gt_RandomHeroInit_Init();
    gt_KillHero_Init();
    gt_PingHeroes_Init();
    gt_CompetitiveMode_Init();
    gt_NextRound_Init();
    gt_COMPDeathmatch_Init();
    gt_COMPBossBattle_Init();
    gt_COMPClass1Death_Init();
    gt_BBPingClass1s_Init();
    gt_COMPSiloRush_Init();
    gt_COMPSRPingSilos_Init();
    gt_COMPSRCaptureSilo_Init();
    gt_COMPInvasion_Init();
    gt_COMPInvasionPlayerDies_Init();
    gt_COMPConvoy_Init();
    gt_SurvivalMode_Init();
    gt_SurvivalPeriodicXP_Init();
    gt_Survival10Min_Init();
    gt_Survival20Min_Init();
    gt_Survival30Min_Init();
    gt_Survival40Min_Init();
    gt_SurvivalModeTimeout_Init();
    gt_SurvivalEvacPlayerEnter_Init();
    gt_SurvivalEnd_Init();
    gt_AbdulsTruck_Init();
    gt_ApproachAbdul_Init();
    gt_AbdulDies_Init();
    gt_AbdulEnterThalim_Init();
    gt_MarchoftheDead_Init();
    gt_DarreusLoop_Init();
    gt_OPGenerators_Init();
    gt_ApproachGenerator_Init();
    gt_GeneratorPowered_Init();
    gt_Apiaries_Init();
    gt_ApiaryLoop_Init();
    gt_Prologue_Init();
    gt_InitialContact_Init();
    gt_TheMayor_Init();
    gt_MayorGate_Init();
    gt_MayorHouse_Init();
    gt_MayorTimeout_Init();
    gt_TCPs_Init();
    gt_AcquireSentryGun_Init();
    gt_PlaceSentryGun_Init();
    gt_TCPTimeout_Init();
    gt_PrologueMission2_Init();
    gt_MayorDefense_Init();
    gt_MayorDeath_Init();
    gt_Sensors_Init();
    gt_AcquireSensor_Init();
    gt_PlaceSensor_Init();
    gt_SensorTimeout_Init();
    gt_Gourmand_Init();
    gt_Chapter1Fear_Init();
    gt_FarmerAkmaWork_Init();
    gt_FarmerAkma_Init();
    gt_FarmerAkmaTimeout_Init();
    gt_FarmerAkmaApproach_Init();
    gt_FarmerAkmaLoop_Init();
    gt_FarmerAkmaDeath_Init();
    gt_FarmerAkmaWife_Init();
    gt_TCPOps_Init();
    gt_TCPcontainment_Init();
    gt_TCPFinalOut_Init();
    gt_Ch1Mission2_Init();
    gt_DestroyedCity_Init();
    gt_EnterDestroyedCity_Init();
    gt_EnterFiringLine_Init();
    gt_FindSurvivor_Init();
    gt_RescueSurvivor_Init();
    gt_SurvivorDies_Init();
    gt_DestroyedCityEnd_Init();
    gt_Ch1Mission3_Init();
    gt_BattleConvoy_Init();
    gt_ConvoyLoop_Init();
    gt_ConvoyLeave_Init();
    gt_ConvoyUnitDies_Init();
    gt_ConvoyEnd_Init();
    gt_Ch1Mission4_Init();
    gt_EscortCivilians_Init();
    gt_ApproachMayor_Init();
    gt_GuslaniVillageEnter_Init();
    gt_GuslaniOrderLoop_Init();
    gt_GuslaniCivDies_Init();
    gt_RescueGuslani_Init();
    gt_HighlanderApproachBuilding_Init();
    gt_RescueHighlander_Init();
    gt_HighlanderLoop_Init();
    gt_EscortCiviliansEnd_Init();
    gt_EscortMayor_Init();
    gt_EscortMayorTimeout_Init();
    gt_EnterMayorEscort_Init();
    gt_Chapter2_Init();
    gt_Chapter2Killing_Init();
    gt_Ch2Mission1_Init();
    gt_CommanderKLE_Init();
    gt_PatrolLoop_Init();
    gt_PatrolUnitDies_Init();
    gt_Saber6Dies_Init();
    gt_CommanderDies_Init();
    gt_CommanderMeetingForce_Init();
    gt_PatrolEnd_Init();
    gt_Ch2Mission2_Init();
    gt_DasdanCasualties_Init();
    gt_PickUpCasualty_Init();
    gt_MEDEVACTimeExpired_Init();
    gt_EnterMEDEVACSite_Init();
    gt_Darkness_Init();
    gt_AcquireBDS_Init();
    gt_ApproachBDS_Init();
    gt_PlagueVectors_Init();
    gt_PlagueVectorLoop_Init();
    gt_PlagueVectorEnd_Init();
    gt_ThresherMaw_Init();
    gt_Ch2Mission4_Init();
    gt_Evacuation_Init();
    gt_EvacuationTimeout_Init();
    gt_EvacuationLoop_Init();
    gt_EvacuationPlayers_Init();
    gt_EvacuationPlayerEnter_Init();
    gt_EvacuationEnd_Init();
    gt_Chapter2Valor_Init();
    gt_Ch2bMission1_Init();
    gt_Thanatos_Init();
    gt_Ch2bMission2_Init();
    gt_GraveDigger_Init();
    gt_GraveDiggerCollectSampleLoop_Init();
    gt_Ch2bMission3_Init();
    gt_RefugeeKilled_Init();
    gt_DefendThalim_Init();
    gt_RefugeeConvoyLoop_Init();
    gt_RefugeeConvoyLeave_Init();
    gt_RefugeeConvoyDies_Init();
    gt_RefugeeConvoyEnd_Init();
    gt_PlayerLeaveAO_Init();
    gt_Chapter3Love_Init();
    gt_Ch3Mission1_Init();
    gt_RAOutpost_Init();
    gt_EnterRAOutpost_Init();
    gt_UseRAOutpostComputer_Init();
    gt_Ch3Mission2_Init();
    gt_RASnipers_Init();
    gt_RASniperTimeout_Init();
    gt_SniperKilled_Init();
    gt_Ch3Mission3_Init();
    gt_CombatCompany_Init();
    gt_DisabledTankloop_Init();
    gt_Ch3Mission4_Init();
    gt_RAFacility_Init();
    gt_EnterRAFacility_Init();
    gt_DetainScientist_Init();
    gt_ExtractScientist_Init();
    gt_RAFacilityEnd_Init();
    gt_Ch3Mission5_Init();
    gt_InfestedSilos_Init();
    gt_InfestedSiloLoop_Init();
    gt_DisableSilo_Init();
    gt_Chapter3CitiusAltiusFortius_Init();
    gt_Ch3bMission1_Init();
    gt_Ch3bHeliport_Init();
    gt_Ch3bMission2_Init();
    gt_Ch3bDarkSky_Init();
    gt_DSDialogButton_Init();
    gt_DSVoteEnd_Init();
    gt_HelpDS_Init();
    gt_ThalimApproachBuilding_Init();
    gt_DSKeyCard_Init();
    gt_DSKECs_Init();
    gt_DSOperators_Init();
    gt_DSLastStand_Init();
    gt_DoNotHelpDS_Init();
    gt_DNHPlaceSatchel_Init();
    gt_DNHMission2_Init();
    gt_DNHEnterLZ_Init();
    gt_DNHMission3_Init();
    gt_DNHMission4_Init();
    gt_DNHAllIn_Init();
    gt_GameEndCinematica_Init();
    gt_GameEndCinematicafail_Init();
    gt_GameEndCinematicb_Init();
    gt_ProjectZulu_Init();
    gt_ZuluHit_Init();
    gt_PZMission1_Init();
    gt_DrJashanLoop_Init();
    gt_GameEndCinematicZulu_Init();
    gt_RegularGameCompleted_Init();
    gt_CiviliansInit_Init();
    gt_WanderingLoop_Init();
    gt_PolicePatrols_Init();
    gt_PolicePatrolLoop_Init();
    gt_ItemCombining_Init();
    gt_PickupItem_Init();
    gt_DropItem_Init();
    gt_ReloadSentryGun_Init();
    gt_SentryGunItemDrops_Init();
    gt_PlaceSAMSite_Init();
    gt_ItemSpawn1_Init();
    gt_ItemSpawn2_Init();
    gt_ItemSpawnCompetitive_Init();
    gt_InitWeaponCaches_Init();
    gt_FindWeaponsCache_Init();
    gt_HelicopterAI_Init();
    gt_ArmyModifier_Init();
    gt_RocketWarning_Init();
    gt_LearnChargeRefund_Init();
    gt_Disarm_Init();
    gt_CycloneMissileWarning_Init();
    gt_SpawnedUnitVision_Init();
    gt_CriticalShot_Init();
    gt_FragOutWarning_Init();
    gt_FragOutWarningItem_Init();
    gt_CameraShakeSmall_Init();
    gt_CameraShakeLarge_Init();
    gt_JumpInjury_Init();
    gt_LearnMarksmanSkills_Init();
    gt_Prone_Init();
    gt_LaserDesignatorReveal_Init();
    gt_DropMagazine_Init();
    gt_FlamethrowerMagazines_Init();
    gt_Broken_Init();
    gt_JAG108LD_Init();
    gt__30mmChainGun_Init();
    gt_OverhaulResult_Init();
    gt_FragLevelUp_Init();
    gt_ARSkills_Init();
    gt_BeltLinkingReload_Init();
    gt_BeltLinking_Init();
    gt_FirstAidKitMedic_Init();
    gt_BattleFocus_Init();
    gt_LearnReconSkills_Init();
    gt_Heartbeat_Init();
    gt_MonoWire_Init();
    gt_HEATRocketScatter_Init();
    gt_JavelinSkills_Init();
    gt_EngineerSkills_Init();
    gt_StonewallTexture_Init();
    gt_LearnGhostSkillsandISR_Init();
    gt_GhostAttack_Init();
    gt_IonCannonSelection_Init();
    gt_IonCannonWarning_Init();
    gt_LLDRCAS_Init();
    gt_CallForFire_Init();
    gt_ImmediateEffects_Init();
    gt_CallForFireAspectus_Init();
    gt_AttackWeaponsTeam_Init();
    gt_OrbitalStrike_Init();
    gt_OSR_Init();
    gt_FSSSkills_Init();
    gt_SFAATLearnTraining_Init();
    gt_SFAATLearnLeadership_Init();
    gt_SFAATSkillTraining_Init();
    gt_SFAATSkillDismiss_Init();
    gt_SFAATSkillLeadership_Init();
    gt_LNInitialization_Init();
    gt_LNPeriodicPing_Init();
    gt_LNPeriodicSpawn_Init();
    gt_LNPeriodicRally_Init();
    gt_LNSelfPreservation_Init();
    gt_LNCEBarricade_Init();
    gt_LNCEInsufficientSupport_Init();
    gt_MapInitialization_Init();
    gt_GameOver_Init();
    gt_WeatherEffects_Init();
    gt_RandomFog_Init();
    gt_BanksVarsNew_Init();
    gt_SaveBankNew_Init();
    gt_UA3Import_Init();
    gt_HelpImport_Init();
    gt_Tips_Init();
    gt_PlayerLeavesGame_Init();
    gt_Cheats_Init();
    gt_PlayerQuits_Init();
    gt_InitUnlockDialog_Init();
    gt_Commandcamo_Init();
    gt_Commanddecal_Init();
    gt_InitSIDialog_Init();
    gt_Commandsi_Init();
    gt_SIDisciplineXPBonus_Init();
    gt_ReactiveFire_Init();
    gt_SelfAid_Init();
    gt_PowerUserEcell_Init();
    gt_FunctionalButtons_Init();
    gt_Buttonin_Init();
    gt_ButtonTL_Init();
    gt_ButtonDead_Init();
    gt_ButtonSQ_Init();
    gt_Button_Init();
    gt_Buttoncl_Init();
    gt_ButtonWeaponsHold_Init();
    gt_ButtonNODs_Init();
    gt_Buttonnudgel_Init();
    gt_Buttonnudger_Init();
    gt_Buttonnudgeu_Init();
    gt_Buttonnudged_Init();
    gt_ButtonSI_Init();
    gt_ButtonUN_Init();
    gt_ButtonME_Init();
    gt_EscButton_Init();
    gt_Commandreset_Init();
    gt_Commands_Init();
    gt_Commandr_Init();
    gt_Commandd_Init();
    gt_Commandi_Init();
    gt_Command_Init();
    gt_SITREPAbil_Init();
    gt_InitHUDDialog_Init();
    gt_ShowHUDDialog_Init();
    gt_HUDUpdate_Init();
    gt_COMPInitHudDialog_Init();
    gt_COMPRefreshHUDDialog_Init();
    gt_VoteKickButton_Init();
    gt_InitStatusDialog_Init();
    gt_ShowHideStatusDialogue_Init();
    gt_COMPRefreshStatusDialog_Init();
    gt_FireteamDialogInit_Init();
    gt_FireteamShowHide_Init();
    gt_FireteamCreate_Init();
    gt_FireteamJoinLeave_Init();
    gt_FireteamLeaderORP_Init();
    gt_Sprint_Init();
    gt_SprintLoop_Init();
    gt_AmmoBarUpdate_Init();
    gt_InitMedalsDialog_Init();
    gt_GamesPlayed_Init();
    gt_PlayerKills_Init();
    gt_PlayerHeal_Init();
    gt_PlayerHit_Init();
    gt_Ailments_Init();
    gt_CursedHit_Init();
    gt_CureAilments_Init();
    gt_AilmentSpawnZombie_Init();
    gt_LowAmmoWarning_Init();
    gt_Reload_Init();
    gt_Jam_Init();
    gt_Unjam_Init();
    gt_HeroGainLevel_Init();
    gt_HeroDeath_Init();
    gt_Revive_Init();
    gt_PickUpPlayerDroppedMag_Init();
    gt_UndeadSpawningPrologue_Init();
    gt_UndeadSpawning1_Init();
    gt_UndeadSpawning2_Init();
    gt_UndeadSpawning3_Init();
    gt_UndeadSpawningZulu_Init();
    gt_UndeadSpawningOutbreak_Init();
    gt_UndeadSpawningBurrowed_Init();
    gt_UndeadSpawningTier1_Init();
    gt_UndeadOrders_Init();
    gt_UndeadIdles_Init();
    gt_UmbraAspectusLoop_Init();
    gt_ThanatosMovementLoop_Init();
    gt_ThanatosIsAttacked_Init();
    gt_ThanatosPull_Init();
    gt_LickerAI_Init();
    gt_ChargerAI_Init();
    gt_UndeadMassiveDeath_Init();
    gt_CFFAspectus_Init();
    gt_PlagueVectorDeath_Init();
    gt_ArachnathidDeath_Init();
    gt_MotherDeath_Init();
    gt_RisenGetBackUp_Init();
    gt_InfestationLevelLoop_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitCustomScript();
    InitTriggers();
}
